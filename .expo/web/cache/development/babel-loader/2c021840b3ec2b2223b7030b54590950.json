{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n      focusedListeners = _ref.focusedListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addListener = _React$useContext.addListener;\n\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _iterator = _createForOfIteratorHelperLoose(focusedListeners), _step; !(_step = _iterator()).done;) {\n        var _listener = _step.value;\n\n        var _listener2 = _listener(callback),\n            handled = _listener2.handled,\n            result = _listener2.result;\n\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,wBAAP;AAKA,eAAe,SAASC,kCAAT,CAA4CC,IAA5C,EAAkD;AAC/D,MACEC,UADF,GAGID,IAHJ,CACEC,UADF;AAAA,MAEEC,gBAFF,GAGIF,IAHJ,CAEEE,gBAFF;;AAIA,0BAEIL,KAAK,CAACM,UAAN,CAAiBL,wBAAjB,CAFJ;AAAA,MACEM,WADF,qBACEA,WADF;;AAGA,MAAMC,QAAQ,GAAGR,KAAK,CAACS,WAAN,CAAkB,kBAAQ,EAAI;AAC7C,QAAIL,UAAU,CAACM,SAAX,EAAJ,EAA4B;AAC1B,2DAAuBL,gBAAvB,wCAAyC;AAAA,YAA9BG,SAA8B;;AACvC,yBAGIA,SAAQ,CAACG,QAAD,CAHZ;AAAA,YACEC,OADF,cACEA,OADF;AAAA,YAEEC,MAFF,cAEEA,MAFF;;AAKA,YAAID,OAAJ,EAAa;AACX,iBAAO;AACLA,mBAAO,EAAPA,OADK;AAELC,kBAAM,EAANA;AAFK,WAAP;AAID;AACF;;AAED,aAAO;AACLD,eAAO,EAAE,IADJ;AAELC,cAAM,EAAEF,QAAQ,CAACP,UAAD;AAFX,OAAP;AAID,KAnBD,MAmBO;AACL,aAAO;AACLQ,eAAO,EAAE,KADJ;AAELC,cAAM,EAAE;AAFH,OAAP;AAID;AACF,GA1BgB,EA0Bd,CAACR,gBAAD,EAAmBD,UAAnB,CA1Bc,CAAjB;AA2BAJ,OAAK,CAACc,SAAN,CAAgB;AAAA,WAAMP,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAAC,OAAD,EAAUC,QAAV,CAA3E;AAAA,GAAhB,EAAgH,CAACD,WAAD,EAAcC,QAAd,CAAhH;AACD","names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","_ref","navigation","focusedListeners","useContext","addListener","listener","useCallback","isFocused","callback","handled","result","useEffect"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useFocusedListenersChildrenAdapter.js"],"sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  let {\n    navigation,\n    focusedListeners\n  } = _ref;\n  const {\n    addListener\n  } = React.useContext(NavigationBuilderContext);\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      for (const listener of focusedListeners) {\n        const {\n          handled,\n          result\n        } = listener(callback);\n\n        if (handled) {\n          return {\n            handled,\n            result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}\n//# sourceMappingURL=useFocusedListenersChildrenAdapter.js.map"]},"metadata":{},"sourceType":"module"}