{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"defaultStatus\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n      defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var router = TabRouter(rest);\n\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [].concat(_toConsumableArray(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","isDrawerInHistory","_state$history","Boolean","state","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/routers/lib/module/DrawerRouter.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = { ...TabActions,\n\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n};\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}) {\n  const router = TabRouter(rest);\n\n  const isDrawerInHistory = state => {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return { ...router,\n    type: 'drawer',\n\n    getInitialState({\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return { ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return { ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  };\n}\n//# sourceMappingURL=DrawerRouter.js.map"]},"metadata":{},"sourceType":"module"}