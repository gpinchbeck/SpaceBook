{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $lIBue$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $5ff2beda28820a2f$exports = {};\n$parcel$export($5ff2beda28820a2f$exports, \"useToggleState\", function () {\n  return $5ff2beda28820a2f$export$8042c6c013fd5226;\n});\n\nfunction $5ff2beda28820a2f$export$8042c6c013fd5226() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isReadOnly = props.isReadOnly;\n\n  var _$lIBue$useControlled = $lIBue$useControlledState(props.isSelected, props.defaultSelected || false, props.onChange),\n      _$lIBue$useControlled2 = _slicedToArray(_$lIBue$useControlled, 2),\n      isSelected = _$lIBue$useControlled2[0],\n      setSelected = _$lIBue$useControlled2[1];\n\n  function updateSelected(value) {\n    if (!isReadOnly) setSelected(value);\n  }\n\n  function toggleState() {\n    if (!isReadOnly) setSelected(!isSelected);\n  }\n\n  return {\n    isSelected: isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n\nexport { $5ff2beda28820a2f$export$8042c6c013fd5226 as useToggleState };","map":{"version":3,"mappings":";AAAA,SAAQA,kBAAkB,IAAIC,yBAA9B,QAA8D,sBAA9D;;AAEA,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,CAAjC,EAAoC;AAClCC,QAAM,CAACC,cAAP,CAAsBL,CAAtB,EAAyBC,CAAzB,EAA4B;AAACK,OAAG,EAAEJ,CAAN;AAASK,OAAG,EAAEJ,CAAd;AAAiBK,cAAU,EAAE,IAA7B;AAAmCC,gBAAY,EAAE;AAAjD,GAA5B;AACD;;AACD,IAAIC,yBAAyB,GAAG,EAAhC;AAEAX,cAAc,CAACW,yBAAD,EAA4B,gBAA5B,EAA8C;AAAA,SAAMC,yCAAN;AAAA,CAA9C,CAAd;;AAEA,SAASA,yCAAT,GACG;AAAA,MADgDC,KAChD,uEADwD,EACxD;AACC,MAAkBC,UAAlB,GAAkCD,KAAlC,CAAMC,UAAN;;AAGA,8BAAgCf,yBAAyB,CAACc,KAAK,CAACE,UAAP,EAAmBF,KAAK,CAACG,eAAN,IAAyB,KAA5C,EAAmDH,KAAK,CAACI,QAAzD,CAAzD;AAAA;AAAA,MAAKF,UAAL;AAAA,MAAiBG,WAAjB;;AACA,WAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,QAAI,CAACN,UAAL,EAAiBI,WAAW,CAACE,KAAD,CAAX;AACpB;;AACD,WAASC,WAAT,GAAuB;AACnB,QAAI,CAACP,UAAL,EAAiBI,WAAW,CAAC,CAACH,UAAF,CAAX;AACpB;;AACD,SAAO;AACHA,cAAU,EAAEA,UADT;AAEHG,eAAW,EAAEC,cAFV;AAGHG,UAAM,EAAED;AAHL,GAAP;AAKH;;AAKD,SAAQT,yCAAyC,IAAIW,cAArD","names":["useControlledState","$lIBue$useControlledState","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$5ff2beda28820a2f$exports","$5ff2beda28820a2f$export$8042c6c013fd5226","props","isReadOnly","isSelected","defaultSelected","onChange","setSelected","updateSelected","value","toggleState","toggle","useToggleState"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-stately/toggle/dist/module.js"],"sourcesContent":["import {useControlledState as $lIBue$useControlledState} from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $5ff2beda28820a2f$exports = {};\n\n$parcel$export($5ff2beda28820a2f$exports, \"useToggleState\", () => $5ff2beda28820a2f$export$8042c6c013fd5226);\n\nfunction $5ff2beda28820a2f$export$8042c6c013fd5226(props = {\n}) {\n    let { isReadOnly: isReadOnly  } = props;\n    // have to provide an empty function so useControlledState doesn't throw a fit\n    // can't use useControlledState's prop calling because we need the event object from the change\n    let [isSelected, setSelected] = $lIBue$useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n    function updateSelected(value) {\n        if (!isReadOnly) setSelected(value);\n    }\n    function toggleState() {\n        if (!isReadOnly) setSelected(!isSelected);\n    }\n    return {\n        isSelected: isSelected,\n        setSelected: updateSelected,\n        toggle: toggleState\n    };\n}\n\n\n\n\nexport {$5ff2beda28820a2f$export$8042c6c013fd5226 as useToggleState};\n//# sourceMappingURL=module.js.map\n"]},"metadata":{},"sourceType":"module"}