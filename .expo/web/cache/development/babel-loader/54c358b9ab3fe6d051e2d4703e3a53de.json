{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useEffect, useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar displayAlert = new DisplayAlert();\n\nvar getData = function getData(done) {\n  var jsonValue, data;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@spacebook_details'));\n\n        case 3:\n          jsonValue = _context.sent;\n          data = JSON.parse(jsonValue);\n          return _context.abrupt(\"return\", done(data));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar ProfileScreen = function (_Component) {\n  _inherits(ProfileScreen, _Component);\n\n  var _super = _createSuper(ProfileScreen);\n\n  function ProfileScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ProfileScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      login_info: {},\n      userData: {},\n      img: null\n    };\n    return _this;\n  }\n\n  _createClass(ProfileScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      getData(function (data) {\n        _this2.setState({\n          login_info: data\n        });\n\n        _this2.getUserData();\n\n        _this2.focusListener = _this2.props.navigation.addListener('focus', function () {\n          _this2.getUserData();\n\n          _this2.getProfileImage();\n        });\n      });\n    }\n  }, {\n    key: \"getProfileImage\",\n    value: function getProfileImage() {\n      var _this3 = this;\n\n      fetch('http://localhost:3333/api/1.0.0/user/' + this.state.login_info.id, {\n        method: 'GET',\n        headers: {\n          'X-Authorization': this.state.login_info.token\n        }\n      }).then(function (response) {\n        return response.blob();\n      }).then(function (responseBlob) {\n        var data = URL.createObjectURL(responseBlob);\n\n        _this3.setState({\n          img: data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"getUserData\",\n    value: function getUserData() {\n      var response, result;\n      return _regeneratorRuntime.async(function getUserData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3333/api/1.0.0/user/' + this.state.login_info.id, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': this.state.login_info.token\n                }\n              }));\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              result = _context2.sent;\n              this.setState({\n                userData: result\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(nav) {\n      fetch('http://localhost:3333/api/1.0.0/logout', {\n        method: 'post',\n        headers: {\n          'X-Authorization': this.state.login_info.token\n        },\n        body: {}\n      }).then(function (response) {\n        console.log(response.status);\n\n        if (response.status == 200) {\n          displayAlert.displayAlert('Logged out.');\n          nav.navigate('Login');\n        } else if (response.status == 401 || response.status == 500) {\n          displayAlert.displayAlert(response.statusText);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(nav) {\n      var _this4 = this;\n\n      nav.navigate('Settings', {\n        onGoBack: function onGoBack() {\n          return _this4.componentDidMount();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var nav = this.props.navigation;\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: \"Profile\"\n        }), _jsxs(Text, {\n          children: [\"Login id: \", this.state.login_info.id]\n        }), _jsxs(Text, {\n          children: [\"Login token: \", this.state.login_info.token]\n        }), _jsxs(View, {\n          children: [_jsx(Text, {\n            children: this.state.userData.first_name\n          }), _jsx(Text, {\n            children: this.state.userData.last_name\n          }), _jsx(Text, {\n            children: this.state.userData.email\n          }), _jsx(Text, {\n            children: this.state.userData.friend_count\n          })]\n        }), _jsxs(View, {\n          children: [_jsx(Button, {\n            title: \"Friends\",\n            onPress: function onPress() {\n              return _this5.friends();\n            }\n          }), _jsx(Button, {\n            title: \"Account Settings\",\n            onPress: function onPress() {\n              return _this5.settings(nav);\n            }\n          })]\n        }), _jsx(Button, {\n          title: \"Logout\",\n          onPress: function onPress() {\n            return _this5.logout(nav);\n          }\n        })]\n      });\n    }\n  }]);\n\n  return ProfileScreen;\n}(Component);\n\nexport default ProfileScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/ProfileScreen.js"],"names":["React","Component","useEffect","useState","AsyncStorage","DisplayAlert","NavigationContainer","displayAlert","getData","done","getItem","jsonValue","data","JSON","parse","console","log","ProfileScreen","props","state","login_info","userData","img","setState","getUserData","focusListener","navigation","addListener","getProfileImage","fetch","id","method","headers","token","then","response","blob","responseBlob","URL","createObjectURL","catch","error","json","result","nav","body","status","navigate","statusText","onGoBack","componentDidMount","first_name","last_name","email","friend_count","friends","settings","logout"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { Button, FlatList, Text, View } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nconst getData = async (done) => {\r\n    try {\r\n        const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n        const data = JSON.parse(jsonValue);\r\n        return done(data);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\n\r\nclass ProfileScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login_info: {},\r\n            userData: {},\r\n            img: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        getData((data) => {\r\n            this.setState({\r\n                login_info: data,\r\n            });\r\n            this.getUserData();\r\n            this.focusListener = this.props.navigation.addListener('focus', () => {\r\n                this.getUserData();\r\n                this.getProfileImage();\r\n            });\r\n        });\r\n    }\r\n\r\n    getProfileImage() {\r\n        fetch('http://localhost:3333/api/1.0.0/user/' + this.state.login_info.id, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': this.state.login_info.token\r\n            }\r\n        })\r\n        .then((response) => response.blob())\r\n        .then((responseBlob) => {\r\n            let data = URL.createObjectURL(responseBlob);\r\n            this.setState({\r\n                img: data\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    async getUserData() {\r\n        let response = await fetch(\r\n            'http://localhost:3333/api/1.0.0/user/' + this.state.login_info.id,\r\n            {\r\n                method: 'get',\r\n                headers: {\r\n                    'X-Authorization': this.state.login_info.token,\r\n                },\r\n            }\r\n        );\r\n        let result = await response.json();\r\n        this.setState({\r\n            userData: result,\r\n        });\r\n    }\r\n\r\n    logout(nav) {\r\n        fetch('http://localhost:3333/api/1.0.0/logout', {\r\n            method: 'post',\r\n            headers: {\r\n                'X-Authorization': this.state.login_info.token,\r\n            },\r\n            body: {},\r\n        })\r\n            .then((response) => {\r\n                console.log(response.status);\r\n                if (response.status == 200) {\r\n                    displayAlert.displayAlert('Logged out.');\r\n                    nav.navigate('Login');\r\n                } else if (response.status == 401 || response.status == 500) {\r\n                    displayAlert.displayAlert(response.statusText);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    settings(nav){\r\n        nav.navigate('Settings', {onGoBack: () => this.componentDidMount()});\r\n    }\r\n\r\n    render() {\r\n        const nav = this.props.navigation;\r\n        return (\r\n            <View>\r\n                <Text>Profile</Text>\r\n                <Text>Login id: {this.state.login_info.id}</Text>\r\n                <Text>Login token: {this.state.login_info.token}</Text>\r\n                <View>\r\n                    <Text>{this.state.userData.first_name}</Text>\r\n                    <Text>{this.state.userData.last_name}</Text>\r\n                    <Text>{this.state.userData.email}</Text>\r\n                    <Text>{this.state.userData.friend_count}</Text>\r\n                </View>\r\n                <View>\r\n                    <Button title=\"Friends\" onPress={() => this.friends()} />\r\n                    <Button title=\"Account Settings\" onPress={() => this.settings(nav)} />\r\n                </View>\r\n                <Button title=\"Logout\" onPress={() => this.logout(nav)} />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileScreen;\r\n"]},"metadata":{},"sourceType":"module"}