{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport PropTypes from 'prop-types';\nimport Storage from \"./Storage\";\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar FriendsScreen = function (_Component) {\n  _inherits(FriendsScreen, _Component);\n\n  var _super = _createSuper(FriendsScreen);\n\n  function FriendsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FriendsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      friends: {}\n    };\n    return _this;\n  }\n\n  _createClass(FriendsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getFriends();\n\n        navigation.addListener('focus', function () {\n          _this2.getFriends();\n        });\n      });\n    }\n  }, {\n    key: \"getFriends\",\n    value: function getFriends() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.json();\n      }).then(function (responseJson) {\n        _this3.setState({\n          friends: responseJson\n        });\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      var friends = this.state.friends;\n      return _jsxs(View, {\n        children: [_jsx(View, {\n          children: _jsx(FlatList, {\n            data: friends,\n            renderItem: function renderItem(_ref) {\n              var item = _ref.item;\n              return _jsxs(View, {\n                style: {\n                  borderWidth: 1,\n                  borderColor: 'gray'\n                },\n                children: [_jsx(Text, {\n                  children: item.user_id\n                }), _jsx(Text, {\n                  children: item.user_givenname\n                }), _jsx(Text, {\n                  children: item.user_familyname\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.user_id;\n            }\n          })\n        }), _jsxs(View, {\n          children: [_jsx(Button, {\n            title: \"Find friends\",\n            onPress: function onPress() {\n              return navigation.navigate('FindFriends');\n            }\n          }), _jsx(Button, {\n            title: \"Friend requests\",\n            onPress: function onPress() {\n              return navigation.navigate('FriendRequests');\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return FriendsScreen;\n}(Component);\n\nFriendsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FriendsScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/FriendsScreen.js"],"names":["React","Component","PropTypes","Storage","DisplayAlert","asyncStorage","displayAlert","FriendsScreen","props","state","data","friends","navigation","getData","setState","getFriends","addListener","fetch","id","method","headers","token","then","response","status","Promise","reject","Error","json","responseJson","catch","error","item","borderWidth","borderColor","user_id","user_givenname","user_familyname","navigate","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text, FlatList, Button } from 'react-native';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Storage from './Storage'\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FriendsScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            friends: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getFriends();\r\n            navigation.addListener('focus', () => {\r\n                this.getFriends();\r\n            });\r\n        });\r\n    }\r\n\r\n    getFriends(){\r\n        const { data } = this.state; \r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            return response.json()\r\n        })\r\n        .then((responseJson) => {\r\n            this.setState({\r\n                friends: responseJson\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { friends } = this.state;\r\n        return (\r\n            <View>\r\n                <View>\r\n                    <FlatList\r\n                        data={friends}\r\n                        renderItem={({item}) => (\r\n                            <View style={{borderWidth: 1, borderColor: 'gray'}}>\r\n                                <Text>{item.user_id}</Text>\r\n                                <Text>{item.user_givenname}</Text>\r\n                                <Text>{item.user_familyname}</Text>\r\n                            </View>\r\n                        )}\r\n                        keyExtractor={(item) => item.user_id}\r\n                    />\r\n                </View>\r\n                <View>  \r\n                    <Button title='Find friends' onPress={() => navigation.navigate('FindFriends')}/>   \r\n                    <Button title='Friend requests' onPress={() => navigation.navigate('FriendRequests')}/>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nFriendsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FriendsScreen;"]},"metadata":{},"sourceType":"module"}