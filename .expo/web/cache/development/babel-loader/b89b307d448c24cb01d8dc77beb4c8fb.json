{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nvar ariaToAccessibilityMap = {\n  'aria-activedescendant': 'accessibilityActiveDescendant',\n  'aria-atomic': 'accessibilityAtomic',\n  'aria-autocomplete': 'accessibilityAutoComplete',\n  'aria-busy': 'accessibilityBusy',\n  'aria-checked': 'accessibilityChecked',\n  'aria-colcount': 'accessibilityColumnCount',\n  'aria-colindex': 'accessibilityColumnIndex',\n  'aria-colspan': 'accessibilityColumnSpan',\n  'aria-controls': 'accessibilityControls',\n  'aria-describedby': 'accessibilityDescribedBy',\n  'aria-details': 'accessibilityDetails',\n  'aria-disabled': 'accessibilityDisabled',\n  'aria-errormessage': 'accessibilityErrorMessage',\n  'aria-expanded': 'accessibilityExpanded',\n  'aria-flowto': 'accessibilityFlowTo',\n  'aria-haspopup': 'accessibilityHasPopup',\n  'aria-hidden': 'accessibilityHidden',\n  'aria-invalid': 'accessibilityInvalid',\n  'aria-keyshortcuts': 'accessibilityKeyShortcuts',\n  'aria-label': 'accessibilityLabel',\n  'aria-labelledby': 'accessibilityLabelledBy',\n  'aria-live': 'accessibilityLiveRegion',\n  'aria-modal': 'accessibilityModal',\n  'aria-multiline': 'accessibilityMultiline',\n  'aria-multiselectable': 'accessibilityMultiSelectable',\n  'aria-orientation': 'accessibilityOrientation',\n  'aria-owns': 'accessibilityOwns',\n  'aria-placeholder': 'accessibilityPlaceholder',\n  'aria-posinset': 'accessibilityPosInSet',\n  'aria-pressed': 'accessibilityPressed',\n  'aria-readonly': 'accessibilityReadOnly',\n  'aria-required': 'accessibilityRequired',\n  'aria-roledescription': 'accessibilityRoleDescription',\n  'aria-rowcount': 'accessibilityRowCount',\n  'aria-rowindex': 'accessibilityRowIndex',\n  'aria-rowspan': 'accessibilityRowSpan',\n  'aria-selected': 'accessibilitySelected',\n  'aria-setsize': 'accessibilitySetSize',\n  'aria-sort': 'accessibilitySort',\n  'aria-valuemax': 'accessibilityValueMax',\n  'aria-valuemin': 'accessibilityValueMin',\n  'aria-valuenow': 'accessibilityValueNow',\n  'aria-valuetext': 'accessibilityValueText'\n};\nexport var mapDomPropsToRN = function mapDomPropsToRN(props) {\n  var newProps = _objectSpread({}, props);\n\n  if (props.tabIndex === '0' || props.tabIndex === 0) {\n    newProps.focusable = true;\n  }\n\n  if (props.role) {\n    newProps.accessibilityRole = props.role;\n  }\n\n  if (props.id) {\n    newProps.nativeID = props.id;\n  }\n\n  for (var key in props) {\n    if (key.indexOf('aria') > -1) {\n      if (ariaToAccessibilityMap[key]) {\n        newProps[ariaToAccessibilityMap[key]] = props[key];\n      } else {\n        console.warn('@react-native-aria/utils:: ', 'No equivalent mapping of ' + key + ' found in ariaToAccessibilityMap. Please raise a PR to support this attribute.');\n      }\n    } else if (key.indexOf('data-') > -1) {\n      if (!newProps.dataSet) {\n        newProps.dataSet = {};\n      }\n\n      newProps.dataSet[key.split('data-')[1]] = props[key];\n    }\n  }\n\n  return newProps;\n};\nexport var useMapDomPropsToRN = function useMapDomPropsToRN(props, ref) {\n  React.useEffect(function () {\n    if (ref.current) {\n      ref.current.tabIndex = props.tabIndex;\n    }\n  }, [props.tabIndex]);\n  return mapDomPropsToRN(props);\n};","map":{"version":3,"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,sBAAsB,GAAG;AAC7B,2BAAyB,+BADI;AAE7B,iBAAe,qBAFc;AAG7B,uBAAqB,2BAHQ;AAI7B,eAAa,mBAJgB;AAK7B,kBAAgB,sBALa;AAM7B,mBAAiB,0BANY;AAO7B,mBAAiB,0BAPY;AAQ7B,kBAAgB,yBARa;AAS7B,mBAAiB,uBATY;AAU7B,sBAAoB,0BAVS;AAW7B,kBAAgB,sBAXa;AAY7B,mBAAiB,uBAZY;AAa7B,uBAAqB,2BAbQ;AAc7B,mBAAiB,uBAdY;AAe7B,iBAAe,qBAfc;AAgB7B,mBAAiB,uBAhBY;AAiB7B,iBAAe,qBAjBc;AAkB7B,kBAAgB,sBAlBa;AAmB7B,uBAAqB,2BAnBQ;AAoB7B,gBAAc,oBApBe;AAqB7B,qBAAmB,yBArBU;AAsB7B,eAAa,yBAtBgB;AAuB7B,gBAAc,oBAvBe;AAwB7B,oBAAkB,wBAxBW;AAyB7B,0BAAwB,8BAzBK;AA0B7B,sBAAoB,0BA1BS;AA2B7B,eAAa,mBA3BgB;AA4B7B,sBAAoB,0BA5BS;AA6B7B,mBAAiB,uBA7BY;AA8B7B,kBAAgB,sBA9Ba;AA+B7B,mBAAiB,uBA/BY;AAgC7B,mBAAiB,uBAhCY;AAiC7B,0BAAwB,8BAjCK;AAkC7B,mBAAiB,uBAlCY;AAmC7B,mBAAiB,uBAnCY;AAoC7B,kBAAgB,sBApCa;AAqC7B,mBAAiB,uBArCY;AAsC7B,kBAAgB,sBAtCa;AAuC7B,eAAa,mBAvCgB;AAwC7B,mBAAiB,uBAxCY;AAyC7B,mBAAiB,uBAzCY;AA0C7B,mBAAiB,uBA1CY;AA2C7B,oBAAkB;AA3CW,CAA/B;AA8CA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,MAAK,EAAI;AACtC,MAAIC,QAAQ,qBAAQC,KAAR,CAAZ;;AAGA,MAAIA,KAAK,CAACC,QAAN,KAAmB,GAAnB,IAA0BD,KAAK,CAACC,QAAN,KAAmB,CAAjD,EAAoD;AAClDF,YAAQ,CAACG,SAAT,GAAqB,IAArB;AACD;;AAOD,MAAIF,KAAK,CAACG,IAAV,EAAgB;AACdJ,YAAQ,CAACK,iBAAT,GAA6BJ,KAAK,CAACG,IAAnC;AACD;;AAED,MAAIH,KAAK,CAACK,EAAV,EAAc;AACZN,YAAQ,CAACO,QAAT,GAAoBN,KAAK,CAACK,EAA1B;AACD;;AAED,OAAK,IAAIE,GAAT,IAAgBP,KAAhB,EAAuB;AAErB,QAAIO,GAAG,CAACC,OAAJ,CAAY,MAAZ,IAAsB,CAAC,CAA3B,EAA8B;AAC5B,UAAIX,sBAAsB,CAACU,GAAD,CAA1B,EAAiC;AAC/BR,gBAAQ,CAACF,sBAAsB,CAACU,GAAD,CAAvB,CAAR,GAAwCP,KAAK,CAACO,GAAD,CAA7C;AACD,OAFD,MAEO;AACLE,eAAO,CAACC,IAAR,CAAa,6BAAb,EAA4C,8BAA8BH,GAA9B,GAAoC,gFAAhF;AACD;AACF,KAND,MAMO,IAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,IAAuB,CAAC,CAA5B,EAA+B;AACpC,UAAI,CAACT,QAAQ,CAACY,OAAd,EAAuB;AACrBZ,gBAAQ,CAACY,OAAT,GAAmB,EAAnB;AACD;;AAEDZ,cAAQ,CAACY,OAAT,CAAiBJ,GAAG,CAACK,KAAJ,CAAU,OAAV,EAAmB,CAAnB,CAAjB,IAA0CZ,KAAK,CAACO,GAAD,CAA/C;AACD;AACF;;AAED,SAAOR,QAAP;AACD,CAvCM;AA2CP,OAAO,IAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,CAACb,KAAD,EAAQc,GAAR,EAAgB;AAChDlB,OAAK,CAACmB,SAAN,CAAgB,YAAM;AACpB,QAAID,GAAG,CAACE,OAAR,EAAiB;AACfF,SAAG,CAACE,OAAJ,CAAYf,QAAZ,GAAuBD,KAAK,CAACC,QAA7B;AACD;AACF,GAJD,EAIG,CAACD,KAAK,CAACC,QAAP,CAJH;AAKA,SAAOH,eAAe,CAACE,KAAD,CAAtB;AACD,CAPM","names":["React","ariaToAccessibilityMap","mapDomPropsToRN","newProps","props","tabIndex","focusable","role","accessibilityRole","id","nativeID","key","indexOf","console","warn","dataSet","split","useMapDomPropsToRN","ref","useEffect","current"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-native-aria/utils/lib/module/ariaToAccessibilityMap.js"],"sourcesContent":["import React from 'react';\nconst ariaToAccessibilityMap = {\n  'aria-activedescendant': 'accessibilityActiveDescendant',\n  'aria-atomic': 'accessibilityAtomic',\n  'aria-autocomplete': 'accessibilityAutoComplete',\n  'aria-busy': 'accessibilityBusy',\n  'aria-checked': 'accessibilityChecked',\n  'aria-colcount': 'accessibilityColumnCount',\n  'aria-colindex': 'accessibilityColumnIndex',\n  'aria-colspan': 'accessibilityColumnSpan',\n  'aria-controls': 'accessibilityControls',\n  'aria-describedby': 'accessibilityDescribedBy',\n  'aria-details': 'accessibilityDetails',\n  'aria-disabled': 'accessibilityDisabled',\n  'aria-errormessage': 'accessibilityErrorMessage',\n  'aria-expanded': 'accessibilityExpanded',\n  'aria-flowto': 'accessibilityFlowTo',\n  'aria-haspopup': 'accessibilityHasPopup',\n  'aria-hidden': 'accessibilityHidden',\n  'aria-invalid': 'accessibilityInvalid',\n  'aria-keyshortcuts': 'accessibilityKeyShortcuts',\n  'aria-label': 'accessibilityLabel',\n  'aria-labelledby': 'accessibilityLabelledBy',\n  'aria-live': 'accessibilityLiveRegion',\n  'aria-modal': 'accessibilityModal',\n  'aria-multiline': 'accessibilityMultiline',\n  'aria-multiselectable': 'accessibilityMultiSelectable',\n  'aria-orientation': 'accessibilityOrientation',\n  'aria-owns': 'accessibilityOwns',\n  'aria-placeholder': 'accessibilityPlaceholder',\n  'aria-posinset': 'accessibilityPosInSet',\n  'aria-pressed': 'accessibilityPressed',\n  'aria-readonly': 'accessibilityReadOnly',\n  'aria-required': 'accessibilityRequired',\n  'aria-roledescription': 'accessibilityRoleDescription',\n  'aria-rowcount': 'accessibilityRowCount',\n  'aria-rowindex': 'accessibilityRowIndex',\n  'aria-rowspan': 'accessibilityRowSpan',\n  'aria-selected': 'accessibilitySelected',\n  'aria-setsize': 'accessibilitySetSize',\n  'aria-sort': 'accessibilitySort',\n  'aria-valuemax': 'accessibilityValueMax',\n  'aria-valuemin': 'accessibilityValueMin',\n  'aria-valuenow': 'accessibilityValueNow',\n  'aria-valuetext': 'accessibilityValueText'\n}; // Refer - https://necolas.github.io/react-native-web/docs/accessibility/\n\nexport const mapDomPropsToRN = props => {\n  let newProps = { ...props\n  };\n\n  if (props.tabIndex === '0' || props.tabIndex === 0) {\n    newProps.focusable = true;\n  } // use the below hook for tabIndex\n  // useMapDomPropsToRN\n  // if (props.tabIndex === '-1' || props.tabIndex === -1) {\n  //   newProps.focusable = false;\n  // }\n\n\n  if (props.role) {\n    newProps.accessibilityRole = props.role;\n  }\n\n  if (props.id) {\n    newProps.nativeID = props.id;\n  }\n\n  for (let key in props) {\n    // Map aria to RN web accessibility equivalents\n    if (key.indexOf('aria') > -1) {\n      if (ariaToAccessibilityMap[key]) {\n        newProps[ariaToAccessibilityMap[key]] = props[key];\n      } else {\n        console.warn('@react-native-aria/utils:: ', 'No equivalent mapping of ' + key + ' found in ariaToAccessibilityMap. Please raise a PR to support this attribute.');\n      }\n    } else if (key.indexOf('data-') > -1) {\n      if (!newProps.dataSet) {\n        newProps.dataSet = {};\n      }\n\n      newProps.dataSet[key.split('data-')[1]] = props[key];\n    }\n  }\n\n  return newProps;\n}; // RN web currently doesn't allow setting tabIndex via props, so need to be set using setNativeProps or ref\n// https://github.com/necolas/react-native-web/issues/1916\n// https://github.com/necolas/react-native-web/issues/1099\n\nexport const useMapDomPropsToRN = (props, ref) => {\n  React.useEffect(() => {\n    if (ref.current) {\n      ref.current.tabIndex = props.tabIndex;\n    }\n  }, [props.tabIndex]);\n  return mapDomPropsToRN(props);\n};\n//# sourceMappingURL=ariaToAccessibilityMap.js.map"]},"metadata":{},"sourceType":"module"}