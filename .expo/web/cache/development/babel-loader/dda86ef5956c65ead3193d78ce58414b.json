{"ast":null,"code":"import compareVersions from 'compare-versions';\nimport { CodedError } from \"./errors/CodedError\";\nvar postedWarnings = {};\nexport default function deprecate(library, deprecatedAPI) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var currentVersion = options.currentVersion,\n      versionToRemove = options.versionToRemove,\n      replacement = options.replacement;\n  var code = codeFromLibrary(library);\n  var key = code + \":\" + deprecatedAPI + \":\" + replacement;\n\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (!currentVersion || !versionToRemove || compareVersions(currentVersion, versionToRemove) >= 0) {\n    var _message = \"`\" + deprecatedAPI + \"` has been removed\";\n\n    if (versionToRemove) {\n      _message = _message + \" as of version \\\"\" + versionToRemove + \"\\\"\";\n    }\n\n    if (replacement && replacement.length) {\n      _message = _message + \" please migrate to: `\" + replacement + \"`\";\n    }\n\n    throw new CodedError(\"ERR_DEPRECATED_API\", prependLibrary(library, _message));\n  }\n\n  var message = \"`\" + deprecatedAPI + \"` has been deprecated\";\n\n  if (replacement && replacement.length) {\n    message = message + \" in favor of `\" + replacement + \"`\";\n  }\n\n  if (versionToRemove && versionToRemove.length) {\n    message = message + \" and will be removed in version \\\"\" + versionToRemove + \"\\\"\";\n  }\n\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library, message) {\n  return library + \": \" + message;\n}\n\nfunction codeFromLibrary(library) {\n  var code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,eAAP,MAA4B,kBAA5B;AACA,SAASC,UAAT;AACA,IAAMC,cAAc,GAAG,EAAvB;AAIA,eAAe,SAASC,SAAT,CAAmBC,OAAnB,EAA4BC,aAA5B,EAAyD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACpE,MAAQC,cAAR,GAAyDD,OAAzD,CAAQC,cAAR;AAAA,MAAwBC,eAAxB,GAAyDF,OAAzD,CAAwBE,eAAxB;AAAA,MAAyCC,WAAzC,GAAyDH,OAAzD,CAAyCG,WAAzC;AACA,MAAMC,IAAI,GAAGC,eAAe,CAACP,OAAD,CAA5B;AACA,MAAMQ,GAAG,GAAMF,IAAN,SAAcL,aAAd,SAA+BI,WAAxC;;AACA,MAAI,CAACP,cAAc,CAACU,GAAD,CAAnB,EAA0B;AACtBV,kBAAc,CAACU,GAAD,CAAd,GAAsB,IAAtB;AACH;;AACD,MAAI,CAACL,cAAD,IACA,CAACC,eADD,IAEAR,eAAe,CAACO,cAAD,EAAiBC,eAAjB,CAAf,IAAoD,CAFxD,EAE2D;AACvD,QAAIK,QAAO,SAAQR,aAAR,uBAAX;;AACA,QAAIG,eAAJ,EAAqB;AACjBK,cAAO,GAAMA,QAAN,yBAAgCL,eAAhC,OAAP;AACH;;AACD,QAAIC,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;AACnCD,cAAO,GAAMA,QAAN,6BAAsCJ,WAAtC,MAAP;AACH;;AACD,UAAM,IAAIR,UAAJ,uBAAqCc,cAAc,CAACX,OAAD,EAAUS,QAAV,CAAnD,CAAN;AACH;;AACD,MAAIA,OAAO,SAAQR,aAAR,0BAAX;;AACA,MAAII,WAAW,IAAIA,WAAW,CAACK,MAA/B,EAAuC;AACnCD,WAAO,GAAMA,OAAN,sBAA+BJ,WAA/B,MAAP;AACH;;AACD,MAAID,eAAe,IAAIA,eAAe,CAACM,MAAvC,EAA+C;AAC3CD,WAAO,GAAMA,OAAN,0CAAiDL,eAAjD,OAAP;AACH;;AACDQ,SAAO,CAACC,IAAR,CAAaF,cAAc,CAACX,OAAD,EAAUS,OAAV,CAA3B;AACH;;AACD,SAASE,cAAT,CAAwBX,OAAxB,EAAiCS,OAAjC,EAA0C;AACtC,SAAUT,OAAV,UAAsBS,OAAtB;AACH;;AAMD,SAASF,eAAT,CAAyBP,OAAzB,EAAkC;AAC9B,MAAMM,IAAI,GAAGN,OAAO,CAACc,OAAR,CAAgB,OAAhB,EAAyB,GAAzB,EAA8BC,WAA9B,EAAb;AACA,SAAOT,IAAP;AACH","names":["compareVersions","CodedError","postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","prependLibrary","console","warn","replace","toUpperCase"],"sourceRoot":"","sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/expo-modules-core/build/deprecate.js"],"sourcesContent":["import compareVersions from 'compare-versions';\nimport { CodedError } from './errors/CodedError';\nconst postedWarnings = {};\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(library, deprecatedAPI, options = {}) {\n    const { currentVersion, versionToRemove, replacement } = options;\n    const code = codeFromLibrary(library);\n    const key = `${code}:${deprecatedAPI}:${replacement}`;\n    if (!postedWarnings[key]) {\n        postedWarnings[key] = true;\n    }\n    if (!currentVersion ||\n        !versionToRemove ||\n        compareVersions(currentVersion, versionToRemove) >= 0) {\n        let message = `\\`${deprecatedAPI}\\` has been removed`;\n        if (versionToRemove) {\n            message = `${message} as of version \"${versionToRemove}\"`;\n        }\n        if (replacement && replacement.length) {\n            message = `${message} please migrate to: \\`${replacement}\\``;\n        }\n        throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n    }\n    let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n    if (replacement && replacement.length) {\n        message = `${message} in favor of \\`${replacement}\\``;\n    }\n    if (versionToRemove && versionToRemove.length) {\n        message = `${message} and will be removed in version \"${versionToRemove}\"`;\n    }\n    console.warn(prependLibrary(library, message));\n}\nfunction prependLibrary(library, message) {\n    return `${library}: ${message}`;\n}\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library) {\n    const code = library.replace(/[-.]/g, '_').toUpperCase();\n    return code;\n}\n//# sourceMappingURL=deprecate.js.map"]},"metadata":{},"sourceType":"module"}