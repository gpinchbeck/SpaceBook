{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport LinkingContext from \"./LinkingContext\";\nimport useLinkTo from \"./useLinkTo\";\n\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n\nexport default function useLinkProps(_ref) {\n  var _options$getPathFromS;\n\n  var to = _ref.to,\n      action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n\n  var _React$useContext = React.useContext(LinkingContext),\n      options = _React$useContext.options;\n\n  var linkTo = useLinkTo();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  var getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,EAA2BC,6BAA3B,EAA0DC,wBAA1D,QAA0F,wBAA1F;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,OAAOC,cAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAM,EAAI;AACnC,MAAIC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACC,KAAnD,EAA0D;AACxD,WAAOD,MAAM,CAACC,KAAd;AACD;;AAED,MAAID,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACE,MAAnD,EAA2D;AACzD,WAAO;AACLC,YAAM,EAAE,CAAC;AACPC,YAAI,EAAEJ,MAAM,CAACE,MADN;AAEPF,cAAM,EAAEA,MAAM,CAACA,MAFR;AAIPC,aAAK,EAAED,MAAM,CAACE,MAAP,GAAgBH,kBAAkB,CAACC,MAAM,CAACA,MAAR,CAAlC,GAAoDK;AAJpD,OAAD;AADH,KAAP;AAQD;;AAED,SAAOA,SAAP;AACD,CAjBD;;AA0BA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACzC,MAAIC,qBAAJ;;AAEA,MACEC,EADF,GAGIF,IAHJ,CACEE,EADF;AAAA,MAEEC,MAFF,GAGIH,IAHJ,CAEEG,MAFF;AAIA,MAAMC,IAAI,GAAGf,KAAK,CAACgB,UAAN,CAAiBlB,6BAAjB,CAAb;AACA,MAAMmB,UAAU,GAAGjB,KAAK,CAACgB,UAAN,CAAiBjB,wBAAjB,CAAnB;;AACA,0BAEIC,KAAK,CAACgB,UAAN,CAAiBf,cAAjB,CAFJ;AAAA,MACEiB,OADF,qBACEA,OADF;;AAGA,MAAMC,MAAM,GAAGjB,SAAS,EAAxB;;AAEA,MAAMkB,OAAO,GAAG,SAAVA,OAAU,EAAC,EAAI;AACnB,QAAIC,gBAAJ;;AAEA,QAAIC,YAAY,GAAG,KAAnB;;AAEA,QAAIC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,CAACC,CAA9B,EAAiC;AAC/BH,kBAAY,GAAGG,CAAC,GAAG,CAACA,CAAC,CAACC,gBAAN,GAAyB,IAAzC;AACD,KAFD,MAEO,IAAI,CAACD,CAAC,CAACC,gBAAH,IAEX,EAAED,CAAC,CAACE,OAAF,IAAaF,CAAC,CAACG,MAAf,IAAyBH,CAAC,CAACI,OAA3B,IAAsCJ,CAAC,CAACK,QAA1C,CAFW,KAIXL,CAAC,CAACM,MAAF,IAAY,IAAZ,IAAoBN,CAAC,CAACM,MAAF,KAAa,CAJtB,KAMX,CAACtB,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BuB,QAA9B,CAAuC,CAACX,gBAAgB,GAAGI,CAAC,CAACQ,aAAtB,MAAyC,IAAzC,IAAiDZ,gBAAgB,KAAK,KAAK,CAA3E,GAA+E,KAAK,CAApF,GAAwFA,gBAAgB,CAACa,MAAhJ,CANO,EAOL;AACAT,OAAC,CAACU,cAAF;AACAb,kBAAY,GAAG,IAAf;AACD;;AAED,QAAIA,YAAJ,EAAkB;AAChB,UAAIR,MAAJ,EAAY;AACV,YAAIG,UAAJ,EAAgB;AACdA,oBAAU,CAACmB,QAAX,CAAoBtB,MAApB;AACD,SAFD,MAEO,IAAIC,IAAJ,EAAU;AACfA,cAAI,CAACqB,QAAL,CAActB,MAAd;AACD,SAFM,MAEA;AACL,gBAAM,IAAIuB,KAAJ,CAAU,kFAAV,CAAN;AACD;AACF,OARD,MAQO;AACLlB,cAAM,CAACN,EAAD,CAAN;AACD;AACF;AACF,GAhCD;;AAkCA,MAAMyB,sBAAsB,GAAG,CAAC1B,qBAAqB,GAAGM,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACrB,gBAAnF,MAAyG,IAAzG,IAAiHe,qBAAqB,KAAK,KAAK,CAAhJ,GAAoJA,qBAApJ,GAA4Kf,gBAA3M;AACA,MAAM0C,IAAI,GAAG,OAAO1B,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8ByB,sBAAsB,CAAC;AAChE/B,UAAM,EAAE,CAAC;AACPC,UAAI,EAAEK,EAAE,CAACP,MADF;AAGPF,YAAM,EAAES,EAAE,CAACT,MAHJ;AAKPC,WAAK,EAAEF,kBAAkB,CAACU,EAAE,CAACT,MAAJ;AALlB,KAAD;AADwD,GAAD,EAQ9Dc,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACsB,MARI,CAAjE;AASA,SAAO;AACLD,QAAI,EAAJA,IADK;AAELE,qBAAiB,EAAE,MAFd;AAGLrB,WAAO,EAAPA;AAHK,GAAP;AAKD","names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_options$getPathFromS","to","action","root","useContext","navigation","options","linkTo","onPress","_e$currentTarget","shouldHandle","Platform","OS","e","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/native/lib/module/useLinkProps.js"],"sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\n\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\n\nexport default function useLinkProps(_ref) {\n  var _options$getPathFromS;\n\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n\n  const onPress = e => {\n    var _e$currentTarget;\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) && // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"module"}