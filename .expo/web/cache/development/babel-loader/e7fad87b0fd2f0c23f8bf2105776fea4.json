{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from \"./WebCameraUtils\";\n\nvar qrWorkerMethod = function qrWorkerMethod(_ref) {\n  var _parsed;\n\n  var data = _ref.data,\n      width = _ref.width,\n      height = _ref.height;\n  var decoded = self.jsQR(data, width, height, {\n    inversionAttempts: 'dontInvert'\n  });\n  var parsed;\n\n  try {\n    parsed = JSON.parse(decoded);\n  } catch (err) {\n    parsed = decoded;\n  }\n\n  if ((_parsed = parsed) != null && _parsed.data) {\n    var nativeEvent = {\n      type: 'qr',\n      data: parsed.data\n    };\n\n    if (parsed.location) {\n      nativeEvent.cornerPoints = [parsed.location.topLeftCorner, parsed.location.bottomLeftCorner, parsed.location.topRightCorner, parsed.location.bottomRightCorner];\n    }\n\n    return nativeEvent;\n  }\n\n  return parsed;\n};\n\nfunction useRemoteJsQR() {\n  return useWorker(qrWorkerMethod, {\n    remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n    timeout: 5000\n  });\n}\n\nexport function useWebQRScanner(video, _ref2) {\n  var isEnabled = _ref2.isEnabled,\n      captureOptions = _ref2.captureOptions,\n      interval = _ref2.interval,\n      onScanned = _ref2.onScanned,\n      onError = _ref2.onError;\n  var isRunning = React.useRef(false);\n  var timeout = React.useRef(undefined);\n\n  var _useRemoteJsQR = useRemoteJsQR(),\n      _useRemoteJsQR2 = _slicedToArray(_useRemoteJsQR, 2),\n      decode = _useRemoteJsQR2[0],\n      clearWorker = _useRemoteJsQR2[1];\n\n  function scanAsync() {\n    var data, nativeEvent, intervalToUse;\n    return _regeneratorRuntime.async(function scanAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!isRunning.current || !onScanned)) {\n              _context.next = 3;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            data = captureImageData(video.current, captureOptions);\n\n            if (!data) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(decode(data));\n\n          case 8:\n            nativeEvent = _context.sent;\n\n            if (nativeEvent != null && nativeEvent.data) {\n              onScanned({\n                nativeEvent: nativeEvent\n              });\n            }\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (onError) {\n              onError({\n                nativeEvent: _context.t0\n              });\n            }\n\n          case 15:\n            _context.prev = 15;\n\n            if (!(interval === 0)) {\n              _context.next = 19;\n              break;\n            }\n\n            stop();\n            return _context.abrupt(\"return\");\n\n          case 19:\n            intervalToUse = !interval || interval < 0 ? 16 : interval;\n            timeout.current = setTimeout(function () {\n              scanAsync();\n            }, intervalToUse);\n            return _context.finish(15);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 12, 15, 22]], Promise);\n  }\n\n  function stop() {\n    isRunning.current = false;\n    clearTimeout(timeout.current);\n  }\n\n  React.useEffect(function () {\n    if (isEnabled) {\n      isRunning.current = true;\n      scanAsync();\n    } else {\n      stop();\n    }\n  }, [isEnabled]);\n  React.useEffect(function () {\n    return function () {\n      stop();\n      clearWorker.kill();\n    };\n  }, []);\n}","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAA6B;AAAA;;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAEhD,MAAMC,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUL,IAAV,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;AAC3CI,qBAAiB,EAAE;AADwB,GAA/B,CAAhB;AAGA,MAAIC,MAAJ;;AACA,MAAI;AACAA,UAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAT;AACH,GAFD,CAGA,OAAOO,GAAP,EAAY;AACRH,UAAM,GAAGJ,OAAT;AACH;;AACD,iBAAII,MAAJ,aAAI,QAAQP,IAAZ,EAAkB;AACd,QAAMW,WAAW,GAAG;AAChBC,UAAI,EAAE,IADU;AAEhBZ,UAAI,EAAEO,MAAM,CAACP;AAFG,KAApB;;AAIA,QAAIO,MAAM,CAACM,QAAX,EAAqB;AACjBF,iBAAW,CAACG,YAAZ,GAA2B,CACvBP,MAAM,CAACM,QAAP,CAAgBE,aADO,EAEvBR,MAAM,CAACM,QAAP,CAAgBG,gBAFO,EAGvBT,MAAM,CAACM,QAAP,CAAgBI,cAHO,EAIvBV,MAAM,CAACM,QAAP,CAAgBK,iBAJO,CAA3B;AAMH;;AACD,WAAOP,WAAP;AACH;;AACD,SAAOJ,MAAP;AACH,CA5BD;;AA6BA,SAASY,aAAT,GAAyB;AACrB,SAAOvB,SAAS,CAACG,cAAD,EAAiB;AAC7BqB,sBAAkB,EAAE,CAAC,0DAAD,CADS;AAE7BC,WAAO,EAAE;AAFoB,GAAjB,CAAhB;AAIH;;AACD,OAAO,SAASC,eAAT,CAAyBC,KAAzB,SAA8F;AAAA,MAA5DC,SAA4D,SAA5DA,SAA4D;AAAA,MAAjDC,cAAiD,SAAjDA,cAAiD;AAAA,MAAjCC,QAAiC,SAAjCA,QAAiC;AAAA,MAAvBC,SAAuB,SAAvBA,SAAuB;AAAA,MAAZC,OAAY,SAAZA,OAAY;AACjG,MAAMC,SAAS,GAAGhC,KAAK,CAACiC,MAAN,CAAa,KAAb,CAAlB;AACA,MAAMT,OAAO,GAAGxB,KAAK,CAACiC,MAAN,CAAaC,SAAb,CAAhB;;AACA,uBAA8BZ,aAAa,EAA3C;AAAA;AAAA,MAAOa,MAAP;AAAA,MAAeC,WAAf;;AACA,WAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEQ,CAACL,SAAS,CAACM,OAAX,IAAsB,CAACR,SAF/B;AAAA;AAAA;AAAA;;AAGQS,gBAAI;AAHZ;;AAAA;AAAA;AAOcpC,gBAPd,GAOqBF,gBAAgB,CAACyB,KAAK,CAACY,OAAP,EAAgBV,cAAhB,CAPrC;;AAAA,iBAQYzB,IARZ;AAAA;AAAA;AAAA;;AAAA;AAAA,6CASsCgC,MAAM,CAAChC,IAAD,CAT5C;;AAAA;AASkBW,uBATlB;;AAUY,gBAAIA,WAAJ,YAAIA,WAAW,CAAEX,IAAjB,EAAuB;AACnB2B,uBAAS,CAAC;AACNhB,2BAAW,EAAXA;AADM,eAAD,CAAT;AAGH;;AAdb;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkBQ,gBAAIiB,OAAJ,EAAa;AACTA,qBAAO,CAAC;AAAEjB,2BAAW;AAAb,eAAD,CAAP;AACH;;AApBT;AAAA;;AAAA,kBAwBYe,QAAQ,KAAK,CAxBzB;AAAA;AAAA;AAAA;;AAyBYU,gBAAI;AAzBhB;;AAAA;AA4BcC,yBA5Bd,GA4B8B,CAACX,QAAD,IAAaA,QAAQ,GAAG,CAAxB,GAA4B,EAA5B,GAAiCA,QA5B/D;AA8BQL,mBAAO,CAACc,OAAR,GAAkBG,UAAU,CAAC,YAAM;AAC/BJ,uBAAS;AACZ,aAF2B,EAEzBG,aAFyB,CAA5B;AA9BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmCA,WAASD,IAAT,GAAgB;AACZP,aAAS,CAACM,OAAV,GAAoB,KAApB;AACAI,gBAAY,CAAClB,OAAO,CAACc,OAAT,CAAZ;AACH;;AACDtC,OAAK,CAAC2C,SAAN,CAAgB,YAAM;AAClB,QAAIhB,SAAJ,EAAe;AACXK,eAAS,CAACM,OAAV,GAAoB,IAApB;AACAD,eAAS;AACZ,KAHD,MAIK;AACDE,UAAI;AACP;AACJ,GARD,EAQG,CAACZ,SAAD,CARH;AASA3B,OAAK,CAAC2C,SAAN,CAAgB,YAAM;AAClB,WAAO,YAAM;AACTJ,UAAI;AACJH,iBAAW,CAACQ,IAAZ;AACH,KAHD;AAIH,GALD,EAKG,EALH;AAMH","names":["useWorker","React","captureImageData","qrWorkerMethod","data","width","height","decoded","self","jsQR","inversionAttempts","parsed","JSON","parse","err","nativeEvent","type","location","cornerPoints","topLeftCorner","bottomLeftCorner","topRightCorner","bottomRightCorner","useRemoteJsQR","remoteDependencies","timeout","useWebQRScanner","video","isEnabled","captureOptions","interval","onScanned","onError","isRunning","useRef","undefined","decode","clearWorker","scanAsync","current","stop","intervalToUse","setTimeout","clearTimeout","useEffect","kill"],"sourceRoot":"","sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/expo-camera/build/useWebQRScanner.js"],"sourcesContent":["import { useWorker } from '@koale/useworker';\nimport * as React from 'react';\nimport { captureImageData } from './WebCameraUtils';\nconst qrWorkerMethod = ({ data, width, height }) => {\n    // eslint-disable-next-line no-undef\n    const decoded = self.jsQR(data, width, height, {\n        inversionAttempts: 'dontInvert',\n    });\n    let parsed;\n    try {\n        parsed = JSON.parse(decoded);\n    }\n    catch (err) {\n        parsed = decoded;\n    }\n    if (parsed?.data) {\n        const nativeEvent = {\n            type: 'qr',\n            data: parsed.data,\n        };\n        if (parsed.location) {\n            nativeEvent.cornerPoints = [\n                parsed.location.topLeftCorner,\n                parsed.location.bottomLeftCorner,\n                parsed.location.topRightCorner,\n                parsed.location.bottomRightCorner,\n            ];\n        }\n        return nativeEvent;\n    }\n    return parsed;\n};\nfunction useRemoteJsQR() {\n    return useWorker(qrWorkerMethod, {\n        remoteDependencies: ['https://cdn.jsdelivr.net/npm/jsqr@1.2.0/dist/jsQR.min.js'],\n        timeout: 5000,\n    });\n}\nexport function useWebQRScanner(video, { isEnabled, captureOptions, interval, onScanned, onError, }) {\n    const isRunning = React.useRef(false);\n    const timeout = React.useRef(undefined);\n    const [decode, clearWorker] = useRemoteJsQR();\n    async function scanAsync() {\n        // If interval is 0 then only scan once.\n        if (!isRunning.current || !onScanned) {\n            stop();\n            return;\n        }\n        try {\n            const data = captureImageData(video.current, captureOptions);\n            if (data) {\n                const nativeEvent = await decode(data);\n                if (nativeEvent?.data) {\n                    onScanned({\n                        nativeEvent,\n                    });\n                }\n            }\n        }\n        catch (error) {\n            if (onError) {\n                onError({ nativeEvent: error });\n            }\n        }\n        finally {\n            // If interval is 0 then only scan once.\n            if (interval === 0) {\n                stop();\n                return;\n            }\n            const intervalToUse = !interval || interval < 0 ? 16 : interval;\n            // @ts-ignore: Type 'Timeout' is not assignable to type 'number'\n            timeout.current = setTimeout(() => {\n                scanAsync();\n            }, intervalToUse);\n        }\n    }\n    function stop() {\n        isRunning.current = false;\n        clearTimeout(timeout.current);\n    }\n    React.useEffect(() => {\n        if (isEnabled) {\n            isRunning.current = true;\n            scanAsync();\n        }\n        else {\n            stop();\n        }\n    }, [isEnabled]);\n    React.useEffect(() => {\n        return () => {\n            stop();\n            clearWorker.kill();\n        };\n    }, []);\n}\n//# sourceMappingURL=useWebQRScanner.js.map"]},"metadata":{},"sourceType":"module"}