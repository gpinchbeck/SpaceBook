{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || route.name + \"-\" + nanoid(),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\" + nanoid(),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: initialRouteName + \"-\" + nanoid(),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            var _action$payload = action.payload,\n                name = _action$payload.name,\n                key = _action$payload.key,\n                params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : name + \"-\" + nanoid(),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: action.payload.name + \"-\" + nanoid(),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            var _index2 = -1;\n\n            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n\n              var _routes2 = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : action.payload.name + \"-\" + nanoid(),\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n\n            var _route = state.routes[_index2];\n\n            var _params;\n\n            if (action.payload.merge) {\n              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[_route.name]), _route.params), action.payload.params) : _route.params;\n            } else {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? _objectSpread(_objectSpread({}, _route), {}, {\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,UAAP;AACA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,SAD0B,mBAClBC,IADkB,EACZC,MADY,EACJ;AACpB,WAAO;AACLC,UAAI,EAAE,SADD;AAELC,aAAO,EAAE;AACPH,YAAI,EAAJA,IADO;AAEPC,cAAM,EAANA;AAFO;AAFJ,KAAP;AAOD,GATyB;AAW1BG,MAX0B,gBAWrBJ,IAXqB,EAWfC,MAXe,EAWP;AACjB,WAAO;AACLC,UAAI,EAAE,MADD;AAELC,aAAO,EAAE;AACPH,YAAI,EAAJA,IADO;AAEPC,cAAM,EAANA;AAFO;AAFJ,KAAP;AAOD,GAnByB;AAqB1BI,KArB0B,iBAqBX;AAAA,QAAXC,KAAW,uEAAH,CAAG;AACb,WAAO;AACLJ,UAAI,EAAE,KADD;AAELC,aAAO,EAAE;AACPG,aAAK,EAALA;AADO;AAFJ,KAAP;AAMD,GA5ByB;AA8B1BC,UA9B0B,sBA8Bf;AACT,WAAO;AACLL,UAAI,EAAE;AADD,KAAP;AAGD;AAlCyB,CAArB;AAqCP,eAAe,SAASM,WAAT,CAAqBC,OAArB,EAA8B;AAC3C,MAAMC,MAAM,mCAAQb,UAAR;AACVK,QAAI,EAAE,OADI;AAGVS,mBAHU,iCAMP;AAAA,UAFDC,UAEC,QAFDA,UAEC;AAAA,UADDC,cACC,QADDA,cACC;AACD,UAAMC,gBAAgB,GAAGL,OAAO,CAACK,gBAAR,KAA6BC,SAA7B,IAA0CH,UAAU,CAACI,QAAX,CAAoBP,OAAO,CAACK,gBAA5B,CAA1C,GAA0FL,OAAO,CAACK,gBAAlG,GAAqHF,UAAU,CAAC,CAAD,CAAxJ;AACA,aAAO;AACLK,aAAK,EAAE,KADF;AAELf,YAAI,EAAE,OAFD;AAGLgB,WAAG,aAAWtB,MAAM,EAHf;AAILuB,aAAK,EAAE,CAJF;AAKLP,kBAAU,EAAVA,UALK;AAMLQ,cAAM,EAAE,CAAC;AACPF,aAAG,EAAKJ,gBAAL,SAAyBlB,MAAM,EAD3B;AAEPI,cAAI,EAAEc,gBAFC;AAGPb,gBAAM,EAAEY,cAAc,CAACC,gBAAD;AAHf,SAAD;AANH,OAAP;AAYD,KApBS;AAsBVO,sBAtBU,8BAsBSC,YAtBT,SAyBP;AAAA,UAFDV,UAEC,SAFDA,UAEC;AAAA,UADDC,cACC,SADDA,cACC;AACD,UAAIU,KAAK,GAAGD,YAAZ;;AAEA,UAAIC,KAAK,CAACN,KAAN,KAAgB,KAApB,EAA2B;AACzB,eAAOM,KAAP;AACD;;AAED,UAAMH,MAAM,GAAGG,KAAK,CAACH,MAAN,CAAaI,MAAb,CAAoB,eAAK;AAAA,eAAIZ,UAAU,CAACI,QAAX,CAAoBS,KAAK,CAACzB,IAA1B,CAAJ;AAAA,OAAzB,EAA8D0B,GAA9D,CAAkE,eAAK;AAAA,+CAAUD,KAAV;AACpFP,aAAG,EAAEO,KAAK,CAACP,GAAN,IAAgBO,KAAK,CAACzB,IAAtB,SAA8BJ,MAAM,EAD2C;AAEpFK,gBAAM,EAAEY,cAAc,CAACY,KAAK,CAACzB,IAAP,CAAd,KAA+Be,SAA/B,mCAAgDF,cAAc,CAACY,KAAK,CAACzB,IAAP,CAA9D,GACHyB,KAAK,CAACxB,MADH,IAEJwB,KAAK,CAACxB;AAJ0E;AAAA,OAAvE,CAAf;;AAOA,UAAImB,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAMb,gBAAgB,GAAGL,OAAO,CAACK,gBAAR,KAA6BC,SAA7B,GAAyCN,OAAO,CAACK,gBAAjD,GAAoEF,UAAU,CAAC,CAAD,CAAvG;AACAQ,cAAM,CAAChB,IAAP,CAAY;AACVc,aAAG,EAAKJ,gBAAL,SAAyBlB,MAAM,EADxB;AAEVI,cAAI,EAAEc,gBAFI;AAGVb,gBAAM,EAAEY,cAAc,CAACC,gBAAD;AAHZ,SAAZ;AAKD;;AAED,aAAO;AACLG,aAAK,EAAE,KADF;AAELf,YAAI,EAAE,OAFD;AAGLgB,WAAG,aAAWtB,MAAM,EAHf;AAILuB,aAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB,CAJlB;AAKLf,kBAAU,EAAVA,UALK;AAMLQ,cAAM,EAANA;AANK,OAAP;AAQD,KAxDS;AA0DVQ,+BA1DU,uCA0DkBL,KA1DlB,SA8DP;AAAA,UAHDX,UAGC,SAHDA,UAGC;AAAA,UAFDC,cAEC,SAFDA,cAEC;AAAA,UADDgB,eACC,SADDA,eACC;AACD,UAAMT,MAAM,GAAGG,KAAK,CAACH,MAAN,CAAaI,MAAb,CAAoB,eAAK;AAAA,eAAIZ,UAAU,CAACI,QAAX,CAAoBS,KAAK,CAACzB,IAA1B,KAAmC,CAAC6B,eAAe,CAACb,QAAhB,CAAyBS,KAAK,CAACzB,IAA/B,CAAxC;AAAA,OAAzB,CAAf;;AAEA,UAAIoB,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAMb,gBAAgB,GAAGL,OAAO,CAACK,gBAAR,KAA6BC,SAA7B,IAA0CH,UAAU,CAACI,QAAX,CAAoBP,OAAO,CAACK,gBAA5B,CAA1C,GAA0FL,OAAO,CAACK,gBAAlG,GAAqHF,UAAU,CAAC,CAAD,CAAxJ;AACAQ,cAAM,CAAChB,IAAP,CAAY;AACVc,aAAG,EAAKJ,gBAAL,SAAyBlB,MAAM,EADxB;AAEVI,cAAI,EAAEc,gBAFI;AAGVb,gBAAM,EAAEY,cAAc,CAACC,gBAAD;AAHZ,SAAZ;AAKD;;AAED,6CAAYS,KAAZ;AACEX,kBAAU,EAAVA,UADF;AAEEQ,cAAM,EAANA,MAFF;AAGED,aAAK,EAAEW,IAAI,CAACC,GAAL,CAASR,KAAK,CAACJ,KAAf,EAAsBC,MAAM,CAACO,MAAP,GAAgB,CAAtC;AAHT;AAKD,KA/ES;AAiFVK,yBAjFU,iCAiFYT,KAjFZ,EAiFmBL,GAjFnB,EAiFwB;AAChC,UAAMC,KAAK,GAAGI,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAuB,WAAC;AAAA,eAAIC,CAAC,CAAChB,GAAF,KAAUA,GAAd;AAAA,OAAxB,CAAd;;AAEA,UAAIC,KAAK,KAAK,CAAC,CAAX,IAAgBA,KAAK,KAAKI,KAAK,CAACJ,KAApC,EAA2C;AACzC,eAAOI,KAAP;AACD;;AAED,6CAAYA,KAAZ;AACEJ,aAAK,EAALA,KADF;AAEEC,cAAM,EAAEG,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmB,CAAnB,EAAsBhB,KAAK,GAAG,CAA9B;AAFV;AAID,KA5FS;AA8FViB,qBA9FU,6BA8FQb,KA9FR,EA8Fec,MA9Ff,EA8FuB5B,OA9FvB,EA8FgC;AACxC,UACEI,cADF,GAEIJ,OAFJ,CACEI,cADF;;AAIA,cAAQwB,MAAM,CAACnC,IAAf;AACE,aAAK,SAAL;AACE;AACE,gBAAMiB,KAAK,GAAGkB,MAAM,CAACC,MAAP,KAAkBf,KAAK,CAACL,GAAxB,IAA+BmB,MAAM,CAACE,MAAtC,GAA+ChB,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAuB,WAAC;AAAA,qBAAIC,CAAC,CAAChB,GAAF,KAAUmB,MAAM,CAACE,MAArB;AAAA,aAAxB,CAA/C,GAAsGhB,KAAK,CAACJ,KAA1H;;AAEA,gBAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,qBAAO,IAAP;AACD;;AAED,kCAIIkB,MAAM,CAAClC,OAJX;AAAA,gBACEH,IADF,mBACEA,IADF;AAAA,gBAEEkB,GAFF,mBAEEA,GAFF;AAAA,gBAGEjB,MAHF,mBAGEA,MAHF;;AAMA,gBAAI,CAACsB,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BhB,IAA1B,CAAL,EAAsC;AACpC,qBAAO,IAAP;AACD;;AAED,mDAAYuB,KAAZ;AACEH,oBAAM,EAAEG,KAAK,CAACH,MAAN,CAAaM,GAAb,CAAiB,UAACD,KAAD,EAAQe,CAAR;AAAA,uBAAcA,CAAC,KAAKrB,KAAN,GAAc;AACnDD,qBAAG,EAAEA,GAAG,KAAKH,SAAR,GAAoBG,GAApB,GAA6BlB,IAA7B,SAAqCJ,MAAM,EADG;AAEnDI,sBAAI,EAAJA,IAFmD;AAGnDC,wBAAM,EAAEY,cAAc,CAACb,IAAD,CAAd,KAAyBe,SAAzB,mCAA0CF,cAAc,CAACb,IAAD,CAAxD,GACHC,MADG,IAEJA;AAL+C,iBAAd,GAMnCwB,KANqB;AAAA,eAAjB;AADV;AASD;;AAEH,aAAK,MAAL;AACE,cAAIF,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BqB,MAAM,CAAClC,OAAP,CAAeH,IAAzC,CAAJ,EAAoD;AAClD,gBAAMyC,KAAK,GAAGhC,OAAO,CAACiC,cAAR,CAAuBL,MAAM,CAAClC,OAAP,CAAeH,IAAtC,CAAd;AACA,gBAAM2C,EAAE,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAC;AAC7DxC,oBAAM,EAAEoC,MAAM,CAAClC,OAAP,CAAeF;AADsC,aAAD,CAA9D;AAGA,gBAAMwB,KAAK,GAAGkB,EAAE,GAAGpB,KAAK,CAACH,MAAN,CAAawB,IAAb,CAAkB,eAAK;AAAA,qBAAInB,KAAK,CAACzB,IAAN,KAAeqC,MAAM,CAAClC,OAAP,CAAeH,IAA9B,IAAsC2C,EAAE,MAAMF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAC;AAC9IxC,sBAAM,EAAEwB,KAAK,CAACxB;AADgI,eAAD,CAAzD,CAA5C;AAAA,aAAvB,CAAH,GAETc,SAFP;AAGA,gBAAIK,MAAJ;;AAEA,gBAAIK,KAAJ,EAAW;AACTL,oBAAM,GAAGG,KAAK,CAACH,MAAN,CAAaI,MAAb,CAAoB,WAAC;AAAA,uBAAIU,CAAC,CAAChB,GAAF,KAAUO,KAAK,CAACP,GAApB;AAAA,eAArB,CAAT;AACAE,oBAAM,CAAChB,IAAP,iCAAiBqB,KAAjB;AACExB,sBAAM,EAAEY,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAd,KAAwCe,SAAxC,mCAAyDF,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAvE,GACHqC,MAAM,CAAClC,OAAP,CAAeF,MADZ,IAEJoC,MAAM,CAAClC,OAAP,CAAeF;AAHrB;AAKD,aAPD,MAOO;AACLmB,oBAAM,gCAAOG,KAAK,CAACH,MAAb,IAAqB;AACzBF,mBAAG,EAAKmB,MAAM,CAAClC,OAAP,CAAeH,IAApB,SAA4BJ,MAAM,EADZ;AAEzBI,oBAAI,EAAEqC,MAAM,CAAClC,OAAP,CAAeH,IAFI;AAGzBC,sBAAM,EAAEY,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAd,KAAwCe,SAAxC,mCAAyDF,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAvE,GACHqC,MAAM,CAAClC,OAAP,CAAeF,MADZ,IAEJoC,MAAM,CAAClC,OAAP,CAAeF;AALM,eAArB,EAAN;AAOD;;AAED,mDAAYsB,KAAZ;AACEJ,mBAAK,EAAEC,MAAM,CAACO,MAAP,GAAgB,CADzB;AAEEP,oBAAM,EAANA;AAFF;AAID;;AAED,iBAAO,IAAP;;AAEF,aAAK,KAAL;AACE;AACE,gBAAMD,MAAK,GAAGkB,MAAM,CAACC,MAAP,KAAkBf,KAAK,CAACL,GAAxB,IAA+BmB,MAAM,CAACE,MAAtC,GAA+ChB,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAuB,WAAC;AAAA,qBAAIC,CAAC,CAAChB,GAAF,KAAUmB,MAAM,CAACE,MAArB;AAAA,aAAxB,CAA/C,GAAsGhB,KAAK,CAACJ,KAA1H;;AAEA,gBAAIA,MAAK,GAAG,CAAZ,EAAe;AACb,kBAAMb,KAAK,GAAGwB,IAAI,CAACe,GAAL,CAAS1B,MAAK,GAAGkB,MAAM,CAAClC,OAAP,CAAeG,KAAvB,GAA+B,CAAxC,EAA2C,CAA3C,CAAd;;AACA,kBAAMc,OAAM,GAAGG,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmB,CAAnB,EAAsB7B,KAAtB,EAA6BwC,MAA7B,CAAoCvB,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmBhB,MAAK,GAAG,CAA3B,CAApC,CAAf;;AACA,qDAAYI,KAAZ;AACEJ,qBAAK,EAAEC,OAAM,CAACO,MAAP,GAAgB,CADzB;AAEEP,sBAAM,EAANA;AAFF;AAID;;AAED,mBAAO,IAAP;AACD;;AAEH,aAAK,YAAL;AACE,iBAAOV,MAAM,CAAC0B,iBAAP,CAAyBb,KAAzB,EAAgC;AACrCrB,gBAAI,EAAE,KAD+B;AAErCC,mBAAO,EAAE;AACPG,mBAAK,EAAEiB,KAAK,CAACH,MAAN,CAAaO,MAAb,GAAsB;AADtB;AAF4B,WAAhC,EAKJlB,OALI,CAAP;;AAOF,aAAK,UAAL;AACE,cAAI4B,MAAM,CAAClC,OAAP,CAAeH,IAAf,KAAwBe,SAAxB,IAAqC,CAACQ,KAAK,CAACX,UAAN,CAAiBI,QAAjB,CAA0BqB,MAAM,CAAClC,OAAP,CAAeH,IAAzC,CAA1C,EAA0F;AACxF,mBAAO,IAAP;AACD;;AAED,cAAIqC,MAAM,CAAClC,OAAP,CAAee,GAAf,IAAsBmB,MAAM,CAAClC,OAAP,CAAeH,IAAzC,EAA+C;AAC7C,gBAAI+C,oBAAJ;;AAGA,gBAAI5B,OAAK,GAAG,CAAC,CAAb;;AACA,gBAAMsB,MAAK,GACXJ,MAAM,CAAClC,OAAP,CAAee,GAAf,KAAuBH,SAAvB,IAAoCsB,MAAM,CAAClC,OAAP,CAAeH,IAAf,KAAwBe,SAA5D,GAAwEN,OAAO,CAACiC,cAAR,CAAuBL,MAAM,CAAClC,OAAP,CAAeH,IAAtC,CAAxE,GAAsHe,SADtH;;AAEA,gBAAM4B,GAAE,GAAGF,MAAK,KAAK,IAAV,IAAkBA,MAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,MAAK,CAAC;AAC7DxC,oBAAM,EAAEoC,MAAM,CAAClC,OAAP,CAAeF;AADsC,aAAD,CAA9D;;AAIA,gBAAI0C,GAAJ,EAAQ;AACNxB,qBAAK,GAAGI,KAAK,CAACH,MAAN,CAAaa,SAAb,CAAuB,eAAK;AAAA,uBAAIR,KAAK,CAACzB,IAAN,KAAeqC,MAAM,CAAClC,OAAP,CAAeH,IAA9B,IAAsC2C,GAAE,MAAMF,MAAK,KAAK,IAAV,IAAkBA,MAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,MAAK,CAAC;AACxIxC,wBAAM,EAAEwB,KAAK,CAACxB;AAD0H,iBAAD,CAAzD,CAA5C;AAAA,eAA5B,CAAR;AAGD,aAJD,MAIO,IAAIsB,KAAK,CAACH,MAAN,CAAaG,KAAK,CAACJ,KAAnB,EAA0BnB,IAA1B,KAAmCqC,MAAM,CAAClC,OAAP,CAAeH,IAAlD,IAA0DqC,MAAM,CAAClC,OAAP,CAAee,GAAf,KAAuBH,SAAjF,IAA8FQ,KAAK,CAACH,MAAN,CAAaG,KAAK,CAACJ,KAAnB,EAA0BD,GAA1B,KAAkCmB,MAAM,CAAClC,OAAP,CAAee,GAAnJ,EAAwJ;AAC7JC,qBAAK,GAAGI,KAAK,CAACJ,KAAd;AACD,aAFM,MAEA;AACL,mBAAK,IAAIqB,CAAC,GAAGjB,KAAK,CAACH,MAAN,CAAaO,MAAb,GAAsB,CAAnC,EAAsCa,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD,oBAAIjB,KAAK,CAACH,MAAN,CAAaoB,CAAb,EAAgBxC,IAAhB,KAAyBqC,MAAM,CAAClC,OAAP,CAAeH,IAAxC,IAAgDqC,MAAM,CAAClC,OAAP,CAAee,GAAf,KAAuBH,SAAvE,IAAoFQ,KAAK,CAACH,MAAN,CAAaoB,CAAb,EAAgBtB,GAAhB,KAAwBmB,MAAM,CAAClC,OAAP,CAAee,GAA/H,EAAoI;AAClIC,yBAAK,GAAGqB,CAAR;AACA;AACD;AACF;AACF;;AAED,gBAAIrB,OAAK,KAAK,CAAC,CAAX,IAAgBkB,MAAM,CAAClC,OAAP,CAAee,GAA/B,IAAsCmB,MAAM,CAAClC,OAAP,CAAeH,IAAf,KAAwBe,SAAlE,EAA6E;AAC3E,qBAAO,IAAP;AACD;;AAED,gBAAII,OAAK,KAAK,CAAC,CAAX,IAAgBkB,MAAM,CAAClC,OAAP,CAAeH,IAAf,KAAwBe,SAA5C,EAAuD;AACrD,kBAAIiC,mBAAJ;;AAEA,kBAAM5B,QAAM,gCAAOG,KAAK,CAACH,MAAb,IAAqB;AAC/BF,mBAAG,EAAE,CAAC8B,mBAAmB,GAAGX,MAAM,CAAClC,OAAP,CAAee,GAAtC,MAA+C,IAA/C,IAAuD8B,mBAAmB,KAAK,KAAK,CAApF,GAAwFA,mBAAxF,GAAiHX,MAAM,CAAClC,OAAP,CAAeH,IAAhI,SAAwIJ,MAAM,EADpH;AAE/BI,oBAAI,EAAEqC,MAAM,CAAClC,OAAP,CAAeH,IAFU;AAG/BiD,oBAAI,EAAEZ,MAAM,CAAClC,OAAP,CAAe8C,IAHU;AAI/BhD,sBAAM,EAAEY,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAd,KAAwCe,SAAxC,mCAAyDF,cAAc,CAACwB,MAAM,CAAClC,OAAP,CAAeH,IAAhB,CAAvE,GACHqC,MAAM,CAAClC,OAAP,CAAeF,MADZ,IAEJoC,MAAM,CAAClC,OAAP,CAAeF;AANY,eAArB,EAAZ;;AAQA,qDAAYsB,KAAZ;AACEH,sBAAM,EAANA,QADF;AAEED,qBAAK,EAAEC,QAAM,CAACO,MAAP,GAAgB;AAFzB;AAID;;AAED,gBAAMF,MAAK,GAAGF,KAAK,CAACH,MAAN,CAAaD,OAAb,CAAd;;AACA,gBAAIlB,OAAJ;;AAEA,gBAAIoC,MAAM,CAAClC,OAAP,CAAe+C,KAAnB,EAA0B;AACxBjD,qBAAM,GAAGoC,MAAM,CAAClC,OAAP,CAAeF,MAAf,KAA0Bc,SAA1B,IAAuCF,cAAc,CAACY,MAAK,CAACzB,IAAP,CAAd,KAA+Be,SAAtE,iDAAuFF,cAAc,CAACY,MAAK,CAACzB,IAAP,CAArG,GACJyB,MAAK,CAACxB,MADF,GAEJoC,MAAM,CAAClC,OAAP,CAAeF,MAFX,IAGLwB,MAAK,CAACxB,MAHV;AAID,aALD,MAKO;AACLA,qBAAM,GAAGY,cAAc,CAACY,MAAK,CAACzB,IAAP,CAAd,KAA+Be,SAA/B,mCAAgDF,cAAc,CAACY,MAAK,CAACzB,IAAP,CAA9D,GACJqC,MAAM,CAAClC,OAAP,CAAeF,MADX,IAELoC,MAAM,CAAClC,OAAP,CAAeF,MAFnB;AAGD;;AAED,mDAAYsB,KAAZ;AACEJ,mBAAK,EAALA,OADF;AAEEC,oBAAM,+BAAMG,KAAK,CAACH,MAAN,CAAae,KAAb,CAAmB,CAAnB,EAAsBhB,OAAtB,CAAN,IAAoClB,OAAM,KAAKwB,MAAK,CAACxB,MAAjB,IAA2BoC,MAAM,CAAClC,OAAP,CAAe8C,IAAf,IAAuBZ,MAAM,CAAClC,OAAP,CAAe8C,IAAf,KAAwBxB,MAAK,CAACwB,IAAhF,mCAA4FxB,MAA5F;AACxCwB,oBAAI,EAAE,CAACF,oBAAoB,GAAGV,MAAM,CAAClC,OAAP,CAAe8C,IAAvC,MAAiD,IAAjD,IAAyDF,oBAAoB,KAAK,KAAK,CAAvF,GAA2FA,oBAA3F,GAAkHtB,MAAK,CAACwB,IADtF;AAExChD,sBAAM,EAANA;AAFwC,mBAGtCsB,KAAK,CAACH,MAAN,CAAaD,OAAb,CAHE;AAFR;AAOD;;AAED,iBAAO,IAAP;;AAEF,aAAK,SAAL;AACE,cAAII,KAAK,CAACJ,KAAN,GAAc,CAAlB,EAAqB;AACnB,mBAAOT,MAAM,CAAC0B,iBAAP,CAAyBb,KAAzB,EAAgC;AACrCrB,kBAAI,EAAE,KAD+B;AAErCC,qBAAO,EAAE;AACPG,qBAAK,EAAE;AADA,eAF4B;AAKrCgC,oBAAM,EAAED,MAAM,CAACC,MALsB;AAMrCC,oBAAM,EAAEF,MAAM,CAACE;AANsB,aAAhC,EAOJ9B,OAPI,CAAP;AAQD;;AAED,iBAAO,IAAP;;AAEF;AACE,iBAAOZ,UAAU,CAACuC,iBAAX,CAA6Bb,KAA7B,EAAoCc,MAApC,CAAP;AAtLJ;AAwLD,KA3RS;AA6RVc,kBAAc,EAAErD;AA7RN,IAAZ;;AA+RA,SAAOY,MAAP;AACD","names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","_action$payload$path","_action$payload$key","path","merge","actionCreators"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/routers/lib/module/StackRouter.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  pop(count = 1) {\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n\n};\nexport default function StackRouter(options) {\n  const router = { ...BaseRouter,\n    type: 'stack',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({ ...route,\n        key: route.key || `${route.name}-${nanoid()}`,\n        params: routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeKeyChanges\n    }) {\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return { ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return { ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return { ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${nanoid()}`,\n                name,\n                params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({ ...route,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              });\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n\n            return { ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return { ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            // If the route already exists, navigate to that\n            let index = -1;\n            const getId = // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n\n              const routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return { ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n\n            const route = state.routes[index];\n            let params;\n\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            }\n\n            return { ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? { ...route,\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : route.path,\n                params\n              } : state.routes[index]]\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions\n  };\n  return router;\n}\n//# sourceMappingURL=StackRouter.js.map"]},"metadata":{},"sourceType":"module"}