{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect as $g7Czo$useEffect } from \"react\";\nimport { useToggle as $g7Czo$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $g7Czo$filterDOMProps, mergeProps as $g7Czo$mergeProps } from \"@react-aria/utils\";\nimport { useLabel as $g7Czo$useLabel } from \"@react-aria/label\";\nimport { useToggleState as $g7Czo$useToggleState } from \"@react-stately/toggle\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $fea2f35efc29884c$exports = {};\n$parcel$export($fea2f35efc29884c$exports, \"useCheckbox\", function () {\n  return $fea2f35efc29884c$export$e375f10ce42261c5;\n});\n\nfunction $fea2f35efc29884c$export$e375f10ce42261c5(props, state, inputRef) {\n  var _$g7Czo$useToggle = $g7Czo$useToggle(props, state, inputRef),\n      inputProps = _$g7Czo$useToggle.inputProps;\n\n  var isSelected = state.isSelected;\n  var isIndeterminate = props.isIndeterminate;\n  $g7Czo$useEffect(function () {\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    })\n  };\n}\n\nvar $ec288cd435d5d49a$exports = {};\n$parcel$export($ec288cd435d5d49a$exports, \"useCheckboxGroup\", function () {\n  return $ec288cd435d5d49a$export$49ff6f28c54f1cbe;\n});\nvar $61350709ee325005$export$31440636951aa68c = new WeakMap();\n\nfunction $ec288cd435d5d49a$export$49ff6f28c54f1cbe(props, state) {\n  var isDisabled = props.isDisabled,\n      name = props.name;\n\n  var _$g7Czo$useLabel = $g7Czo$useLabel(_objectSpread(_objectSpread({}, props), {}, {\n    labelElementType: 'span'\n  })),\n      labelProps = _$g7Czo$useLabel.labelProps,\n      fieldProps = _$g7Czo$useLabel.fieldProps;\n\n  var domProps = $g7Czo$filterDOMProps(props, {\n    labelable: true\n  });\n  $61350709ee325005$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $g7Czo$mergeProps(domProps, _objectSpread({\n      role: 'group',\n      'aria-disabled': isDisabled || undefined\n    }, fieldProps)),\n    labelProps: labelProps\n  };\n}\n\nvar $a84307d0769c22d8$exports = {};\n$parcel$export($a84307d0769c22d8$exports, \"useCheckboxGroupItem\", function () {\n  return $a84307d0769c22d8$export$353b32fc6898d37d;\n});\n\nfunction $a84307d0769c22d8$export$353b32fc6898d37d(props, state, inputRef) {\n  var toggleState = $g7Czo$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange: function onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n  });\n\n  var _$fea2f35efc29884c$ex = $fea2f35efc29884c$export$e375f10ce42261c5(_objectSpread(_objectSpread({}, props), {}, {\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $61350709ee325005$export$31440636951aa68c.get(state)\n  }), toggleState, inputRef),\n      inputProps = _$fea2f35efc29884c$ex.inputProps;\n\n  return {\n    inputProps: inputProps\n  };\n}\n\nexport { $fea2f35efc29884c$export$e375f10ce42261c5 as useCheckbox, $ec288cd435d5d49a$export$49ff6f28c54f1cbe as useCheckboxGroup, $a84307d0769c22d8$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"mappings":"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","names":["useEffect","$g7Czo$useEffect","useToggle","$g7Czo$useToggle","filterDOMProps","$g7Czo$filterDOMProps","mergeProps","$g7Czo$mergeProps","useLabel","$g7Czo$useLabel","useToggleState","$g7Czo$useToggleState","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$fea2f35efc29884c$exports","$fea2f35efc29884c$export$e375f10ce42261c5","props","state","inputRef","inputProps","isSelected","isIndeterminate","current","indeterminate","checked","$ec288cd435d5d49a$exports","$ec288cd435d5d49a$export$49ff6f28c54f1cbe","$61350709ee325005$export$31440636951aa68c","WeakMap","isDisabled","name","labelElementType","labelProps","fieldProps","domProps","labelable","groupProps","role","undefined","$a84307d0769c22d8$exports","$a84307d0769c22d8$export$353b32fc6898d37d","toggleState","isReadOnly","value","onChange","addValue","removeValue","useCheckbox","useCheckboxGroup","useCheckboxGroupItem"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-aria/checkbox/dist/module.js"],"sourcesContent":["import {useEffect as $g7Czo$useEffect} from \"react\";\nimport {useToggle as $g7Czo$useToggle} from \"@react-aria/toggle\";\nimport {filterDOMProps as $g7Czo$filterDOMProps, mergeProps as $g7Czo$mergeProps} from \"@react-aria/utils\";\nimport {useLabel as $g7Czo$useLabel} from \"@react-aria/label\";\nimport {useToggleState as $g7Czo$useToggleState} from \"@react-stately/toggle\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $fea2f35efc29884c$exports = {};\n\n$parcel$export($fea2f35efc29884c$exports, \"useCheckbox\", () => $fea2f35efc29884c$export$e375f10ce42261c5);\n\n\nfunction $fea2f35efc29884c$export$e375f10ce42261c5(props, state, inputRef) {\n    let { inputProps: inputProps  } = $g7Czo$useToggle(props, state, inputRef);\n    let { isSelected: isSelected  } = state;\n    let { isIndeterminate: isIndeterminate  } = props;\n    $g7Czo$useEffect(()=>{\n        // indeterminate is a property, but it can only be set via javascript\n        // https://css-tricks.com/indeterminate-checkboxes/\n        if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n    });\n    return {\n        inputProps: {\n            ...inputProps,\n            checked: isSelected,\n            'aria-checked': isIndeterminate ? 'mixed' : isSelected\n        }\n    };\n}\n\n\nvar $ec288cd435d5d49a$exports = {};\n\n$parcel$export($ec288cd435d5d49a$exports, \"useCheckboxGroup\", () => $ec288cd435d5d49a$export$49ff6f28c54f1cbe);\nconst $61350709ee325005$export$31440636951aa68c = new WeakMap();\n\n\n\n\nfunction $ec288cd435d5d49a$export$49ff6f28c54f1cbe(props, state) {\n    let { isDisabled: isDisabled , name: name  } = props;\n    let { labelProps: labelProps , fieldProps: fieldProps  } = $g7Czo$useLabel({\n        ...props,\n        // Checkbox group is not an HTML input element so it\n        // shouldn't be labeled by a <label> element.\n        labelElementType: 'span'\n    });\n    let domProps = $g7Czo$filterDOMProps(props, {\n        labelable: true\n    });\n    // Pass name prop from group to all items by attaching to the state.\n    $61350709ee325005$export$31440636951aa68c.set(state, name);\n    return {\n        groupProps: $g7Czo$mergeProps(domProps, {\n            role: 'group',\n            'aria-disabled': isDisabled || undefined,\n            ...fieldProps\n        }),\n        labelProps: labelProps\n    };\n}\n\n\nvar $a84307d0769c22d8$exports = {};\n\n$parcel$export($a84307d0769c22d8$exports, \"useCheckboxGroupItem\", () => $a84307d0769c22d8$export$353b32fc6898d37d);\n\n\n\nfunction $a84307d0769c22d8$export$353b32fc6898d37d(props, state, inputRef) {\n    const toggleState = $g7Czo$useToggleState({\n        isReadOnly: props.isReadOnly || state.isReadOnly,\n        isSelected: state.isSelected(props.value),\n        onChange (isSelected) {\n            if (isSelected) state.addValue(props.value);\n            else state.removeValue(props.value);\n            if (props.onChange) props.onChange(isSelected);\n        }\n    });\n    let { inputProps: inputProps  } = $fea2f35efc29884c$export$e375f10ce42261c5({\n        ...props,\n        isReadOnly: props.isReadOnly || state.isReadOnly,\n        isDisabled: props.isDisabled || state.isDisabled,\n        name: props.name || $61350709ee325005$export$31440636951aa68c.get(state)\n    }, toggleState, inputRef);\n    return {\n        inputProps: inputProps\n    };\n}\n\n\n\n\nexport {$fea2f35efc29884c$export$e375f10ce42261c5 as useCheckbox, $ec288cd435d5d49a$export$49ff6f28c54f1cbe as useCheckboxGroup, $a84307d0769c22d8$export$353b32fc6898d37d as useCheckboxGroupItem};\n//# sourceMappingURL=module.js.map\n"]},"metadata":{},"sourceType":"module"}