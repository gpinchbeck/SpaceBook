{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"groupProps\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { clamp, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from \"./utils\";\nimport { useRef } from 'react';\nimport { setInteractionModality } from '@react-aria/interactions';\nimport { useLabel } from '@react-aria/label';\nimport { mapDomPropsToRN, isRTL } from '@react-native-aria/utils';\nimport { useMove } from \"./useMove\";\n\nfunction useSliderWeb(props, state, trackLayout) {\n  var _labelProps$id;\n\n  var _useLabel = useLabel(props),\n      labelProps = _useLabel.labelProps,\n      fieldProps = _useLabel.fieldProps;\n\n  var isVertical = props.orientation === 'vertical';\n  sliderIds.set(state, (_labelProps$id = labelProps.id) !== null && _labelProps$id !== void 0 ? _labelProps$id : fieldProps.id);\n  var direction = isRTL() ? 'rtl' : undefined;\n\n  var _useGlobalListeners = useGlobalListeners(),\n      addGlobalListener = _useGlobalListeners.addGlobalListener,\n      removeGlobalListener = _useGlobalListeners.removeGlobalListener;\n\n  var realTimeTrackDraggingIndex = useRef(null);\n  var stateRef = useRef(null);\n  stateRef.current = state;\n  var reverseX = direction === 'rtl';\n  var currentPosition = useRef(null);\n\n  var _useMove = useMove({\n    onMoveStart: function onMoveStart() {\n      currentPosition.current = null;\n    },\n    onMove: function onMove(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current = stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) * size;\n      }\n\n      var delta = isVertical ? deltaY : deltaX;\n\n      if (isVertical || reverseX) {\n        delta = -delta;\n      }\n\n      currentPosition.current += delta;\n\n      if (realTimeTrackDraggingIndex.current != null) {\n        var percent = clamp(currentPosition.current / size, 0, 1);\n        stateRef.current.setThumbPercent(realTimeTrackDraggingIndex.current, percent);\n      }\n    },\n    onMoveEnd: function onMoveEnd() {\n      if (realTimeTrackDraggingIndex.current != null) {\n        stateRef.current.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  }),\n      moveProps = _useMove.moveProps;\n\n  var currentPointer = useRef(undefined);\n\n  var onDownTrack = function onDownTrack(e, id, clientX, clientY) {\n    if (!props.isDisabled && state.values.every(function (_, i) {\n      return !state.isThumbDragging(i);\n    })) {\n      var size = isVertical ? trackLayout.height : trackLayout.width;\n      var trackPosition = trackLayout[isVertical ? 'top' : 'left'];\n      var clickPosition = isVertical ? clientY : clientX;\n      var offset = clickPosition - trackPosition;\n      var percent = offset / size;\n\n      if (direction === 'rtl' || isVertical) {\n        percent = 1 - percent;\n      }\n\n      var value = state.getPercentValue(percent);\n      var closestThumb;\n      var split = state.values.findIndex(function (v) {\n        return value - v < 0;\n      });\n\n      if (split === 0) {\n        closestThumb = split;\n      } else if (split === -1) {\n        closestThumb = state.values.length - 1;\n      } else {\n        var lastLeft = state.values[split - 1];\n        var firstRight = state.values[split];\n\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) {\n          closestThumb = split - 1;\n        } else {\n          closestThumb = split;\n        }\n      }\n\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        e.preventDefault();\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n        addGlobalListener(window, 'mouseup', onUpTrack, false);\n        addGlobalListener(window, 'touchend', onUpTrack, false);\n        addGlobalListener(window, 'pointerup', onUpTrack, false);\n      } else {\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  };\n\n  var onUpTrack = function onUpTrack(e) {\n    var _e$pointerId, _e$changedTouches;\n\n    var id = (_e$pointerId = e.pointerId) !== null && _e$pointerId !== void 0 ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n\n      removeGlobalListener(window, 'mouseup', onUpTrack, false);\n      removeGlobalListener(window, 'touchend', onUpTrack, false);\n      removeGlobalListener(window, 'pointerup', onUpTrack, false);\n    }\n  };\n\n  if (labelProps.htmlFor) {\n    delete labelProps.htmlFor;\n\n    labelProps.onClick = function () {\n      var _document$getElementB;\n\n      (_document$getElementB = document.getElementById(getSliderThumbId(state, 0))) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();\n      setInteractionModality('keyboard');\n    };\n  }\n\n  return {\n    labelProps: labelProps,\n    groupProps: _objectSpread({\n      role: 'group'\n    }, fieldProps),\n    trackProps: mergeProps({\n      onMouseDown: function onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n\n        onDownTrack(e, undefined, e.clientX, e.clientY);\n      },\n      onPointerDown: function onPointerDown(e) {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n\n        onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n      },\n      onTouchStart: function onTouchStart(e) {\n        onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      }\n    }, moveProps),\n    outputProps: {\n      'htmlFor': state.values.map(function (_, index) {\n        return getSliderThumbId(state, index);\n      }).join(' '),\n      'aria-live': 'off'\n    }\n  };\n}\n\nexport var useSlider = function useSlider(props, state, ref) {\n  var _useSliderWeb = useSliderWeb(props, state, ref),\n      webGroupProps = _useSliderWeb.groupProps,\n      rest = _objectWithoutProperties(_useSliderWeb, _excluded);\n\n  var groupProps = mapDomPropsToRN(webGroupProps);\n  var labelProps = mapDomPropsToRN(rest.labelProps);\n  return _objectSpread(_objectSpread({\n    groupProps: groupProps\n  }, rest), {}, {\n    labelProps: labelProps\n  });\n};","map":{"version":3,"mappings":"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","names":["clamp","mergeProps","useGlobalListeners","getSliderThumbId","sliderIds","useRef","setInteractionModality","useLabel","mapDomPropsToRN","isRTL","useMove","useSliderWeb","props","state","trackLayout","_labelProps$id","labelProps","fieldProps","isVertical","orientation","set","id","direction","undefined","addGlobalListener","removeGlobalListener","realTimeTrackDraggingIndex","stateRef","current","reverseX","currentPosition","onMoveStart","onMove","deltaX","deltaY","size","height","width","getThumbPercent","delta","percent","setThumbPercent","onMoveEnd","setThumbDragging","moveProps","currentPointer","onDownTrack","e","clientX","clientY","isDisabled","values","every","_","i","isThumbDragging","trackPosition","clickPosition","offset","value","getPercentValue","closestThumb","split","findIndex","v","length","lastLeft","firstRight","Math","abs","isThumbEditable","preventDefault","setFocusedThumb","setThumbValue","window","onUpTrack","_e$pointerId","_e$changedTouches","pointerId","changedTouches","identifier","htmlFor","onClick","_document$getElementB","document","getElementById","focus","groupProps","role","trackProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","pointerType","onTouchStart","outputProps","map","index","join","useSlider","ref","webGroupProps","rest"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-native-aria/slider/lib/module/useSlider.web.js"],"sourcesContent":["import { clamp, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport { useRef } from 'react';\nimport { setInteractionModality } from '@react-aria/interactions';\nimport { useLabel } from '@react-aria/label';\nimport { mapDomPropsToRN, isRTL } from '@react-native-aria/utils';\nimport { useMove } from './useMove';\n\nfunction useSliderWeb(props, state, trackLayout) {\n  var _labelProps$id;\n\n  let {\n    labelProps,\n    fieldProps\n  } = useLabel(props);\n  let isVertical = props.orientation === 'vertical'; // Attach id of the label to the state so it can be accessed by useSliderThumb.\n\n  sliderIds.set(state, (_labelProps$id = labelProps.id) !== null && _labelProps$id !== void 0 ? _labelProps$id : fieldProps.id);\n  const direction = isRTL() ? 'rtl' : undefined;\n  let {\n    addGlobalListener,\n    removeGlobalListener\n  } = useGlobalListeners(); // When the user clicks or drags the track, we want the motion to set and drag the\n  // closest thumb.  Hence we also need to install useMove() on the track element.\n  // Here, we keep track of which index is the \"closest\" to the drag start point.\n  // It is set onMouseDown/onTouchDown; see trackProps below.\n\n  const realTimeTrackDraggingIndex = useRef(null);\n  const stateRef = useRef(null);\n  stateRef.current = state;\n  const reverseX = direction === 'rtl';\n  const currentPosition = useRef(null);\n  const {\n    moveProps\n  } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n    },\n\n    onMove({\n      deltaX,\n      deltaY\n    }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current = stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) * size;\n      }\n\n      let delta = isVertical ? deltaY : deltaX;\n\n      if (isVertical || reverseX) {\n        delta = -delta;\n      }\n\n      currentPosition.current += delta;\n\n      if (realTimeTrackDraggingIndex.current != null) {\n        const percent = clamp(currentPosition.current / size, 0, 1);\n        stateRef.current.setThumbPercent(realTimeTrackDraggingIndex.current, percent);\n      }\n    },\n\n    onMoveEnd() {\n      if (realTimeTrackDraggingIndex.current != null) {\n        stateRef.current.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n\n  });\n  let currentPointer = useRef(undefined);\n\n  let onDownTrack = (e, id, clientX, clientY) => {\n    // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.\n    if (!props.isDisabled && state.values.every((_, i) => !state.isThumbDragging(i))) {\n      let size = isVertical ? trackLayout.height : trackLayout.width; // Find the closest thumb\n\n      const trackPosition = trackLayout[isVertical ? 'top' : 'left'];\n      const clickPosition = isVertical ? clientY : clientX;\n      const offset = clickPosition - trackPosition;\n      let percent = offset / size;\n\n      if (direction === 'rtl' || isVertical) {\n        percent = 1 - percent;\n      }\n\n      let value = state.getPercentValue(percent); // to find the closet thumb we split the array based on the first thumb position to the \"right/end\" of the click.\n\n      let closestThumb;\n      let split = state.values.findIndex(v => value - v < 0);\n\n      if (split === 0) {\n        // If the index is zero then the closetThumb is the first one\n        closestThumb = split;\n      } else if (split === -1) {\n        // If no index is found they've clicked past all the thumbs\n        closestThumb = state.values.length - 1;\n      } else {\n        let lastLeft = state.values[split - 1];\n        let firstRight = state.values[split]; // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one\n\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) {\n          closestThumb = split - 1;\n        } else {\n          closestThumb = split;\n        }\n      } // Confirm that the found closest thumb is editable, not disabled, and move it\n\n\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        // Don't unfocus anything\n        e.preventDefault();\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n        addGlobalListener(window, 'mouseup', onUpTrack, false);\n        addGlobalListener(window, 'touchend', onUpTrack, false);\n        addGlobalListener(window, 'pointerup', onUpTrack, false);\n      } else {\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  };\n\n  let onUpTrack = e => {\n    var _e$pointerId, _e$changedTouches;\n\n    let id = (_e$pointerId = e.pointerId) !== null && _e$pointerId !== void 0 ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n\n      removeGlobalListener(window, 'mouseup', onUpTrack, false);\n      removeGlobalListener(window, 'touchend', onUpTrack, false);\n      removeGlobalListener(window, 'pointerup', onUpTrack, false);\n    }\n  };\n\n  if (labelProps.htmlFor) {\n    // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS\n    // causes this to override the `aria-labelledby` on the thumb. This causes the first\n    // thumb to only be announced as the slider label rather than its individual name as well.\n    // See https://bugs.webkit.org/show_bug.cgi?id=172464.\n    delete labelProps.htmlFor;\n\n    labelProps.onClick = () => {\n      var _document$getElementB;\n\n      // Safari does not focus <input type=\"range\"> elements when clicking on an associated <label>,\n      // so do it manually. In addition, make sure we show the focus ring.\n      (_document$getElementB = document.getElementById(getSliderThumbId(state, 0))) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();\n      setInteractionModality('keyboard');\n    };\n  }\n\n  return {\n    labelProps,\n    // The root element of the Slider will have role=\"group\" to group together\n    // all the thumb inputs in the Slider.  The label of the Slider will\n    // be used to label the group.\n    groupProps: {\n      role: 'group',\n      ...fieldProps\n    },\n    trackProps: mergeProps({\n      onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n\n        onDownTrack(e, undefined, e.clientX, e.clientY);\n      },\n\n      onPointerDown(e) {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n\n        onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n      },\n\n      onTouchStart(e) {\n        onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      }\n\n    }, moveProps),\n    outputProps: {\n      'htmlFor': state.values.map((_, index) => getSliderThumbId(state, index)).join(' '),\n      'aria-live': 'off'\n    }\n  };\n}\n\nexport const useSlider = (props, state, ref) => {\n  let {\n    groupProps: webGroupProps,\n    ...rest\n  } = useSliderWeb(props, state, ref);\n  let groupProps = mapDomPropsToRN(webGroupProps);\n  let labelProps = mapDomPropsToRN(rest.labelProps);\n  return {\n    groupProps,\n    ...rest,\n    labelProps\n  };\n};\n//# sourceMappingURL=useSlider.web.js.map"]},"metadata":{},"sourceType":"module"}