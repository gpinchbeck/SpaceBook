{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar getData = function getData(done) {\n  var jsonValue, data;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@spacebook_details'));\n\n        case 3:\n          jsonValue = _context.sent;\n          data = JSON.parse(jsonValue);\n          return _context.abrupt(\"return\", done(data));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n          return _context.abrupt(\"return\", null);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar displayAlert = new DisplayAlert();\n\nvar FeedScreen = function (_Component) {\n  _inherits(FeedScreen, _Component);\n\n  var _super = _createSuper(FeedScreen);\n\n  function FeedScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FeedScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      posts: [],\n      ids: [],\n      uploadModalVisible: false,\n      viewPostModalVisible: false,\n      postText: '',\n      currentPost: {},\n      editText: '',\n      editVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(FeedScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getIds();\n\n        navigation.addListener('focus', function () {\n          _this2.getIds();\n        });\n      });\n    }\n  }, {\n    key: \"getIds\",\n    value: function getIds() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var idList = [data.id];\n      console.log(data.id);\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        for (var i = 0; i < responseJson.length; i += 1) {\n          idList.push(responseJson[i].user_id);\n        }\n\n        console.log(idList.length);\n\n        _this3.setState({\n          ids: idList\n        });\n\n        _this3.getPosts();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"getPosts\",\n    value: function getPosts() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          ids = _this$state.ids;\n      var postsList = [];\n      var idList = ids;\n\n      for (var i = 0; i < idList.length; i += 1) {\n        fetch(\"http://localhost:3333/api/1.0.0/user/\" + idList[i] + \"/post\", {\n          method: 'GET',\n          headers: {\n            'X-Authorization': data.token\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (responseJson) {\n          if (responseJson.length > 0) {\n            for (var j = 0; j < responseJson.length; j += 1) {\n              postsList.push(responseJson[j]);\n\n              _this4.setState({\n                posts: postsList\n              });\n            }\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"uploadPost\",\n    value: function uploadPost() {\n      var _this5 = this;\n\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          postText = _this$state2.postText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: postText\n        })\n      }).then(function (response) {\n        if (response.status === 201) {\n          displayAlert.displayAlert('Post uploaded.');\n        } else {\n          displayAlert.displayAlert(response.statusText + \" \" + response.status);\n        }\n\n        _this5.getPosts();\n      });\n    }\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(postId) {\n      var _this6 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/ \" + postId, {\n        method: 'DELETE',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post deleted.');\n        } else {\n          displayAlert.displayAlert('You can only delete your own post.');\n        }\n\n        _this6.getPosts();\n\n        _this6.setState({\n          viewPostModalVisible: false\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"updatePost\",\n    value: function updatePost(postId) {\n      var _this7 = this;\n\n      var _this$state3 = this.state,\n          data = _this$state3.data,\n          editText = _this$state3.editText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/\" + postId, {\n        method: 'PATCH',\n        headers: {\n          'Conent-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: {\n          text: editText\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post updated.');\n        } else {\n          displayAlert.displayAlert(response.statusText);\n        }\n\n        _this7.getPosts();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"viewPost\",\n    value: function viewPost() {\n      var _this8 = this;\n\n      var posts = this.state.posts;\n      return _jsx(FlatList, {\n        extraData: this.state,\n        data: posts,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsxs(Pressable, {\n            onPress: function onPress() {\n              _this8.setState({\n                viewPostModalVisible: true,\n                currentPost: item\n              });\n            },\n            children: [_jsxs(Text, {\n              children: [item.author.first_name, \" \", item.author.last_name]\n            }), _jsx(Text, {\n              children: _jsx(Moment, {\n                date: item.timestamp,\n                format: \"LLLL\"\n              })\n            }), _jsx(Text, {\n              children: item.text\n            })]\n          });\n        }\n      });\n    }\n  }, {\n    key: \"viewSinglePost\",\n    value: function viewSinglePost() {\n      var _this9 = this;\n\n      var _this$state4 = this.state,\n          currentPost = _this$state4.currentPost,\n          editVisible = _this$state4.editVisible,\n          editText = _this$state4.editText;\n\n      if (Object.keys(currentPost).length > 0) {\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [currentPost.author.first_name, \" \", currentPost.author.last_name]\n          }), _jsx(Text, {\n            children: _jsx(Moment, {\n              data: currentPost.timestamp,\n              format: \"LLLL\"\n            })\n          }), _jsx(Text, {\n            children: currentPost.text\n          }), editVisible && _jsxs(View, {\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter text\",\n              onChangeText: function onChangeText(newEditText) {\n                return _this9.setState({\n                  editText: newEditText\n                });\n              },\n              value: editText\n            }), _jsx(Button, {\n              title: \"Update\",\n              onPress: function onPress() {\n                return _this9.updatePost(currentPost.post_id);\n              }\n            })]\n          }), !editVisible && _jsx(Button, {\n            title: \"Edit\",\n            onPress: function onPress() {\n              return _this9.setState({\n                editVisible: true\n              });\n            }\n          }), !editVisible && _jsx(Button, {\n            title: \"Delete\",\n            onPress: function onPress() {\n              return _this9.deletePost(currentPost.post_id);\n            }\n          }), _jsx(Button, {\n            title: \"Cancel\",\n            onPress: function onPress() {\n              _this9.setState({\n                viewPostModalVisible: false,\n                editVisible: false,\n                editText: ''\n              });\n            }\n          }), !editVisible && _jsx(Button, {\n            title: \"Like\"\n          }), !editVisible && _jsx(Button, {\n            title: \"Unlike\"\n          })]\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n\n      var _this$state5 = this.state,\n          uploadModalVisible = _this$state5.uploadModalVisible,\n          viewPostModalVisible = _this$state5.viewPostModalVisible,\n          postText = _this$state5.postText;\n      return _jsxs(View, {\n        children: [_jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: uploadModalVisible,\n          onRequestClose: function onRequestClose() {\n            _this10.setState({\n              uploadModalVisible: !uploadModalVisible\n            });\n          },\n          children: _jsxs(View, {\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter text...\",\n              onChangeText: function onChangeText(newPostText) {\n                return _this10.setState({\n                  postText: newPostText\n                });\n              },\n              value: postText\n            }), _jsx(Button, {\n              title: \"Post\",\n              onPress: function onPress() {\n                _this10.uploadPost();\n\n                _this10.setState({\n                  uploadModalVisible: false,\n                  postText: ''\n                });\n              }\n            })]\n          })\n        }), _jsxs(View, {\n          children: [this.viewPost(), _jsx(Button, {\n            title: \"Add post\",\n            onPress: function onPress() {\n              return _this10.setState({\n                uploadModalVisible: true\n              });\n            }\n          })]\n        }), _jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: viewPostModalVisible,\n          onRequestClose: function onRequestClose() {\n            _this10.setState({\n              viewPostModalVisible: !viewPostModalVisible\n            });\n          },\n          children: _jsx(View, {\n            children: this.viewSinglePost()\n          })\n        })]\n      });\n    }\n  }]);\n\n  return FeedScreen;\n}(Component);\n\nFeedScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FeedScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/FeedScreen.js"],"names":["React","Component","AsyncStorage","PropTypes","Moment","DisplayAlert","getData","done","getItem","jsonValue","data","JSON","parse","console","log","displayAlert","FeedScreen","props","state","posts","ids","uploadModalVisible","viewPostModalVisible","postText","currentPost","editText","editVisible","navigation","setState","getIds","addListener","idList","id","fetch","method","headers","token","then","response","json","responseJson","i","length","push","user_id","getPosts","catch","error","postsList","j","body","stringify","text","status","statusText","postId","item","author","first_name","last_name","timestamp","Object","keys","newEditText","updatePost","post_id","deletePost","newPostText","uploadPost","viewPost","viewSinglePost","propTypes","shape","navigate","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FlatList, Text, View, Modal, TextInput, Pressable } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst getData = async (done) => {\r\n    try {\r\n        const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n        const data = JSON.parse(jsonValue);\r\n        return done(data);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return null;\r\n};\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FeedScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            posts: [],\r\n            ids: [],\r\n            uploadModalVisible: false,\r\n            viewPostModalVisible: false,\r\n            postText: '',\r\n            currentPost: {},\r\n            editText: '',\r\n            editVisible: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getIds();\r\n            navigation.addListener('focus', () => {\r\n                this.getIds();\r\n            });\r\n        });\r\n    }\r\n\r\n    // get all ids from friends (for loop stuff)\r\n\r\n    getIds(){\r\n        const { data } = this.state;\r\n        const idList = [data.id];\r\n        console.log(data.id);\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            for (let i = 0; i < responseJson.length; i+=1){\r\n                idList.push(responseJson[i].user_id);\r\n            }\r\n            console.log(idList.length);\r\n            this.setState({ids: idList});\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getPosts(){\r\n        const { data, ids } = this.state;\r\n        const postsList = [];\r\n        const idList = ids;\r\n        for (let i = 0; i < idList.length; i+=1){\r\n            fetch(`http://localhost:3333/api/1.0.0/user/${ idList[i] }/post`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'X-Authorization': data.token\r\n                }\r\n            })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                if (responseJson.length > 0){\r\n                    for (let j=0;j<responseJson.length;j+=1){\r\n                        postsList.push(responseJson[j])\r\n                        this.setState({\r\n                            posts: postsList\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    uploadPost(){\r\n        const { data, postText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({\r\n                text: postText\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 201){\r\n                displayAlert.displayAlert('Post uploaded.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(`${ response.statusText } ${ response.status }`)\r\n            }\r\n            this.getPosts();\r\n        })\r\n    }\r\n\r\n    deletePost(postId) {\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/ ${ postId }`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post deleted.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert('You can only delete your own post.');\r\n            }\r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false});\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    updatePost(postId) {\r\n        const { data, editText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/${ postId }`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Conent-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: {\r\n                text: editText\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post updated.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(response.statusText);\r\n            }\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    // likePost(){}\r\n\r\n    // deleteLike() {}\r\n\r\n    viewPost(){\r\n        const { posts } = this.state;\r\n        return (\r\n            <FlatList extraData={this.state} data={posts}\r\n                renderItem={({item}) => (\r\n                    <Pressable onPress={() => {this.setState({viewPostModalVisible: true, currentPost: item})}}>\r\n                        <Text>{item.author.first_name} {item.author.last_name}</Text>\r\n                        <Text><Moment date={item.timestamp} format=\"LLLL\"/></Text>\r\n                        <Text>{item.text}</Text>\r\n                    </Pressable>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    viewSinglePost(){\r\n        const { currentPost, editVisible, editText } = this.state;\r\n        if(Object.keys(currentPost).length > 0){\r\n            return (\r\n                <View>\r\n                    {/* <Text>{currentPost.post_id}</Text> */}\r\n                    <Text>{currentPost.author.first_name} {currentPost.author.last_name}</Text>\r\n                    <Text><Moment data={currentPost.timestamp} format=\"LLLL\"/></Text>\r\n                    <Text>{currentPost.text}</Text>\r\n                    {editVisible && \r\n                        <View>\r\n                            <TextInput placeholder='Enter text' onChangeText={(newEditText) => this.setState({editText: newEditText})} value={editText}/>\r\n                            <Button title='Update' onPress={() => this.updatePost(currentPost.post_id)}/>\r\n                        </View>}\r\n                    {!editVisible && <Button title='Edit' onPress={() => this.setState({editVisible: true})}/>}\r\n                    {!editVisible && <Button title='Delete' onPress={() => this.deletePost(currentPost.post_id)}/>}\r\n                    <Button title='Cancel' onPress={() => {this.setState({viewPostModalVisible: false, editVisible: false, editText: ''})}}/>\r\n                    {!editVisible && <Button title='Like' />}\r\n                    {!editVisible && <Button title='Unlike' />}\r\n                </View>\r\n            )\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render(){\r\n        const { uploadModalVisible, viewPostModalVisible, postText } = this.state;\r\n        return (\r\n            <View>\r\n                <Modal animationType='none' \r\n                    transparent\r\n                    visible={uploadModalVisible} \r\n                    onRequestClose={() => {\r\n                        // displayAlert.displayAlert('')\r\n                        this.setState({uploadModalVisible: !uploadModalVisible});\r\n                    }}\r\n                >\r\n                    <View>\r\n                        <TextInput placeholder='Enter text...' onChangeText={(newPostText) => this.setState({postText: newPostText})} value={postText}/>\r\n                        <Button title='Post' onPress={() => {\r\n                            this.uploadPost();\r\n                            this.setState({uploadModalVisible: false, postText: ''})\r\n                        }}/>\r\n                    </View>\r\n                </Modal>\r\n                <View>\r\n                    {this.viewPost()}\r\n                    <Button title='Add post' onPress={() => this.setState({uploadModalVisible: true})}/>\r\n                </View>\r\n                <Modal animationType='none'\r\n                    transparent\r\n                    visible={viewPostModalVisible}\r\n                    onRequestClose={() => {\r\n                        this.setState({viewPostModalVisible: !viewPostModalVisible});\r\n                    }}\r\n                >\r\n                    <View>\r\n                        {this.viewSinglePost()}\r\n                    </View>\r\n                </Modal>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nFeedScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FeedScreen;"]},"metadata":{},"sourceType":"module"}