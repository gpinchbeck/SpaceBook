{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box, Input, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, Center, HStack } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { PropTypes } from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      email: 'gp@gp.com',\n      password: 'password',\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"emailIsValid\",\n    value: function emailIsValid() {\n      var email = this.state.email;\n      var myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n      if (myRe.exec(email)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"login\",\n    value: function login(nav) {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n\n      if (email === '' || password === '') {\n        displayAlert.displayAlert('All fields must be entered.');\n      } else if (!this.emailIsValid()) {\n        displayAlert.displayAlert('Invalid email.');\n      } else {\n        fetch('http://localhost:3333/api/1.0.0/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password\n          })\n        }).then(function (response) {\n          if (response.status === 400) {\n            return Promise.reject(new Error(\"Incorrect email or password. Status: \" + response.status));\n          }\n\n          if (response.status === 500) {\n            return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n          }\n\n          return response.json();\n        }).then(function (json) {\n          displayAlert.displayAlert('Logged in.');\n          asyncStorage.storeData(json);\n\n          _this2.setState({\n            email: '',\n            password: ''\n          });\n\n          nav.navigate('TabNav');\n        }).catch(function (error) {\n          displayAlert.displayAlert(error);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          visible = _this$state2.visible;\n      var bgDark = \"darkBlue.700\";\n      var textColour = \"white\";\n      return _jsx(NativeBaseProvider, {\n        children: _jsxs(VStack, {\n          flex: 1,\n          bg: bgDark,\n          w: \"100%\",\n          h: \"100%\",\n          children: [_jsx(Box, {\n            alignItems: \"center\",\n            py: \"50\",\n            mt: \"100\",\n            children: _jsx(Text, {\n              bold: true,\n              fontSize: \"3xl\",\n              color: textColour,\n              children: \"Spacebook.\"\n            })\n          }), _jsx(Center, {\n            children: _jsx(Box, {\n              mt: \"100\",\n              children: _jsxs(VStack, {\n                alignItems: \"center\",\n                space: 2,\n                w: \"100%\",\n                children: [_jsx(Input, {\n                  InputRightElement: _jsx(Icon, {\n                    as: _jsx(MaterialIcons, {\n                      name: \"person\"\n                    }),\n                    size: 5,\n                    mr: \"2\",\n                    color: textColour\n                  }),\n                  placeholder: \"Email\",\n                  placeholderTextColor: textColour,\n                  color: textColour,\n                  onChangeText: function onChangeText(newEmail) {\n                    return _this3.setState({\n                      email: newEmail\n                    });\n                  },\n                  value: email\n                }), _jsx(Input, {\n                  isRequired: true,\n                  type: visible ? \"text\" : \"password\",\n                  InputRightElement: _jsx(Pressable, {\n                    onPress: function onPress() {\n                      return _this3.setState({\n                        visible: !visible\n                      });\n                    },\n                    children: _jsx(Icon, {\n                      as: _jsx(MaterialIcons, {\n                        name: visible ? \"visibility\" : \"visibility-off\"\n                      }),\n                      size: 5,\n                      mr: \"2\",\n                      color: textColour\n                    })\n                  }),\n                  placeholder: \"Password\",\n                  placeholderTextColor: textColour,\n                  color: textColour,\n                  onChangeText: function onChangeText(newPass) {\n                    return _this3.setState({\n                      password: newPass\n                    });\n                  },\n                  value: password\n                }), _jsxs(HStack, {\n                  w: \"100%\",\n                  justifyContent: \"space-between\",\n                  children: [_jsx(Button, {\n                    colorScheme: \"blueGray\",\n                    w: \"45%\",\n                    onPress: function onPress() {\n                      return _this3.login(navigation);\n                    },\n                    children: \"Login\"\n                  }), _jsx(Button, {\n                    colorScheme: \"blueGray\",\n                    w: \"45%\",\n                    onPress: function onPress() {\n                      return navigation.navigate('Signup');\n                    },\n                    children: \"Sign up\"\n                  })]\n                })]\n              })\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nLoginScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default LoginScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/LoginScreen.js"],"names":["React","Component","Box","Input","NativeBaseProvider","Text","VStack","Button","Icon","Pressable","Center","HStack","MaterialIcons","PropTypes","DisplayAlert","Storage","asyncStorage","displayAlert","LoginScreen","props","state","email","password","visible","myRe","exec","nav","emailIsValid","fetch","method","headers","body","JSON","stringify","then","response","status","Promise","reject","Error","json","storeData","setState","navigate","catch","error","navigation","bgDark","textColour","newEmail","newPass","login","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Input, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, Center, HStack } from 'native-base';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass LoginScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            email: 'gp@gp.com',\r\n            password: 'password',\r\n            visible: false\r\n        }\r\n    }\r\n\r\n    emailIsValid() {\r\n        const { email } = this.state;\r\n        const myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n\r\n        if (myRe.exec(email)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    login(nav) {\r\n        const { email, password } = this.state;\r\n        if (email === '' || password === ''){\r\n            displayAlert.displayAlert('All fields must be entered.');\r\n\r\n        }\r\n        else if (!this.emailIsValid()){\r\n            displayAlert.displayAlert('Invalid email.');\r\n        }\r\n        else {\r\n            fetch('http://localhost:3333/api/1.0.0/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email,\r\n                    password\r\n                })\r\n            })\r\n            .then((response) => {\r\n                if (response.status === 400){\r\n                    return Promise.reject(new Error(`Incorrect email or password. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 500){\r\n                    return Promise.reject(new Error(`Server error. Status: ${  response.status}`));\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((json) => {\r\n                displayAlert.displayAlert('Logged in.');\r\n                asyncStorage.storeData(json);\r\n                this.setState({email: '', password: ''});\r\n                nav.navigate('TabNav');\r\n            })\r\n            .catch((error) => {\r\n                displayAlert.displayAlert(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { navigation } = this.props;\r\n        const { email, password, visible } = this.state;\r\n        const bgDark = \"darkBlue.700\";\r\n        const textColour = \"white\";\r\n        return (\r\n            <NativeBaseProvider>\r\n                <VStack flex={1} bg={bgDark} w=\"100%\" h=\"100%\">\r\n                    <Box alignItems=\"center\" py=\"50\" mt=\"100\">\r\n                        <Text bold fontSize=\"3xl\" color={textColour}>Spacebook.</Text>\r\n                    </Box>\r\n                    <Center>\r\n                        <Box mt=\"100\">\r\n                            <VStack alignItems=\"center\" space={2} w=\"100%\">\r\n                                <Input InputRightElement={<Icon as={<MaterialIcons name=\"person\"/>} \r\n                                    size={5} mr=\"2\" color={textColour}/>} placeholder=\"Email\" placeholderTextColor={textColour} color={textColour}\r\n                                    onChangeText={(newEmail) => this.setState({email: newEmail})} value={email}\r\n                                />\r\n                                <Input isRequired type={visible ? \"text\" : \"password\"}\r\n                                    InputRightElement={<Pressable onPress={() => this.setState({visible: !visible})}><Icon as={<MaterialIcons \r\n                                    name={visible ? \"visibility\" : \"visibility-off\"}/>} size={5} mr=\"2\" \r\n                                    color={textColour}/></Pressable>} placeholder=\"Password\" placeholderTextColor={textColour} color={textColour}\r\n                                    onChangeText={(newPass) => this.setState({password: newPass})} value={password}\r\n                                />\r\n                                <HStack w=\"100%\" justifyContent=\"space-between\">\r\n                                    <Button colorScheme='blueGray' w=\"45%\" onPress={() => this.login(navigation)}>Login</Button>\r\n                                    <Button colorScheme='blueGray' w=\"45%\" onPress={() => navigation.navigate('Signup')}>Sign up</Button>\r\n                                </HStack>\r\n                            </VStack>\r\n                        </Box>\r\n                    </Center>\r\n                </VStack>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nLoginScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}