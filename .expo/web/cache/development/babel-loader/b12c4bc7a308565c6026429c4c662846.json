{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"mappings":"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","names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","_ref","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","useContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addListenerParent","addListener","onDispatchAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","arguments","length","undefined","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","shouldFocus","shouldActionChangeFocus","i","listener"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useOnAction.js"],"sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction(_ref) {\n  let {\n    router,\n    getState,\n    setState,\n    key,\n    actionListeners,\n    beforeRemoveListeners,\n    routerConfigOptions,\n    emitter\n  } = _ref;\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction\n  } = React.useContext(NavigationBuilderContext);\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback(function (action) {\n    let visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    const state = getState(); // Since actions can bubble both up and down, they could come to the same navigator again\n    // We keep track of navigators which have already tried to handle the action and return if it's already visited\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current); // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      // Bubble action to the parent if the current navigator didn't handle it\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    } // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n\n\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}\n//# sourceMappingURL=useOnAction.js.map"]},"metadata":{},"sourceType":"module"}