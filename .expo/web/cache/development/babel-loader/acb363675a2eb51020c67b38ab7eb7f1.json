{"ast":null,"code":"import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContainerRefContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,EAA6BC,gBAA7B,EAA+CC,6BAA/C,QAAoF,wBAApF;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP;AACA,eAAe,SAASC,SAAT,GAAqB;AAClC,MAAMC,UAAU,GAAGH,KAAK,CAACI,UAAN,CAAiBL,6BAAjB,CAAnB;AACA,MAAMM,OAAO,GAAGL,KAAK,CAACI,UAAN,CAAiBH,cAAjB,CAAhB;AACA,MAAMK,MAAM,GAAGN,KAAK,CAACO,WAAN,CAAkB,YAAE,EAAI;AACrC,QAAIJ,UAAU,KAAKK,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CAAU,kFAAV,CAAN;AACD;;AAED,QAAI,OAAOC,EAAP,KAAc,QAAlB,EAA4B;AAE1BP,gBAAU,CAACQ,QAAX,CAAoBD,EAAE,CAACE,MAAvB,EAA+BF,EAAE,CAACG,MAAlC;AACA;AACD;;AAED,QAAI,CAACH,EAAE,CAACI,UAAH,CAAc,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIL,KAAJ,oCAA2CC,EAA3C,QAAN;AACD;;AAED,QACEK,OADF,GAEIV,OAFJ,CACEU,OADF;AAGA,QAAMC,KAAK,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,IAA0CA,OAAO,CAACjB,gBAAlD,GAAqEiB,OAAO,CAACjB,gBAAR,CAAyBY,EAAzB,EAA6BK,OAAO,CAACE,MAArC,CAArE,GAAoHnB,gBAAgB,CAACY,EAAD,EAAKK,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,MAA/D,CAAlJ;;AAEA,QAAID,KAAJ,EAAW;AACT,UAAME,MAAM,GAAGrB,kBAAkB,CAACmB,KAAD,EAAQD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,MAAlE,CAAjC;;AAEA,UAAIC,MAAM,KAAKV,SAAf,EAA0B;AACxBL,kBAAU,CAACgB,QAAX,CAAoBD,MAApB;AACD,OAFD,MAEO;AACLf,kBAAU,CAACiB,KAAX,CAAiBJ,KAAjB;AACD;AACF,KARD,MAQO;AACL,YAAM,IAAIP,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GA/Bc,EA+BZ,CAACJ,OAAD,EAAUF,UAAV,CA/BY,CAAf;AAgCA,SAAOG,MAAP;AACD","names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","undefined","Error","to","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/native/lib/module/useLinkTo.js"],"sourcesContent":["import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n  const linkTo = React.useCallback(to => {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      // @ts-expect-error: This is fine\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(`The path must start with '/' (${to}).`);\n    }\n\n    const {\n      options\n    } = linking;\n    const state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      const action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}\n//# sourceMappingURL=useLinkTo.js.map"]},"metadata":{},"sourceType":"module"}