{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar FeedScreen = function (_Component) {\n  _inherits(FeedScreen, _Component);\n\n  var _super = _createSuper(FeedScreen);\n\n  function FeedScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FeedScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      posts: [],\n      ids: [],\n      uploadModalVisible: false,\n      viewPostModalVisible: false,\n      postText: '',\n      currentPost: {},\n      editText: '',\n      editVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(FeedScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getIds();\n\n        navigation.addListener('focus', function () {\n          _this2.getIds();\n        });\n      });\n    }\n  }, {\n    key: \"getIds\",\n    value: function getIds() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var idList = [data.id];\n      console.log(data.id);\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        for (var i = 0; i < responseJson.length; i += 1) {\n          idList.push(responseJson[i].user_id);\n        }\n\n        _this3.setState({\n          ids: idList\n        });\n\n        _this3.getPosts();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"getPosts\",\n    value: function getPosts() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          ids = _this$state.ids;\n      var postsList = [];\n      var idList = ids;\n\n      for (var i = 0; i < idList.length; i += 1) {\n        fetch(\"http://localhost:3333/api/1.0.0/user/\" + idList[i] + \"/post\", {\n          method: 'GET',\n          headers: {\n            'X-Authorization': data.token\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (responseJson) {\n          if (responseJson.length > 0) {\n            for (var j = 0; j < responseJson.length; j += 1) {\n              postsList.push(responseJson[j]);\n\n              _this4.setState({\n                posts: postsList\n              });\n            }\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"uploadPost\",\n    value: function uploadPost() {\n      var _this5 = this;\n\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          postText = _this$state2.postText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: postText\n        })\n      }).then(function (response) {\n        if (response.status === 201) {\n          displayAlert.displayAlert('Post uploaded.');\n        } else {\n          displayAlert.displayAlert(response.statusText + \" \" + response.status);\n        }\n\n        _this5.getPosts();\n      });\n    }\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(postId) {\n      var _this6 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/ \" + postId, {\n        method: 'DELETE',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post deleted.');\n        } else {\n          displayAlert.displayAlert('You can only delete your own post.');\n        }\n\n        _this6.getPosts();\n\n        _this6.setState({\n          viewPostModalVisible: false\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"updatePost\",\n    value: function updatePost(postId) {\n      var _this7 = this;\n\n      var _this$state3 = this.state,\n          data = _this$state3.data,\n          editText = _this$state3.editText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/\" + postId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: editText\n        })\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post updated.');\n        } else {\n          displayAlert.displayAlert(response.statusText);\n        }\n\n        _this7.getPosts();\n\n        _this7.setState({\n          viewPostModalVisible: false\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"likePost\",\n    value: function likePost(userPostId, postId) {\n      var _this8 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + userPostId + \"/post/\" + postId + \"/like\", {\n        method: 'POST',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post liked');\n        } else if (response.status === 403) {\n          displayAlert.displayAlert('Cannot like your own posts.');\n        } else if (response.status === 400) {\n          displayAlert.displayAlert('Cannot like posts more than once or cannot unlike a post that has not been liked.');\n        }\n\n        _this8.getPosts();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"deleteLike\",\n    value: function deleteLike(userPostId, postId) {\n      var _this9 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + userPostId + \"/post/\" + postId + \"/like\", {\n        method: 'DELETE',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Post unliked');\n        } else {\n          displayAlert.displayAlert(response.statusText);\n        }\n\n        _this9.getPosts();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"viewPost\",\n    value: function viewPost() {\n      var _this10 = this;\n\n      var posts = this.state.posts;\n      return _jsx(FlatList, {\n        extraData: this.state,\n        data: posts,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsxs(Pressable, {\n            onPress: function onPress() {\n              _this10.setState({\n                viewPostModalVisible: true,\n                currentPost: item\n              });\n            },\n            children: [_jsxs(Text, {\n              children: [item.author.first_name, \" \", item.author.last_name]\n            }), _jsx(Text, {\n              children: _jsx(Moment, {\n                date: item.timestamp,\n                format: \"LLLL\"\n              })\n            }), _jsx(Text, {\n              children: item.text\n            }), _jsxs(Text, {\n              children: [\"Likes: \", item.numLikes]\n            })]\n          });\n        }\n      });\n    }\n  }, {\n    key: \"viewSinglePost\",\n    value: function viewSinglePost() {\n      var _this11 = this;\n\n      var _this$state4 = this.state,\n          data = _this$state4.data,\n          currentPost = _this$state4.currentPost,\n          editVisible = _this$state4.editVisible,\n          editText = _this$state4.editText;\n\n      if (Object.keys(currentPost).length > 0) {\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [currentPost.author.first_name, \" \", currentPost.author.last_name]\n          }), _jsx(Text, {\n            children: _jsx(Moment, {\n              data: currentPost.timestamp,\n              format: \"LLLL\"\n            })\n          }), _jsx(Text, {\n            children: currentPost.text\n          }), _jsxs(Text, {\n            children: [\"Likes: \", currentPost.numLikes]\n          }), editVisible && _jsxs(View, {\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter text\",\n              onChangeText: function onChangeText(newEditText) {\n                return _this11.setState({\n                  editText: newEditText\n                });\n              },\n              value: editText\n            }), _jsx(Button, {\n              title: \"Update\",\n              onPress: function onPress() {\n                return _this11.updatePost(currentPost.post_id);\n              }\n            })]\n          }), !editVisible && currentPost.author.user_id === data.id && _jsx(Button, {\n            title: \"Edit\",\n            onPress: function onPress() {\n              return _this11.setState({\n                editVisible: true\n              });\n            }\n          }), !editVisible && currentPost.author.user_id === data.id && _jsx(Button, {\n            title: \"Delete\",\n            onPress: function onPress() {\n              return _this11.deletePost(currentPost.post_id);\n            }\n          }), _jsx(Button, {\n            title: \"Cancel\",\n            onPress: function onPress() {\n              _this11.setState({\n                viewPostModalVisible: false,\n                editVisible: false,\n                editText: ''\n              });\n            }\n          }), !editVisible && _jsx(Button, {\n            title: \"Like\",\n            onPress: function onPress() {\n              return _this11.likePost(currentPost.author.user_id, currentPost.post_id);\n            }\n          }), !editVisible && _jsx(Button, {\n            title: \"Unlike\",\n            onPress: function onPress() {\n              return _this11.deleteLike(currentPost.author.user_id, currentPost.post_id);\n            }\n          })]\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this12 = this;\n\n      var _this$state5 = this.state,\n          uploadModalVisible = _this$state5.uploadModalVisible,\n          viewPostModalVisible = _this$state5.viewPostModalVisible,\n          postText = _this$state5.postText;\n      return _jsxs(View, {\n        children: [_jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: uploadModalVisible,\n          onRequestClose: function onRequestClose() {\n            _this12.setState({\n              uploadModalVisible: !uploadModalVisible\n            });\n          },\n          children: _jsxs(View, {\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter text...\",\n              onChangeText: function onChangeText(newPostText) {\n                return _this12.setState({\n                  postText: newPostText\n                });\n              },\n              value: postText\n            }), _jsx(Button, {\n              title: \"Post\",\n              onPress: function onPress() {\n                _this12.uploadPost();\n\n                _this12.setState({\n                  uploadModalVisible: false,\n                  postText: ''\n                });\n              }\n            })]\n          })\n        }), _jsxs(View, {\n          children: [this.viewPost(), _jsx(Button, {\n            title: \"Add post\",\n            onPress: function onPress() {\n              return _this12.setState({\n                uploadModalVisible: true\n              });\n            }\n          })]\n        }), _jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: viewPostModalVisible,\n          onRequestClose: function onRequestClose() {\n            _this12.setState({\n              viewPostModalVisible: !viewPostModalVisible\n            });\n          },\n          children: _jsx(View, {\n            children: this.viewSinglePost()\n          })\n        })]\n      });\n    }\n  }]);\n\n  return FeedScreen;\n}(Component);\n\nFeedScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FeedScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/FeedScreen.js"],"names":["React","Component","PropTypes","Moment","DisplayAlert","Storage","asyncStorage","displayAlert","FeedScreen","props","state","data","posts","ids","uploadModalVisible","viewPostModalVisible","postText","currentPost","editText","editVisible","navigation","getData","setState","getIds","addListener","idList","id","console","log","fetch","method","headers","token","then","response","json","responseJson","i","length","push","user_id","getPosts","catch","error","postsList","j","body","JSON","stringify","text","status","statusText","postId","userPostId","item","author","first_name","last_name","timestamp","numLikes","Object","keys","newEditText","updatePost","post_id","deletePost","likePost","deleteLike","newPostText","uploadPost","viewPost","viewSinglePost","propTypes","shape","navigate","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FlatList, Text, View, Modal, TextInput, Pressable } from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FeedScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            posts: [],\r\n            ids: [],\r\n            uploadModalVisible: false,\r\n            viewPostModalVisible: false,\r\n            postText: '',\r\n            currentPost: {},\r\n            editText: '',\r\n            editVisible: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getIds();\r\n            navigation.addListener('focus', () => {\r\n                this.getIds();\r\n            });\r\n        });\r\n        // getData((data) => {\r\n        //     this.setState({\r\n        //         data\r\n        //     });\r\n        //     this.getIds();\r\n        //     navigation.addListener('focus', () => {\r\n        //         this.getIds();\r\n        //     });\r\n        // });\r\n    }\r\n\r\n    getIds(){\r\n        const { data } = this.state;\r\n        const idList = [data.id];\r\n        console.log(data.id);\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            for (let i = 0; i < responseJson.length; i+=1){\r\n                idList.push(responseJson[i].user_id);\r\n            }\r\n            this.setState({ids: idList});\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getPosts(){\r\n        const { data, ids } = this.state;\r\n        const postsList = [];\r\n        const idList = ids;\r\n        for (let i = 0; i < idList.length; i+=1){\r\n            fetch(`http://localhost:3333/api/1.0.0/user/${ idList[i] }/post`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'X-Authorization': data.token\r\n                }\r\n            })\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                if (responseJson.length > 0){\r\n                    for (let j=0;j<responseJson.length;j+=1){\r\n                        postsList.push(responseJson[j])\r\n                        this.setState({\r\n                            posts: postsList\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    uploadPost(){\r\n        const { data, postText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({\r\n                text: postText\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 201){\r\n                displayAlert.displayAlert('Post uploaded.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(`${ response.statusText } ${ response.status }`)\r\n            }\r\n            this.getPosts();\r\n        })\r\n    }\r\n\r\n    deletePost(postId) {\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/ ${ postId }`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post deleted.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert('You can only delete your own post.');\r\n            }\r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false});\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    updatePost(postId) {\r\n        const { data, editText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/${ postId }`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({text: editText})\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post updated.');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(response.statusText);\r\n            }\r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false})\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    likePost(userPostId, postId){\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ userPostId }/post/${ postId }/like`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post liked');\r\n            }\r\n            else if (response.status === 403) {\r\n                displayAlert.displayAlert('Cannot like your own posts.');\r\n            }\r\n            else if (response.status === 400) {\r\n                displayAlert.displayAlert('Cannot like posts more than once or cannot unlike a post that has not been liked.')\r\n            }\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    deleteLike(userPostId, postId) {\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ userPostId }/post/${ postId }/like`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Post unliked');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(response.statusText);\r\n            }\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    viewPost(){\r\n        const { posts } = this.state;\r\n        return (\r\n            <FlatList extraData={this.state} data={posts}\r\n                renderItem={({item}) => (\r\n                    <Pressable onPress={() => {this.setState({viewPostModalVisible: true, currentPost: item})}}>\r\n                        <Text>{item.author.first_name} {item.author.last_name}</Text>\r\n                        <Text><Moment date={item.timestamp} format=\"LLLL\"/></Text>\r\n                        <Text>{item.text}</Text>\r\n                        <Text>Likes: {item.numLikes}</Text>\r\n                    </Pressable>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n\r\n    viewSinglePost(){\r\n        const { data, currentPost, editVisible, editText } = this.state;\r\n        if(Object.keys(currentPost).length > 0){\r\n            return (\r\n                <View>\r\n                    {/* <Text>{currentPost.post_id}</Text> */}\r\n                    <Text>{currentPost.author.first_name} {currentPost.author.last_name}</Text>\r\n                    <Text><Moment data={currentPost.timestamp} format=\"LLLL\"/></Text>\r\n                    <Text>{currentPost.text}</Text>\r\n                    <Text>Likes: {currentPost.numLikes}</Text>\r\n                    {editVisible && \r\n                        <View>\r\n                            <TextInput placeholder='Enter text' onChangeText={(newEditText) => this.setState({editText: newEditText})} value={editText}/>\r\n                            <Button title='Update' onPress={() => this.updatePost(currentPost.post_id)}/>\r\n                        </View>}\r\n                    {!editVisible && (currentPost.author.user_id === data.id) && <Button title='Edit' onPress={() => this.setState({editVisible: true})}/>}\r\n                    {!editVisible && (currentPost.author.user_id === data.id) && <Button title='Delete' onPress={() => this.deletePost(currentPost.post_id)}/>}\r\n                    <Button title='Cancel' onPress={() => {this.setState({viewPostModalVisible: false, editVisible: false, editText: ''})}}/>\r\n                    {!editVisible && <Button title='Like' onPress={() => this.likePost(currentPost.author.user_id,currentPost.post_id)}/>}\r\n                    {!editVisible && <Button title='Unlike' onPress={() => this.deleteLike(currentPost.author.user_id,currentPost.post_id)}/>}\r\n                </View>\r\n            )\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render(){\r\n        const { uploadModalVisible, viewPostModalVisible, postText } = this.state;\r\n        return (\r\n            <View>\r\n                <Modal animationType='none' \r\n                    transparent\r\n                    visible={uploadModalVisible} \r\n                    onRequestClose={() => {\r\n                        // displayAlert.displayAlert('')\r\n                        this.setState({uploadModalVisible: !uploadModalVisible});\r\n                    }}\r\n                >\r\n                    <View>\r\n                        <TextInput placeholder='Enter text...' onChangeText={(newPostText) => this.setState({postText: newPostText})} value={postText}/>\r\n                        <Button title='Post' onPress={() => {\r\n                            this.uploadPost();\r\n                            this.setState({uploadModalVisible: false, postText: ''})\r\n                        }}/>\r\n                    </View>\r\n                </Modal>\r\n                <View>\r\n                    {this.viewPost()}\r\n                    <Button title='Add post' onPress={() => this.setState({uploadModalVisible: true})}/>\r\n                </View>\r\n                <Modal animationType='none'\r\n                    transparent\r\n                    visible={viewPostModalVisible}\r\n                    onRequestClose={() => {\r\n                        this.setState({viewPostModalVisible: !viewPostModalVisible});\r\n                    }}\r\n                >\r\n                    <View>\r\n                        {this.viewSinglePost()}\r\n                    </View>\r\n                </Modal>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nFeedScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FeedScreen;"]},"metadata":{},"sourceType":"module"}