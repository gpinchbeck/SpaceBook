{"ast":null,"code":"import ReactNativePlatform from \"react-native-web/dist/exports/Platform\";\nimport { isDOMAvailable, canUseEventListeners, canUseViewport, isAsyncDebugging } from \"./environment/browser\";\nvar Platform = {\n  OS: ReactNativePlatform.OS,\n  select: ReactNativePlatform.select,\n  isDOMAvailable: isDOMAvailable,\n  canUseEventListeners: canUseEventListeners,\n  canUseViewport: canUseViewport,\n  isAsyncDebugging: isAsyncDebugging\n};\nexport default Platform;","map":{"version":3,"mappings":";AACA,SAASA,cAAT,EAAyBC,oBAAzB,EAA+CC,cAA/C,EAA+DC,gBAA/D;AACA,IAAMC,QAAQ,GAAG;AAKbC,IAAE,EAAEC,mBAAmB,CAACD,EALX;AAcbE,QAAM,EAAED,mBAAmB,CAACC,MAdf;AAmBbP,gBAAc,EAAdA,cAnBa;AAyBbC,sBAAoB,EAApBA,oBAzBa;AA+BbC,gBAAc,EAAdA,cA/Ba;AAoCbC,kBAAgB,EAAhBA;AApCa,CAAjB;AAsCA,eAAeC,QAAf","names":["isDOMAvailable","canUseEventListeners","canUseViewport","isAsyncDebugging","Platform","OS","ReactNativePlatform","select"],"sourceRoot":"","sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/expo-modules-core/build/Platform.js"],"sourcesContent":["import { Platform as ReactNativePlatform } from 'react-native';\nimport { isDOMAvailable, canUseEventListeners, canUseViewport, isAsyncDebugging, } from './environment/browser';\nconst Platform = {\n    /**\n     * Denotes the currently running platform.\n     * Can be one of ios, android, web.\n     */\n    OS: ReactNativePlatform.OS,\n    /**\n     * Returns the value with the matching platform.\n     * Object keys can be any of ios, android, native, web, default.\n     *\n     * @ios ios, native, default\n     * @android android, native, default\n     * @web web, default\n     */\n    select: ReactNativePlatform.select,\n    /**\n     * Denotes if the DOM API is available in the current environment.\n     * The DOM is not available in native React runtimes and Node.js.\n     */\n    isDOMAvailable,\n    /**\n     * Denotes if the current environment can attach event listeners\n     * to the window. This will return false in native React\n     * runtimes and Node.js.\n     */\n    canUseEventListeners,\n    /**\n     * Denotes if the current environment can inspect properties of the\n     * screen on which the current window is being rendered. This will\n     * return false in native React runtimes and Node.js.\n     */\n    canUseViewport,\n    /**\n     * If the JavaScript is being executed in a remote JavaScript environment.\n     * When `true`, synchronous native invocations cannot be executed.\n     */\n    isAsyncDebugging,\n};\nexport default Platform;\n//# sourceMappingURL=Platform.js.map"]},"metadata":{},"sourceType":"module"}