{"ast":null,"code":"import * as React from 'react';\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nexport var ScheduleUpdateContext = React.createContext({\n  scheduleUpdate: function scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates: function flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\nexport default function useScheduleUpdate(callback) {\n  var _React$useContext = React.useContext(ScheduleUpdateContext),\n      scheduleUpdate = _React$useContext.scheduleUpdate,\n      flushUpdates = _React$useContext.flushUpdates;\n\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAMC,qBAAqB,GAAG,mCAA9B;AACA,OAAO,IAAMC,qBAAqB,GAAgBF,KAAK,CAACG,aAAN,CAAoB;AACpEC,gBADoE,4BACnD;AACf,UAAM,IAAIC,KAAJ,CAAUJ,qBAAV,CAAN;AACD,GAHmE;AAKpEK,cALoE,0BAKrD;AACb,UAAM,IAAID,KAAJ,CAAUJ,qBAAV,CAAN;AACD;AAPmE,CAApB,CAA3C;AAkBP,eAAe,SAASM,iBAAT,CAA2BC,QAA3B,EAAqC;AAClD,0BAGIR,KAAK,CAACS,UAAN,CAAiBP,qBAAjB,CAHJ;AAAA,MACEE,cADF,qBACEA,cADF;AAAA,MAEEE,YAFF,qBAEEA,YAFF;;AAIAF,gBAAc,CAACI,QAAD,CAAd;AACAR,OAAK,CAACU,SAAN,CAAgBJ,YAAhB;AACD","names":["React","MISSING_CONTEXT_ERROR","ScheduleUpdateContext","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","useContext","useEffect"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/useScheduleUpdate.js"],"sourcesContent":["import * as React from 'react';\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nexport const ScheduleUpdateContext = /*#__PURE__*/React.createContext({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n\n});\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\n\nexport default function useScheduleUpdate(callback) {\n  const {\n    scheduleUpdate,\n    flushUpdates\n  } = React.useContext(ScheduleUpdateContext);\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}\n//# sourceMappingURL=useScheduleUpdate.js.map"]},"metadata":{},"sourceType":"module"}