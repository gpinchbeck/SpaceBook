{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font\";\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\n\nexport function loadSingleFontAsync(name, input) {\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,cAAP;AACA,SAASC,WAAT;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOA,KAAK,IAAI,IAAhB;AACH,GAFD,MAGK,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAChC,WAAOA,KAAK,CAACC,GAAN,IAAaD,KAAK,CAACE,QAAnB,IAA+B,IAAtC;AACH;;AACD,SAAO,IAAP;AACH;;AACD,SAASC,qBAAT,CAA+BH,KAA/B,EAAsC;AAClC,SAAOA,KAAK,CAACI,OAAN,IAAiBN,WAAW,CAACO,IAApC;AACH;;AACD,OAAO,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AACzC,SAAO,KAAP;AACH;AACD,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACtC,MAAMR,GAAG,GAAGF,iBAAiB,CAACU,MAAD,CAA7B;AACA,MAAML,OAAO,GAAGD,qBAAqB,CAACM,MAAD,CAArC;;AACA,MAAI,CAACR,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC;AACjCS,2BAAuB,CAACT,GAAD,CAAvB;AACH;;AACD,SAAO;AACHA,OAAG,EAAEA,GADF;AAEHG,WAAO,EAAPA;AAFG,GAAP;AAIH;;AACD,SAASM,uBAAT,CAAiCD,MAAjC,EAAyC;AACrC,MAAIE,IAAI,GAAG,OAAOF,MAAlB;AACA,MAAIE,IAAI,KAAK,QAAb,EACIA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;AACJ,QAAM,IAAIb,UAAJ,mIAAiJe,IAAjJ,CAAN;AACH;;AACD,OAAO,SAAeG,mBAAf,CAAmCP,IAAnC,EAAyCQ,KAAzC;AAAA;AAAA;AAAA;AAAA;AACH,cAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAK,CAACd,GAAb,KAAqB,QAAlD,IAA8Dc,KAAK,CAACC,aAAxE,EAAuF;AACnFN,mCAAuB,CAACK,KAAD,CAAvB;AACH;;AAHE;AAAA,2CAIGlB,cAAc,CAACoB,SAAf,CAAyBV,IAAzB,EAA+BQ,KAA/B,CAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMP,OAAO,SAASG,iBAAT,CAA2BX,IAA3B,EAAiC;AACpC,SAAOA,IAAP;AACH","names":["CodedError","ExpoFontLoader","FontDisplay","uriFromFontSource","asset","uri","localUri","displayFromFontSource","display","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","loadSingleFontAsync","input","downloadAsync","loadAsync","getNativeFontName"],"sourceRoot":"","sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/expo-font/build/FontLoader.web.js"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nfunction uriFromFontSource(asset) {\n    if (typeof asset === 'string') {\n        return asset || null;\n    }\n    else if (typeof asset === 'object') {\n        return asset.uri || asset.localUri || null;\n    }\n    return null;\n}\nfunction displayFromFontSource(asset) {\n    return asset.display || FontDisplay.AUTO;\n}\nexport function fontFamilyNeedsScoping(name) {\n    return false;\n}\nexport function getAssetForSource(source) {\n    const uri = uriFromFontSource(source);\n    const display = displayFromFontSource(source);\n    if (!uri || typeof uri !== 'string') {\n        throwInvalidSourceError(uri);\n    }\n    return {\n        uri: uri,\n        display,\n    };\n}\nfunction throwInvalidSourceError(source) {\n    let type = typeof source;\n    if (type === 'object')\n        type = JSON.stringify(source, null, 2);\n    throw new CodedError(`ERR_FONT_SOURCE`, `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`);\n}\nexport async function loadSingleFontAsync(name, input) {\n    if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n        throwInvalidSourceError(input);\n    }\n    await ExpoFontLoader.loadAsync(name, input);\n}\nexport function getNativeFontName(name) {\n    return name;\n}\n//# sourceMappingURL=FontLoader.web.js.map"]},"metadata":{},"sourceType":"module"}