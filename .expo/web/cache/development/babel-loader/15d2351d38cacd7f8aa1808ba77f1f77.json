{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme2 = require(\"./useTheme\");\n\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      _props$fontStyle = props.fontStyle,\n      fontStyle = _props$fontStyle === void 0 ? 'normal' : _props$fontStyle,\n      _props$fontWeight = props.fontWeight,\n      fontWeight = _props$fontWeight === void 0 ? 400 : _props$fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _useTheme = (0, _useTheme2.useTheme)(),\n      fontConfig = _useTheme.fontConfig,\n      fontWeights = _useTheme.fontWeights,\n      fonts = _useTheme.fonts;\n\n  if (fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"mappings":"AAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA8B,YAA9B,EAA2C;AAACC,OAAK,EAAC;AAAP,CAA3C;AAAyDD,OAAO,CAACE,qBAAR,GAA8BA,qBAA9B;;AAAoD,IAAIC,UAAU,GAACC,OAAO,cAAtB;;AAAqC,SAASF,qBAAT,CAA+BG,KAA/B,EAAqC;AAAC,MAAIC,UAAU,GAACD,KAAK,CAACC,UAArB;AAAA,MAAgCC,gBAAgB,GAACF,KAAK,CAACG,SAAvD;AAAA,MAAiEA,SAAS,GAACD,gBAAgB,KAAG,KAAK,CAAxB,GAA0B,QAA1B,GAAmCA,gBAA9G;AAAA,MAA+HE,iBAAiB,GAACJ,KAAK,CAACK,UAAvJ;AAAA,MAAkKA,UAAU,GAACD,iBAAiB,KAAG,KAAK,CAAzB,GAA2B,GAA3B,GAA+BA,iBAA5M;AAA8N,MAAIE,aAAa,GAACL,UAAlB;AAA6B,MAAIM,YAAY,GAACJ,SAAjB;AAA2B,MAAIK,aAAa,GAACH,UAAlB;;AAA6B,MAAII,SAAS,GAAC,CAAC,GAAEX,UAAU,CAACY,QAAd,GAAd;AAAA,MAAwCC,UAAU,GAACF,SAAS,CAACE,UAA7D;AAAA,MAAwEC,WAAW,GAACH,SAAS,CAACG,WAA9F;AAAA,MAA0GC,KAAK,GAACJ,SAAS,CAACI,KAA1H;;AAAgI,MAAGZ,UAAU,IAAEA,UAAU,IAAIY,KAA7B,EAAmC;AAAC,QAAIC,SAAS,GAACD,KAAK,CAACZ,UAAD,CAAnB;;AAAgC,QAAGU,UAAU,IAAEA,UAAU,CAACG,SAAD,CAAzB,EAAqC;AAACN,mBAAa,GAACO,SAAd;AAAwBR,kBAAY,GAACQ,SAAb;AAAuB,UAAIC,gBAAgB,GAACX,UAAU,IAAIO,WAAd,GAA0BA,WAAW,CAACP,UAAD,CAArC,GAAkDA,UAAvE;AAAkF,UAAIY,WAAW,GAACN,UAAU,CAACG,SAAD,CAAV,CAAsBE,gBAAtB,CAAhB;;AAAwD,UAAG,OAAOC,WAAP,KAAqB,QAAxB,EAAiC;AAAC,YAAGA,WAAW,CAACd,SAAD,CAAd,EAA0BG,aAAa,GAACW,WAAW,CAACd,SAAD,CAAzB;AAAsC,OAAlG,MAAsG;AAACG,qBAAa,GAACW,WAAd;AAA2B;AAAC,KAAlW,MAAsW;AAACX,mBAAa,GAACO,KAAK,CAACZ,UAAD,CAAnB;AAAiC;AAAC;;AAAA,SAAM;AAACA,cAAU,EAACK,aAAZ;AAA0BD,cAAU,EAACG,aAArC;AAAmDL,aAAS,EAACI;AAA7D,GAAN;AAAkF","names":["Object","defineProperty","exports","value","useResolvedFontFamily","_useTheme2","require","props","fontFamily","_props$fontStyle","fontStyle","_props$fontWeight","fontWeight","newFontFamily","newFontStyle","newFontWeight","_useTheme","useTheme","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/native-base/lib/commonjs/hooks/useResolvedFontFamily.js"],"sourcesContent":["Object.defineProperty(exports,\"__esModule\",{value:true});exports.useResolvedFontFamily=useResolvedFontFamily;var _useTheme2=require(\"./useTheme\");function useResolvedFontFamily(props){var fontFamily=props.fontFamily,_props$fontStyle=props.fontStyle,fontStyle=_props$fontStyle===void 0?'normal':_props$fontStyle,_props$fontWeight=props.fontWeight,fontWeight=_props$fontWeight===void 0?400:_props$fontWeight;var newFontFamily=fontFamily;var newFontStyle=fontStyle;var newFontWeight=fontWeight;var _useTheme=(0,_useTheme2.useTheme)(),fontConfig=_useTheme.fontConfig,fontWeights=_useTheme.fontWeights,fonts=_useTheme.fonts;if(fontFamily&&fontFamily in fonts){var fontToken=fonts[fontFamily];if(fontConfig&&fontConfig[fontToken]){newFontWeight=undefined;newFontStyle=undefined;var fontWeightNumber=fontWeight in fontWeights?fontWeights[fontWeight]:fontWeight;var fontVariant=fontConfig[fontToken][fontWeightNumber];if(typeof fontVariant==='object'){if(fontVariant[fontStyle])newFontFamily=fontVariant[fontStyle];}else{newFontFamily=fontVariant;}}else{newFontFamily=fonts[fontFamily];}}return{fontFamily:newFontFamily,fontWeight:newFontWeight,fontStyle:newFontStyle};}\n//# sourceMappingURL=useResolvedFontFamily.js.map"]},"metadata":{},"sourceType":"script"}