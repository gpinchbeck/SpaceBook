{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport createMultiStyleIconSet from \"./createMultiStyleIconSet\";\nexport var FA5Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand'\n};\nexport function createFA5iconSet(glyphMap) {\n  var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var fonts = arguments.length > 2 ? arguments[2] : undefined;\n  var pro = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var metadataKeys = Object.keys(metadata);\n  var fontFamily = \"FontAwesome5\" + (pro ? 'Pro' : 'Free');\n\n  function fallbackFamily(glyph) {\n    for (var i = 0; i < metadataKeys.length; i += 1) {\n      var family = metadataKeys[i];\n\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n\n    return 'regular';\n  }\n\n  function glyphValidator(glyph, style) {\n    var family = style === 'brand' ? 'brands' : style;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n\n  function createFontAwesomeStyle(styleName, fontWeight) {\n    var family = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fontFamily;\n    var fontFile = fonts[styleName];\n    return {\n      fontFamily: family + \"-\" + styleName,\n      fontFile: fontFile,\n      fontStyle: Platform.select({\n        ios: {\n          fontWeight: fontWeight\n        },\n        default: {}\n      }),\n      glyphMap: glyphMap\n    };\n  }\n\n  var brandIcons = createFontAwesomeStyle('Brand', '400');\n  var lightIcons = createFontAwesomeStyle('Light', '100');\n  var regularIcons = createFontAwesomeStyle('Regular', '400');\n  var solidIcons = createFontAwesomeStyle('Solid', '700');\n  var Icon = createMultiStyleIconSet({\n    brand: brandIcons,\n    light: lightIcons,\n    regular: regularIcons,\n    solid: solidIcons\n  }, {\n    defaultStyle: 'regular',\n    fallbackFamily: fallbackFamily,\n    glyphValidator: glyphValidator\n  });\n  return Icon;\n}","map":{"version":3,"mappings":";AACA,OAAOA,uBAAP;AACA,OAAO,IAAMC,QAAQ,GAAG;AACpBC,SAAO,EAAE,SADW;AAEpBC,OAAK,EAAE,OAFa;AAGpBC,OAAK,EAAE,OAHa;AAIpBC,OAAK,EAAE;AAJa,CAAjB;AAMP,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAuE;AAAA,MAAnCC,QAAmC,uEAAxB,EAAwB;AAAA,MAApBC,KAAoB;AAAA,MAAbC,GAAa,uEAAP,KAAO;AAC1E,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAArB;AACA,MAAMM,UAAU,qBAAkBJ,GAAG,GAAG,KAAH,GAAW,MAAhC,CAAhB;;AACA,WAASK,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAAY,CAACO,MAAjC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;AAC7C,UAAME,MAAM,GAAGR,YAAY,CAACM,CAAD,CAA3B;;AACA,UAAIT,QAAQ,CAACW,MAAD,CAAR,CAAiBC,OAAjB,CAAyBJ,KAAzB,MAAoC,CAAC,CAAzC,EAA4C;AACxC,eAAOG,MAAM,KAAK,QAAX,GAAsB,OAAtB,GAAgCA,MAAvC;AACH;AACJ;;AACD,WAAO,SAAP;AACH;;AACD,WAASE,cAAT,CAAwBL,KAAxB,EAA+BM,KAA/B,EAAsC;AAClC,QAAMH,MAAM,GAAGG,KAAK,KAAK,OAAV,GAAoB,QAApB,GAA+BA,KAA9C;AACA,QAAIX,YAAY,CAACS,OAAb,CAAqBD,MAArB,MAAiC,CAAC,CAAtC,EACI,OAAO,KAAP;AACJ,WAAOX,QAAQ,CAACW,MAAD,CAAR,CAAiBC,OAAjB,CAAyBJ,KAAzB,MAAoC,CAAC,CAA5C;AACH;;AACD,WAASO,sBAAT,CAAgCC,SAAhC,EAA2CC,UAA3C,EAA4E;AAAA,QAArBN,MAAqB,uEAAZL,UAAY;AACxE,QAAIY,QAAQ,GAAGjB,KAAK,CAACe,SAAD,CAApB;AACA,WAAO;AACHV,gBAAU,EAAKK,MAAL,SAAeK,SADtB;AAEHE,cAAQ,EAARA,QAFG;AAGHC,eAAS,EAAEC,QAAQ,CAACC,MAAT,CAAgB;AACvBC,WAAG,EAAE;AACDL,oBAAU,EAAVA;AADC,SADkB;AAIvBM,eAAO,EAAE;AAJc,OAAhB,CAHR;AASHxB,cAAQ,EAARA;AATG,KAAP;AAWH;;AACD,MAAMyB,UAAU,GAAGT,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;AACA,MAAMU,UAAU,GAAGV,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;AACA,MAAMW,YAAY,GAAGX,sBAAsB,CAAC,SAAD,EAAY,KAAZ,CAA3C;AACA,MAAMY,UAAU,GAAGZ,sBAAsB,CAAC,OAAD,EAAU,KAAV,CAAzC;AACA,MAAMa,IAAI,GAAGpC,uBAAuB,CAAC;AACjCK,SAAK,EAAE2B,UAD0B;AAEjC7B,SAAK,EAAE8B,UAF0B;AAGjC/B,WAAO,EAAEgC,YAHwB;AAIjC9B,SAAK,EAAE+B;AAJ0B,GAAD,EAKjC;AACCE,gBAAY,EAAE,SADf;AAECtB,kBAAc,EAAdA,cAFD;AAGCM,kBAAc,EAAdA;AAHD,GALiC,CAApC;AAUA,SAAOe,IAAP;AACH","names":["createMultiStyleIconSet","FA5Style","regular","light","solid","brand","createFA5iconSet","glyphMap","metadata","fonts","pro","metadataKeys","Object","keys","fontFamily","fallbackFamily","glyph","i","length","family","indexOf","glyphValidator","style","createFontAwesomeStyle","styleName","fontWeight","fontFile","fontStyle","Platform","select","ios","default","brandIcons","lightIcons","regularIcons","solidIcons","Icon","defaultStyle"],"sourceRoot":"","sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@expo/vector-icons/build/createIconSetFromFontAwesome5.js"],"sourcesContent":["import { Platform } from 'react-native';\nimport createMultiStyleIconSet from './createMultiStyleIconSet';\nexport const FA5Style = {\n    regular: 'regular',\n    light: 'light',\n    solid: 'solid',\n    brand: 'brand',\n};\nexport function createFA5iconSet(glyphMap, metadata = {}, fonts, pro = false) {\n    const metadataKeys = Object.keys(metadata);\n    const fontFamily = `FontAwesome5${pro ? 'Pro' : 'Free'}`;\n    function fallbackFamily(glyph) {\n        for (let i = 0; i < metadataKeys.length; i += 1) {\n            const family = metadataKeys[i];\n            if (metadata[family].indexOf(glyph) !== -1) {\n                return family === 'brands' ? 'brand' : family;\n            }\n        }\n        return 'regular';\n    }\n    function glyphValidator(glyph, style) {\n        const family = style === 'brand' ? 'brands' : style;\n        if (metadataKeys.indexOf(family) === -1)\n            return false;\n        return metadata[family].indexOf(glyph) !== -1;\n    }\n    function createFontAwesomeStyle(styleName, fontWeight, family = fontFamily) {\n        let fontFile = fonts[styleName];\n        return {\n            fontFamily: `${family}-${styleName}`,\n            fontFile,\n            fontStyle: Platform.select({\n                ios: {\n                    fontWeight,\n                },\n                default: {},\n            }),\n            glyphMap,\n        };\n    }\n    const brandIcons = createFontAwesomeStyle('Brand', '400');\n    const lightIcons = createFontAwesomeStyle('Light', '100');\n    const regularIcons = createFontAwesomeStyle('Regular', '400');\n    const solidIcons = createFontAwesomeStyle('Solid', '700');\n    const Icon = createMultiStyleIconSet({\n        brand: brandIcons,\n        light: lightIcons,\n        regular: regularIcons,\n        solid: solidIcons,\n    }, {\n        defaultStyle: 'regular',\n        fallbackFamily,\n        glyphValidator,\n    });\n    return Icon;\n}\n//# sourceMappingURL=createIconSetFromFontAwesome5.js.map"]},"metadata":{},"sourceType":"module"}