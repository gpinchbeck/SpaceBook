{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport PropTypes from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar getData = function getData(done) {\n  var jsonValue, data;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@spacebook_details'));\n\n        case 3:\n          jsonValue = _context.sent;\n          data = JSON.parse(jsonValue);\n          return _context.abrupt(\"return\", done(data));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n          return _context.abrupt(\"return\", null);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar displayAlert = new DisplayAlert();\n\nvar SettingsScreen = function (_Component) {\n  _inherits(SettingsScreen, _Component);\n\n  var _super = _createSuper(SettingsScreen);\n\n  function SettingsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      userData: {},\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getUserData();\n      });\n    }\n  }, {\n    key: \"getUserData\",\n    value: function getUserData() {\n      var data, response, result;\n      return _regeneratorRuntime.async(function getUserData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              data = this.state.data;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': data.token\n                }\n              }));\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              result = _context2.sent;\n              this.setState({\n                userData: result\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"updateDetails\",\n    value: function updateDetails() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          userData = _this$state.userData,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          password = _this$state.password;\n      var toSend = {};\n      console.log(userData.first_name, firstName);\n\n      if (userData.first_name !== firstName) {\n        toSend.first_name = firstName;\n      }\n\n      if (userData.last_name !== lastName) {\n        toSend.last_name = lastName;\n      }\n\n      if (userData.email !== email) {\n        toSend.email = email;\n      }\n\n      if (password.length > 5) {\n        toSend.password = password;\n      }\n\n      console.log(data.id, data.token);\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify(toSend)\n      }).then(function (response) {\n        if (response.status === 200) {\n          displayAlert.displayAlert('Details updated');\n        } else {\n          displayAlert.displayAlert(response.statusText);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          email = _this$state2.email,\n          password = _this$state2.password;\n      return _jsxs(View, {\n        children: [_jsxs(View, {\n          children: [_jsx(TextInput, {\n            placeholder: \"Change first name\",\n            onChangeText: function onChangeText(newFirstName) {\n              return _this3.setState({\n                firstName: newFirstName\n              });\n            },\n            value: firstName\n          }), _jsx(TextInput, {\n            placeholder: \"Change last name\",\n            onChangeText: function onChangeText(newLastName) {\n              return _this3.setState({\n                lastName: newLastName\n              });\n            },\n            value: lastName\n          }), _jsx(TextInput, {\n            placeholder: \"Change email\",\n            onChangeText: function onChangeText(newEmail) {\n              return _this3.setState({\n                email: newEmail\n              });\n            },\n            value: email\n          }), _jsx(TextInput, {\n            placeholder: \"Change password\",\n            onChangeText: function onChangeText(newPassword) {\n              return _this3.setState({\n                password: newPassword\n              });\n            },\n            value: password\n          }), _jsx(Button, {\n            title: \"Update details\",\n            onPress: function onPress() {\n              return _this3.updateDetails();\n            }\n          })]\n        }), _jsx(View, {\n          children: _jsx(Button, {\n            title: \"Update picture\",\n            onPress: function onPress() {\n              return navigation.navigate('Upload');\n            }\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingsScreen;\n}(Component);\n\nSettingsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default SettingsScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/SettingsScreen.js"],"names":["React","Component","AsyncStorage","PropTypes","DisplayAlert","getData","done","getItem","jsonValue","data","JSON","parse","console","log","displayAlert","SettingsScreen","props","state","userData","firstName","lastName","email","password","setState","getUserData","fetch","id","method","headers","token","response","json","result","toSend","first_name","last_name","length","body","stringify","then","status","statusText","catch","error","navigation","newFirstName","newLastName","newEmail","newPassword","updateDetails","navigate","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, TextInput, Button } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport PropTypes from 'prop-types';\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\n\r\nconst getData = async (done) => {\r\n    try {\r\n        const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n        const data = JSON.parse(jsonValue);\r\n        return done(data);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return null;\r\n};\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass SettingsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            userData: {},\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getUserData();\r\n        });\r\n    }\r\n\r\n    async getUserData() {\r\n        const { data } = this.state;\r\n        const response = await fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n            method: 'get',\r\n            headers: {\r\n                'X-Authorization': data.token,\r\n            },\r\n        });\r\n        const result = await response.json();\r\n        this.setState({\r\n            userData: result,\r\n        });\r\n    }\r\n\r\n    updateDetails(){\r\n        const { data, userData, firstName, lastName, email, password } = this.state;\r\n        const toSend = {};\r\n\r\n        console.log(userData.first_name, firstName);\r\n\r\n        if (userData.first_name !== firstName){\r\n            toSend.first_name = firstName;\r\n        }\r\n        if (userData.last_name !== lastName){\r\n            toSend.last_name = lastName;\r\n        }\r\n        if (userData.email !== email){\r\n            toSend.email = email;\r\n        }\r\n        if (password.length > 5){\r\n            toSend.password = password;\r\n        }\r\n\r\n        console.log(data.id, data.token);\r\n\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token,\r\n            },\r\n            body: JSON.stringify(toSend)\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200){\r\n                displayAlert.displayAlert('Details updated');\r\n            }\r\n            else {\r\n                displayAlert.displayAlert(response.statusText);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { firstName, lastName, email, password } = this.state;\r\n        return(\r\n            <View>\r\n                <View>\r\n                    <TextInput placeholder='Change first name' onChangeText={(newFirstName) => this.setState({firstName: newFirstName})} value={firstName}/>\r\n                    <TextInput placeholder='Change last name' onChangeText={(newLastName) => this.setState({lastName: newLastName})} value={lastName}/>\r\n                    <TextInput placeholder='Change email' onChangeText={(newEmail) => this.setState({email: newEmail})} value={email}/>\r\n                    <TextInput placeholder='Change password' onChangeText={(newPassword) => this.setState({password: newPassword})} value={password}/>\r\n                    <Button title='Update details' onPress={() => this.updateDetails()}/>\r\n                </View>\r\n                <View>\r\n                    <Button title='Update picture' onPress={() => navigation.navigate('Upload')}/>\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nSettingsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default SettingsScreen;"]},"metadata":{},"sourceType":"module"}