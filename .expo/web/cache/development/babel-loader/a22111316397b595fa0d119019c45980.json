{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nvar BaseRouter = {\n  getStateForAction: function getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          var index = action.source ? state.routes.findIndex(function (r) {\n            return r.key === action.source;\n          }) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map(function (r, i) {\n              return i === index ? _objectSpread(_objectSpread({}, r), {}, {\n                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n              }) : r;\n            })\n          });\n        }\n\n      case 'RESET':\n        {\n          var nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {\n            return !state.routeNames.includes(route.name);\n          })) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {\n              return !state.routeNames.includes(name);\n            })) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(function (route) {\n                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                  key: route.name + \"-\" + nanoid()\n                });\n              })\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAMA,IAAMC,UAAU,GAAG;AACjBC,mBADiB,6BACCC,KADD,EACQC,MADR,EACgB;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,YAAL;AACE;AACE,cAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,GAAgBJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAuB,WAAC;AAAA,mBAAIC,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACG,MAArB;AAAA,WAAxB,CAAhB,GAAuEJ,KAAK,CAACG,KAA3F;;AAEA,cAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,iDAAYH,KAAZ;AACEK,kBAAM,EAAEL,KAAK,CAACK,MAAN,CAAaI,GAAb,CAAiB,UAACF,CAAD,EAAIG,CAAJ;AAAA,qBAAUA,CAAC,KAAKP,KAAN,mCAAmBI,CAAnB;AACjCI,sBAAM,kCAAOJ,CAAC,CAACI,MAAT,GACDV,MAAM,CAACW,OAAP,CAAeD,MADd;AAD2B,mBAI/BJ,CAJqB;AAAA,aAAjB;AADV;AAOD;;AAEH,WAAK,OAAL;AACE;AACE,cAAMM,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;AAEA,cAAIC,SAAS,CAACR,MAAV,CAAiBS,MAAjB,KAA4B,CAA5B,IAAiCD,SAAS,CAACR,MAAV,CAAiBU,IAAjB,CAAsB,eAAK;AAAA,mBAAI,CAACf,KAAK,CAACgB,UAAN,CAAiBC,QAAjB,CAA0BC,KAAK,CAACC,IAAhC,CAAL;AAAA,WAA3B,CAArC,EAA6G;AAC3G,mBAAO,IAAP;AACD;;AAED,cAAIN,SAAS,CAACO,KAAV,KAAoB,KAAxB,EAA+B;AAC7B,gBAAIpB,KAAK,CAACgB,UAAN,CAAiBF,MAAjB,KAA4BD,SAAS,CAACG,UAAV,CAAqBF,MAAjD,IAA2DD,SAAS,CAACG,UAAV,CAAqBD,IAArB,CAA0B,cAAI;AAAA,qBAAI,CAACf,KAAK,CAACgB,UAAN,CAAiBC,QAAjB,CAA0BE,IAA1B,CAAL;AAAA,aAA9B,CAA/D,EAAoI;AAClI,qBAAO,IAAP;AACD;;AAED,mDAAYN,SAAZ;AACER,oBAAM,EAAEQ,SAAS,CAACR,MAAV,CAAiBI,GAAjB,CAAqB,eAAK;AAAA,uBAAIS,KAAK,CAACV,GAAN,GAAYU,KAAZ,mCAAyBA,KAAzB;AACpCV,qBAAG,EAAKU,KAAK,CAACC,IAAX,SAAmBtB,MAAM;AADQ,kBAAJ;AAAA,eAA1B;AADV;AAKD;;AAED,iBAAOgB,SAAP;AACD;;AAEH;AACE,eAAO,IAAP;AA1CJ;AA4CD,GA9CgB;AAgDjBQ,yBAhDiB,mCAgDOpB,MAhDP,EAgDe;AAC9B,WAAOA,MAAM,CAACC,IAAP,KAAgB,UAAvB;AACD;AAlDgB,CAAnB;AAqDA,eAAeJ,UAAf","names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","routeNames","includes","route","name","stale","shouldActionChangeFocus"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/routers/lib/module/BaseRouter.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return { ...state,\n            routes: state.routes.map((r, i) => i === index ? { ...r,\n              params: { ...r.params,\n                ...action.payload.params\n              }\n            } : r)\n          };\n        }\n\n      case 'RESET':\n        {\n          const nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n\n            return { ...nextState,\n              routes: nextState.routes.map(route => route.key ? route : { ...route,\n                key: `${route.name}-${nanoid()}`\n              })\n            };\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n\n};\nexport default BaseRouter;\n//# sourceMappingURL=BaseRouter.js.map"]},"metadata":{},"sourceType":"module"}