{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\"];\nimport * as React from 'react';\nexport var CHILD_STATE = Symbol('CHILD_STATE');\nexport default function useRouteCache(routes) {\n  var cache = React.useMemo(function () {\n    return {\n      current: new Map()\n    };\n  }, []);\n\n  if (process.env.NODE_ENV === 'production') {\n    return routes;\n  }\n\n  cache.current = routes.reduce(function (acc, route) {\n    var previous = cache.current.get(route);\n\n    if (previous) {\n      acc.set(route, previous);\n    } else {\n      var state = route.state,\n          proxy = _objectWithoutProperties(route, _excluded);\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,OAAO,IAAMC,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;AAMP,eAAe,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAE5C,MAAMC,KAAK,GAAGL,KAAK,CAACM,OAAN,CAAc;AAAA,WAAO;AACjCC,aAAO,EAAE,IAAIC,GAAJ;AADwB,KAAP;AAAA,GAAd,EAEV,EAFU,CAAd;;AAIA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAEzC,WAAOP,MAAP;AACD;;AAEDC,OAAK,CAACE,OAAN,GAAgBH,MAAM,CAACQ,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC5C,QAAMC,QAAQ,GAAGV,KAAK,CAACE,OAAN,CAAcS,GAAd,CAAkBF,KAAlB,CAAjB;;AAEA,QAAIC,QAAJ,EAAc;AAEZF,SAAG,CAACI,GAAJ,CAAQH,KAAR,EAAeC,QAAf;AACD,KAHD,MAGO;AACL,UACEG,KADF,GAGIJ,KAHJ,CACEI,KADF;AAAA,UAEKC,KAFL,4BAGIL,KAHJ;;AAIAM,YAAM,CAACC,cAAP,CAAsBF,KAAtB,EAA6BlB,WAA7B,EAA0C;AACxCqB,kBAAU,EAAE,KAD4B;AAExCC,aAAK,EAAEL;AAFiC,OAA1C;AAIAL,SAAG,CAACI,GAAJ,CAAQH,KAAR,EAAeK,KAAf;AACD;;AAED,WAAON,GAAP;AACD,GAnBe,EAmBb,IAAIL,GAAJ,EAnBa,CAAhB;AAoBA,SAAOgB,KAAK,CAACC,IAAN,CAAWpB,KAAK,CAACE,OAAN,CAAcmB,MAAd,EAAX,CAAP;AACD","names":["React","CHILD_STATE","Symbol","useRouteCache","routes","cache","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","state","proxy","Object","defineProperty","enumerable","value","Array","from","values"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/useRouteCache.js"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\n\nexport default function useRouteCache(routes) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({\n    current: new Map()\n  }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const {\n        state,\n        ...proxy\n      } = route;\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}\n//# sourceMappingURL=useRouteCache.js.map"]},"metadata":{},"sourceType":"module"}