{"ast":null,"code":"import { CHILD_STATE } from \"./useRouteCache\";\nexport default function getFocusedRouteNameFromRoute(route) {\n  var _route$CHILD_STATE, _state$index;\n\n  var state = (_route$CHILD_STATE = route[CHILD_STATE]) !== null && _route$CHILD_STATE !== void 0 ? _route$CHILD_STATE : route.state;\n  var params = route.params;\n  var routeName = state ? state.routes[(_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name : typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT;AACA,eAAe,SAASC,4BAAT,CAAsCC,KAAtC,EAA6C;AAC1D,MAAIC,kBAAJ,EAAwBC,YAAxB;;AAGA,MAAMC,KAAK,GAAG,CAACF,kBAAkB,GAAGD,KAAK,CAACF,WAAD,CAA3B,MAA8C,IAA9C,IAAsDG,kBAAkB,KAAK,KAAK,CAAlF,GAAsFA,kBAAtF,GAA2GD,KAAK,CAACG,KAA/H;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;AACA,MAAMC,SAAS,GAAGF,KAAK,GACvBA,KAAK,CAACG,MAAN,CAEA,CAACJ,YAAY,GAAGC,KAAK,CAACI,KAAtB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GAAmEA,YAAnE,GAAkF,OAAOC,KAAK,CAACK,IAAb,KAAsB,QAAtB,IAAkCL,KAAK,CAACK,IAAN,KAAe,OAAjD,GAA2D,CAA3D,GAA+DL,KAAK,CAACG,MAAN,CAAaG,MAAb,GAAsB,CAFvK,EAE0KC,IAHnJ,GAIvB,QAAQN,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACO,MAA/D,MAA2E,QAA3E,GAAsFP,MAAM,CAACO,MAA7F,GAAsGC,SAJtG;AAKA,SAAOP,SAAP;AACD","names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","_route$CHILD_STATE","_state$index","state","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/getFocusedRouteNameFromRoute.js"],"sourcesContent":["import { CHILD_STATE } from './useRouteCache';\nexport default function getFocusedRouteNameFromRoute(route) {\n  var _route$CHILD_STATE, _state$index;\n\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = (_route$CHILD_STATE = route[CHILD_STATE]) !== null && _route$CHILD_STATE !== void 0 ? _route$CHILD_STATE : route.state;\n  const params = route.params;\n  const routeName = state ? // Get the currently active route name in the nested navigator\n  state.routes[// If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  (_state$index = state.index) !== null && _state$index !== void 0 ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name : // If state doesn't exist, we need to default to `screen` param if available\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}\n//# sourceMappingURL=getFocusedRouteNameFromRoute.js.map"]},"metadata":{},"sourceType":"module"}