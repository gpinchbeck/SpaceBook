{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAMC,kBAAkB,GAAG,EAA3B;AAKA,eAAe,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AACjD,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaJ,kBAAb,CAAjB;AACA,MAAMK,eAAe,GAAGN,KAAK,CAACK,MAAN,CAAa,KAAb,CAAxB;AACA,MAAME,YAAY,GAAGP,KAAK,CAACK,MAAN,CAAa,IAAb,CAArB;AACAL,OAAK,CAACQ,SAAN,CAAgB,YAAM;AACpBD,gBAAY,CAACE,OAAb,GAAuB,IAAvB;AACA,WAAO,YAAM;AACXF,kBAAY,CAACE,OAAb,GAAuB,KAAvB;AACD,KAFD;AAGD,GALD,EAKG,EALH;;AAOA,MAAIL,QAAQ,CAACK,OAAT,KAAqBR,kBAAzB,EAA6C;AAC3CG,YAAQ,CAACK,OAAT,GACA,OAAON,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YADtD;AAED;;AAED,wBAA0CH,KAAK,CAACU,QAAN,CAAeN,QAAQ,CAACK,OAAxB,CAA1C;AAAA;AAAA,MAAOE,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,MAAMC,QAAQ,GAAGb,KAAK,CAACc,WAAN,CAAkB;AAAA,WAAMV,QAAQ,CAACK,OAAf;AAAA,GAAlB,EAA0C,EAA1C,CAAjB;AACA,MAAMM,QAAQ,GAAGf,KAAK,CAACc,WAAN,CAAkB,eAAK,EAAI;AAC1C,QAAIE,KAAK,KAAKZ,QAAQ,CAACK,OAAnB,IAA8B,CAACF,YAAY,CAACE,OAAhD,EAAyD;AACvD;AACD;;AAEDL,YAAQ,CAACK,OAAT,GAAmBO,KAAnB;;AAEA,QAAI,CAACV,eAAe,CAACG,OAArB,EAA8B;AAC5BG,sBAAgB,CAACI,KAAD,CAAhB;AACD;AACF,GAVgB,EAUd,EAVc,CAAjB;AAWA,MAAMC,cAAc,GAAGjB,KAAK,CAACc,WAAN,CAAkB,kBAAQ,EAAI;AACnDR,mBAAe,CAACG,OAAhB,GAA0B,IAA1B;;AAEA,QAAI;AACFS,cAAQ;AACT,KAFD,SAEU;AACRZ,qBAAe,CAACG,OAAhB,GAA0B,KAA1B;AACD;AACF,GARsB,EAQpB,EARoB,CAAvB;AASA,MAAMU,YAAY,GAAGnB,KAAK,CAACc,WAAN,CAAkB,YAAM;AAC3C,QAAI,CAACP,YAAY,CAACE,OAAlB,EAA2B;AACzB;AACD;;AAIDG,oBAAgB,CAACR,QAAQ,CAACK,OAAV,CAAhB;AACD,GARoB,EAQlB,EARkB,CAArB;;AAWA,MAAIE,aAAa,KAAKP,QAAQ,CAACK,OAA/B,EAAwC;AACtCG,oBAAgB,CAACR,QAAQ,CAACK,OAAV,CAAhB;AACD;;AAED,MAAMO,KAAK,GAAGZ,QAAQ,CAACK,OAAvB;AACAT,OAAK,CAACoB,aAAN,CAAoBJ,KAApB;AACA,SAAO,CAACA,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACD","names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","useState","trackingState","setTrackingState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/useSyncState.js"],"sourcesContent":["import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\n\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    } // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n\n\n    setTrackingState(stateRef.current);\n  }, []); // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}\n//# sourceMappingURL=useSyncState.js.map"]},"metadata":{},"sourceType":"module"}