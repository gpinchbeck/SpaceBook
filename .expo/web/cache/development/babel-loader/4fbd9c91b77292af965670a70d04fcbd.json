{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useIsFocused() {\n  var navigation = useNavigation();\n\n  var _useState = useState(navigation.isFocused),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFocused = _useState2[0],\n      setIsFocused = _useState2[1];\n\n  var valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP;AAMA,eAAe,SAASC,YAAT,GAAwB;AACrC,MAAMC,UAAU,GAAGF,aAAa,EAAhC;;AACA,kBAAkCD,QAAQ,CAACG,UAAU,CAACC,SAAZ,CAA1C;AAAA;AAAA,MAAOA,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,aAAa,GAAGH,UAAU,CAACC,SAAX,EAAtB;;AAEA,MAAIA,SAAS,KAAKE,aAAlB,EAAiC;AAM/BD,gBAAY,CAACC,aAAD,CAAZ;AACD;;AAEDP,OAAK,CAACQ,SAAN,CAAgB,YAAM;AACpB,QAAMC,gBAAgB,GAAGL,UAAU,CAACM,WAAX,CAAuB,OAAvB,EAAgC;AAAA,aAAMJ,YAAY,CAAC,IAAD,CAAlB;AAAA,KAAhC,CAAzB;AACA,QAAMK,eAAe,GAAGP,UAAU,CAACM,WAAX,CAAuB,MAAvB,EAA+B;AAAA,aAAMJ,YAAY,CAAC,KAAD,CAAlB;AAAA,KAA/B,CAAxB;AACA,WAAO,YAAM;AACXG,sBAAgB;AAChBE,qBAAe;AAChB,KAHD;AAID,GAPD,EAOG,CAACP,UAAD,CAPH;AAQAJ,OAAK,CAACY,aAAN,CAAoBL,aAApB;AACA,SAAOA,aAAP;AACD","names":["React","useState","useNavigation","useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useIsFocused.js"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\n\nexport default function useIsFocused() {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () => setIsFocused(true));\n    const unsubscribeBlur = navigation.addListener('blur', () => setIsFocused(false));\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}\n//# sourceMappingURL=useIsFocused.js.map"]},"metadata":{},"sourceType":"module"}