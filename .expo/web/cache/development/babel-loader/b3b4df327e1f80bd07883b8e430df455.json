{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font.types\";\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from \"./FontLoader\";\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\" + getNativeFontName(fontFamily);\n}\nexport function isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function loadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context.next = 8;\n            break;\n          }\n\n          if (!source) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 3:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return loadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 7:\n          return _context.abrupt(\"return\");\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loadFontInNamespaceAsync(fontFamily, source) {\n  var asset;\n  return _regeneratorRuntime.async(function loadFontInNamespaceAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (source) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n        case 2:\n          if (!loaded[fontFamily]) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 4:\n          if (!loadPromises.hasOwnProperty(fontFamily)) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n        case 6:\n          asset = getAssetForSource(source);\n\n          loadPromises[fontFamily] = function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return _regeneratorRuntime.awrap(loadSingleFontAsync(fontFamily, asset));\n\n                  case 3:\n                    loaded[fontFamily] = true;\n\n                  case 4:\n                    _context2.prev = 4;\n                    delete loadPromises[fontFamily];\n                    return _context2.finish(4);\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]], Promise);\n          }();\n\n          _context3.next = 10;\n          return _regeneratorRuntime.awrap(loadPromises[fontFamily]);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function unloadAllAsync() {\n  var _i, _Object$keys, fontFamily;\n\n  return _regeneratorRuntime.async(function unloadAllAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoFontLoader.unloadAllAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n\n        case 2:\n          if (!Object.keys(loadPromises).length) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n        case 4:\n          for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n            fontFamily = _Object$keys[_i];\n            delete loaded[fontFamily];\n          }\n\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAllAsync());\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function unloadAsync(fontFamilyOrFontMap, options) {\n  var fontMap, names;\n  return _regeneratorRuntime.async(function unloadAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoFontLoader.unloadAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-font', 'unloadAsync');\n\n        case 2:\n          if (!(typeof fontFamilyOrFontMap === 'object')) {\n            _context5.next = 10;\n            break;\n          }\n\n          if (!options) {\n            _context5.next = 5;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n        case 5:\n          fontMap = fontFamilyOrFontMap;\n          names = Object.keys(fontMap);\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return unloadFontInNamespaceAsync(name, fontMap[name]);\n          })));\n\n        case 9:\n          return _context5.abrupt(\"return\");\n\n        case 10:\n          _context5.next = 12;\n          return _regeneratorRuntime.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n\n        case 12:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction unloadFontInNamespaceAsync(fontFamily, options) {\n  var nativeFontName;\n  return _regeneratorRuntime.async(function unloadFontInNamespaceAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (loaded[fontFamily]) {\n            _context6.next = 4;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 4:\n          delete loaded[fontFamily];\n\n        case 5:\n          nativeFontName = getNativeFontName(fontFamily);\n\n          if (nativeFontName) {\n            _context6.next = 8;\n            break;\n          }\n\n          throw new CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n        case 8:\n          _context6.next = 10;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAsync(nativeFontName, options));\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { FontDisplay };","map":{"version":3,"mappings":"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","names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","name","loadFontInNamespaceAsync","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sourceRoot":"","sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/expo-font/build/Font.js"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName, } from './FontLoader';\nconst loaded = {};\nconst loadPromises = {};\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.io/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily) {\n    if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n        return fontFamily;\n    }\n    if (!isLoaded(fontFamily)) {\n        if (__DEV__) {\n            if (isLoading(fontFamily)) {\n                console.error(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n            }\n            else {\n                console.error(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`);\n            }\n        }\n        return 'System';\n    }\n    return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily) {\n    return fontFamily in loaded;\n}\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily) {\n    return fontFamily in loadPromises;\n}\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(fontFamilyOrFontMap, source) {\n    if (typeof fontFamilyOrFontMap === 'object') {\n        if (source) {\n            throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        const fontMap = fontFamilyOrFontMap;\n        const names = Object.keys(fontMap);\n        await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n    }\n    return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nasync function loadFontInNamespaceAsync(fontFamily, source) {\n    if (!source) {\n        throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n    }\n    if (loaded[fontFamily]) {\n        return;\n    }\n    if (loadPromises.hasOwnProperty(fontFamily)) {\n        return loadPromises[fontFamily];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    const asset = getAssetForSource(source);\n    loadPromises[fontFamily] = (async () => {\n        try {\n            await loadSingleFontAsync(fontFamily, asset);\n            loaded[fontFamily] = true;\n        }\n        finally {\n            delete loadPromises[fontFamily];\n        }\n    })();\n    await loadPromises[fontFamily];\n}\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync() {\n    if (!ExpoFontLoader.unloadAllAsync) {\n        throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(loadPromises).length) {\n        throw new CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);\n    }\n    for (const fontFamily of Object.keys(loaded)) {\n        delete loaded[fontFamily];\n    }\n    await ExpoFontLoader.unloadAllAsync();\n}\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(fontFamilyOrFontMap, options) {\n    if (!ExpoFontLoader.unloadAsync) {\n        throw new UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n            throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        const fontMap = fontFamilyOrFontMap;\n        const names = Object.keys(fontMap);\n        await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n    }\n    return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\nasync function unloadFontInNamespaceAsync(fontFamily, options) {\n    if (!loaded[fontFamily]) {\n        return;\n    }\n    else {\n        delete loaded[fontFamily];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    const nativeFontName = getNativeFontName(fontFamily);\n    if (!nativeFontName) {\n        throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n    }\n    await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\nexport { FontDisplay };\n//# sourceMappingURL=Font.js.map"]},"metadata":{},"sourceType":"module"}