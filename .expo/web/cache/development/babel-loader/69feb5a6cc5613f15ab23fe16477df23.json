{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport PropTypes from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar SettingsScreen = function (_Component) {\n  _inherits(SettingsScreen, _Component);\n\n  var _super = _createSuper(SettingsScreen);\n\n  function SettingsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      userData: {},\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n    };\n    return _this;\n  }\n\n  _createClass(SettingsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getUserData();\n      });\n    }\n  }, {\n    key: \"getUserData\",\n    value: function getUserData() {\n      var data, response, result;\n      return _regeneratorRuntime.async(function getUserData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = this.state.data;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': data.token\n                }\n              }));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              result = _context.sent;\n              this.setState({\n                userData: result\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"updateDetails\",\n    value: function updateDetails() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          userData = _this$state.userData,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          password = _this$state.password;\n      var toSend = {};\n\n      if (userData.first_name !== firstName && firstName.length > 0) {\n        toSend.first_name = firstName;\n      }\n\n      if (userData.last_name !== lastName && lastName.length > 0) {\n        toSend.last_name = lastName;\n      }\n\n      if (userData.email !== email && email.length > 0) {\n        toSend.email = email;\n      }\n\n      if (password.length > 5) {\n        toSend.password = password;\n      }\n\n      if (Object.keys(toSend).length > 0) {\n        fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Authorization': data.token\n          },\n          body: JSON.stringify(toSend)\n        }).then(function (response) {\n          if (response.status === 200) {\n            displayAlert.displayAlert('Details updated');\n          } else {\n            displayAlert.displayAlert(response.statusText);\n          }\n        }).catch(function (error) {\n          console.log(error);\n        });\n      } else {\n        displayAlert.displayAlert('Must have at least one field entered to update and must be diferent.');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          email = _this$state2.email,\n          password = _this$state2.password;\n      return _jsxs(View, {\n        children: [_jsxs(View, {\n          children: [_jsx(TextInput, {\n            placeholder: \"Change first name\",\n            onChangeText: function onChangeText(newFirstName) {\n              return _this3.setState({\n                firstName: newFirstName\n              });\n            },\n            value: firstName\n          }), _jsx(TextInput, {\n            placeholder: \"Change last name\",\n            onChangeText: function onChangeText(newLastName) {\n              return _this3.setState({\n                lastName: newLastName\n              });\n            },\n            value: lastName\n          }), _jsx(TextInput, {\n            placeholder: \"Change email\",\n            onChangeText: function onChangeText(newEmail) {\n              return _this3.setState({\n                email: newEmail\n              });\n            },\n            value: email\n          }), _jsx(TextInput, {\n            placeholder: \"Change password\",\n            onChangeText: function onChangeText(newPassword) {\n              return _this3.setState({\n                password: newPassword\n              });\n            },\n            value: password\n          }), _jsx(Button, {\n            title: \"Update details\",\n            onPress: function onPress() {\n              return _this3.updateDetails();\n            }\n          })]\n        }), _jsx(View, {\n          children: _jsx(Button, {\n            title: \"Update picture\",\n            onPress: function onPress() {\n              return navigation.navigate('Upload');\n            }\n          })\n        })]\n      });\n    }\n  }]);\n\n  return SettingsScreen;\n}(Component);\n\nSettingsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default SettingsScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/SettingsScreen.js"],"names":["React","Component","PropTypes","DisplayAlert","Storage","asyncStorage","displayAlert","SettingsScreen","props","state","data","userData","firstName","lastName","email","password","getData","setState","getUserData","fetch","id","method","headers","token","response","json","result","toSend","first_name","length","last_name","Object","keys","body","JSON","stringify","then","status","statusText","catch","error","console","log","navigation","newFirstName","newLastName","newEmail","newPassword","updateDetails","navigate","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, TextInput, Button } from 'react-native';\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport PropTypes from 'prop-types';\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\n// const getData = async (done) => {\r\n//     try {\r\n//         const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n//         const data = JSON.parse(jsonValue);\r\n//         return done(data);\r\n//     } catch (e) {\r\n//         console.log(e);\r\n//     }\r\n//     return null;\r\n// };\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass SettingsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            userData: {},\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getUserData();\r\n        });\r\n    }\r\n\r\n    async getUserData() {\r\n        const { data } = this.state;\r\n        const response = await fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n            method: 'get',\r\n            headers: {\r\n                'X-Authorization': data.token,\r\n            },\r\n        });\r\n        const result = await response.json();\r\n        this.setState({\r\n            userData: result,\r\n        });\r\n    }\r\n\r\n    updateDetails(){\r\n        const { data, userData, firstName, lastName, email, password } = this.state;\r\n        const toSend = {};\r\n\r\n        if (userData.first_name !== firstName && firstName.length > 0){\r\n            toSend.first_name = firstName;\r\n        }\r\n        if (userData.last_name !== lastName && lastName.length > 0){\r\n            toSend.last_name = lastName;\r\n        }\r\n        if (userData.email !== email && email.length > 0){\r\n            toSend.email = email;\r\n        }\r\n        if (password.length > 5){\r\n            toSend.password = password;\r\n        }\r\n\r\n        if (Object.keys(toSend).length > 0) {\r\n            fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-Authorization': data.token,\r\n                },\r\n                body: JSON.stringify(toSend)\r\n            })\r\n            .then((response) => {\r\n                if (response.status === 200){\r\n                    displayAlert.displayAlert('Details updated');\r\n                }\r\n                else {\r\n                    displayAlert.displayAlert(response.statusText);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        }\r\n        else {\r\n            displayAlert.displayAlert('Must have at least one field entered to update and must be diferent.')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { firstName, lastName, email, password } = this.state;\r\n        return(\r\n            <View>\r\n                <View>\r\n                    <TextInput placeholder='Change first name' onChangeText={(newFirstName) => this.setState({firstName: newFirstName})} value={firstName}/>\r\n                    <TextInput placeholder='Change last name' onChangeText={(newLastName) => this.setState({lastName: newLastName})} value={lastName}/>\r\n                    <TextInput placeholder='Change email' onChangeText={(newEmail) => this.setState({email: newEmail})} value={email}/>\r\n                    <TextInput placeholder='Change password' onChangeText={(newPassword) => this.setState({password: newPassword})} value={password}/>\r\n                    <Button title='Update details' onPress={() => this.updateDetails()}/>\r\n                </View>\r\n                <View>\r\n                    <Button title='Update picture' onPress={() => navigation.navigate('Upload')}/>\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nSettingsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default SettingsScreen;"]},"metadata":{},"sourceType":"module"}