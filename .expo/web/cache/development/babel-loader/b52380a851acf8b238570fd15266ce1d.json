{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    _Dimensions$get$width = _Dimensions$get.width,\n    width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n    _Dimensions$get$heigh = _Dimensions$get.height,\n    height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\n\nvar initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  var children = _ref.children,\n      style = _ref.style;\n  return React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n    if (insets) {\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,SAASC,oBAAT,EAA+BC,qBAA/B,EAAsDC,gBAAtD,QAA8E,gCAA9E;;AACA,sBAGIC,UAAU,CAACC,GAAX,CAAe,QAAf,CAHJ;AAAA,4CACEC,KADF;AAAA,IACEA,KADF,sCACU,CADV;AAAA,4CAEEC,MAFF;AAAA,IAEEA,MAFF,sCAEW,CAFX;;AAOA,IAAMC,cAAc,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBT,oBAAoB,IAAI,IAAjD,GAAwD;AAC7EU,OAAK,EAAE;AACLC,KAAC,EAAE,CADE;AAELC,KAAC,EAAE,CAFE;AAGLP,SAAK,EAALA,KAHK;AAILC,UAAM,EAANA;AAJK,GADsE;AAO7EO,QAAM,EAAE;AACNC,OAAG,EAAE,CADC;AAENC,QAAI,EAAE,CAFA;AAGNC,SAAK,EAAE,CAHD;AAINC,UAAM,EAAE;AAJF;AAPqE,CAAxD,GAanBjB,oBAbJ;AAcA,eAAe,SAASkB,sBAAT,CAAgCC,IAAhC,EAAsC;AACnD,MACEC,QADF,GAGID,IAHJ,CACEC,QADF;AAAA,MAEEC,KAFF,GAGIF,IAHJ,CAEEE,KAFF;AAIA,SAAoBtB,KAAK,CAACuB,aAAN,CAAoBrB,qBAAqB,CAACsB,QAA1C,EAAoD,IAApD,EAA0D,gBAAM,EAAI;AACtF,QAAIV,MAAJ,EAAY;AAIV,aAAoBd,KAAK,CAACuB,aAAN,CAAoBE,IAApB,EAA0B;AAC5CH,aAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmBL,KAAnB;AADqC,OAA1B,EAEjBD,QAFiB,CAApB;AAGD;;AAED,WAAoBrB,KAAK,CAACuB,aAAN,CAAoBpB,gBAApB,EAAsC;AACxDK,oBAAc,EAAEA,cADwC;AAExDc,WAAK,EAAEA;AAFiD,KAAtC,EAGjBD,QAHiB,CAApB;AAID,GAdmB,CAApB;AAeD;AACDF,sBAAsB,CAACX,cAAvB,GAAwCA,cAAxC;AACA,IAAMkB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,WAAS,EAAE;AACTG,QAAI,EAAE;AADG;AADoB,CAAlB,CAAf","names":["React","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","Dimensions","get","width","height","initialMetrics","Platform","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","_ref","children","style","createElement","Consumer","View","styles","container","StyleSheet","create","flex"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/elements/lib/module/SafeAreaProviderCompat.js"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window'); // To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\n\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=SafeAreaProviderCompat.js.map"]},"metadata":{},"sourceType":"module"}