{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Icon, NativeBaseProvider } from 'native-base';\nimport FeedScreen from \"./FeedScreen\";\nimport FriendsScreen from \"./FriendsScreen\";\nimport ProfileScreen from \"./ProfileScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\n\nvar HomeScreen = function (_Component) {\n  _inherits(HomeScreen, _Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen() {\n    _classCallCheck(this, HomeScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(NativeBaseProvider, {\n        children: _jsxs(Tab.Navigator, {\n          initialRouteName: \"Feed\",\n          screenOptions: function screenOptions(_ref) {\n            var route = _ref.route;\n            return {\n              tabBarIcon: function tabBarIcon(_ref2) {\n                var focused = _ref2.focused,\n                    color = _ref2.color,\n                    size = _ref2.size;\n                var iconName;\n\n                if (route.name === 'Profile') {\n                  iconName = focused ? 'person' : 'person';\n                } else if (route.name === 'Feed') {\n                  iconName = focused ? 'article' : 'article';\n                } else if (route.name === 'Friends') {\n                  iconName = focused ? 'people' : 'people';\n                }\n\n                return _jsx(Icon, {\n                  as: _jsx(MaterialIcons, {\n                    name: iconName\n                  }),\n                  size: 5,\n                  color: color\n                });\n              },\n              tabBarActiveTintColor: '#0369a1',\n              tabBarInactiveTintColor: 'gray'\n            };\n          },\n          children: [_jsx(Tab.Screen, {\n            options: {\n              title: 'Friends',\n              headerStyle: {\n                backgroundColor: \"#002851\"\n              },\n              headerTintColor: '#fff',\n              headerTitleAlign: 'center',\n              headerTitleStyle: {\n                fontWeight: 'bold'\n              }\n            },\n            name: \"Friends\",\n            component: FriendsScreen\n          }), _jsx(Tab.Screen, {\n            options: {\n              title: 'Feed',\n              headerStyle: {\n                backgroundColor: \"#002851\"\n              },\n              headerTintColor: '#fff',\n              headerTitleAlign: 'center',\n              headerTitleStyle: {\n                fontWeight: 'bold'\n              }\n            },\n            name: \"Feed\",\n            component: FeedScreen\n          }), _jsx(Tab.Screen, {\n            options: {\n              title: 'Profile',\n              headerStyle: {\n                backgroundColor: \"#002851\"\n              },\n              headerTintColor: '#fff',\n              headerTitleAlign: 'center',\n              headerTitleStyle: {\n                fontWeight: 'bold'\n              }\n            },\n            name: \"Profile\",\n            component: ProfileScreen\n          })]\n        })\n      });\n    }\n  }]);\n\n  return HomeScreen;\n}(Component);\n\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/TabNav.js"],"names":["React","Component","createBottomTabNavigator","MaterialIcons","Icon","NativeBaseProvider","FeedScreen","FriendsScreen","ProfileScreen","Tab","HomeScreen","route","tabBarIcon","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","title","headerStyle","backgroundColor","headerTintColor","headerTitleAlign","headerTitleStyle","fontWeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport { Icon, NativeBaseProvider } from 'native-base';\r\n\r\nimport FeedScreen from './FeedScreen';\r\nimport FriendsScreen from './FriendsScreen';\r\nimport ProfileScreen from './ProfileScreen';\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nclass HomeScreen extends Component {\r\n    render(){\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Tab.Navigator\r\n                    initialRouteName='Feed'\r\n                    screenOptions={({ route }) => ({\r\n                        tabBarIcon: ({focused, color, size}) => {\r\n                            let iconName;\r\n                            if (route.name === 'Profile'){\r\n                                iconName = focused ? 'person' : 'person';\r\n                            } \r\n                            else if (route.name === 'Feed'){\r\n                                iconName = focused ? 'article' : 'article';\r\n                            }\r\n                            else if (route.name === 'Friends'){\r\n                                iconName = focused ? 'people' : 'people';\r\n                            }\r\n                            return <Icon as={<MaterialIcons name={iconName}/>} size={5} color={color}/>;\r\n                        },\r\n                        tabBarActiveTintColor: '#0369a1',\r\n                        tabBarInactiveTintColor: 'gray'\r\n                    })}\r\n                >\r\n                    <Tab.Screen options={{title: 'Friends', headerStyle: {backgroundColor: \"#002851\"}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontWeight: 'bold'}}} name=\"Friends\" component={FriendsScreen} />\r\n                    <Tab.Screen options={{title: 'Feed', headerStyle: {backgroundColor: \"#002851\"}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontWeight: 'bold'}}} name=\"Feed\" component={FeedScreen} />\r\n                    <Tab.Screen options={{title: 'Profile', headerStyle: {backgroundColor: \"#002851\"}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontWeight: 'bold'}}} name=\"Profile\" component={ProfileScreen} />\r\n                </Tab.Navigator>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}