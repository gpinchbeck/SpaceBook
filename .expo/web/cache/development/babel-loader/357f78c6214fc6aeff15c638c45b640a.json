{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar getData = function getData(done) {\n  var jsonValue, data;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('@spacebook_details'));\n\n        case 3:\n          jsonValue = _context.sent;\n          data = JSON.parse(jsonValue);\n          return _context.abrupt(\"return\", done(data));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n          return _context.abrupt(\"return\", null);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\n\nvar FeedScreen = function (_Component) {\n  _inherits(FeedScreen, _Component);\n\n  var _super = _createSuper(FeedScreen);\n\n  function FeedScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FeedScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(FeedScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getIds();\n\n        navigation.addListener('focus', function () {\n          _this2.getIds();\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoading) {\n        return _jsx(View, {\n          children: _jsx(ActivityIndicator, {\n            size: \"large\",\n            color: \"#00ff00\"\n          })\n        });\n      }\n\n      return _jsx(View, {\n        children: _jsx(Text, {\n          children: \"FeedScreen\"\n        })\n      });\n    }\n  }]);\n\n  return FeedScreen;\n}(Component);\n\nFeedScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FeedScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/FeedScreen.js"],"names":["React","Component","AsyncStorage","PropTypes","Moment","DisplayAlert","getData","done","getItem","jsonValue","data","JSON","parse","console","log","FeedScreen","props","state","isLoading","navigation","setState","getIds","addListener","propTypes","shape","navigate","func","isRequired"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEgBL,YAAY,CAACM,OAAb,CAAqB,oBAArB,CAFhB;;AAAA;AAEFC,UAAAA,SAFE;AAGFC,UAAAA,IAHE,GAGKC,IAAI,CAACC,KAAL,CAAWH,SAAX,CAHL;AAAA,2CAIDF,IAAI,CAACG,IAAD,CAJH;;AAAA;AAAA;AAAA;AAMRG,UAAAA,OAAO,CAACC,GAAR;;AANQ;AAAA,2CAQL,IARK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;IAWMC,U;;;;;AACF,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAHc;AAMjB;;;;WAED,6BAAmB;AAAA;;AACf,UAAQC,UAAR,GAAuB,KAAKH,KAA5B,CAAQG,UAAR;AACAb,MAAAA,OAAO,CAAC,UAACI,IAAD,EAAU;AACd,QAAA,MAAI,CAACU,QAAL,CAAc;AACVV,UAAAA,IAAI,EAAJA;AADU,SAAd;;AAGA,QAAA,MAAI,CAACW,MAAL;;AACAF,QAAAA,UAAU,CAACG,WAAX,CAAuB,OAAvB,EAAgC,YAAM;AAClC,UAAA,MAAI,CAACD,MAAL;AACH,SAFD;AAGH,OARM,CAAP;AASH;;;WAED,kBAAS;AACL,UAAI,KAAKJ,KAAL,CAAWC,SAAf,EAAyB;AACrB,eACI,KAAC,IAAD;AAAA,oBACI,KAAC,iBAAD;AACI,YAAA,IAAI,EAAC,OADT;AAEI,YAAA,KAAK,EAAC;AAFV;AADJ,UADJ;AAQH;;AACD,aACI,KAAC,IAAD;AAAA,kBACI,KAAC,IAAD;AAAA;AAAA;AADJ,QADJ;AAKH;;;;EAtCoBjB,S;;AAyCzBc,UAAU,CAACQ,SAAX,GAAuB;AACnBJ,EAAAA,UAAU,EAAEhB,SAAS,CAACqB,KAAV,CAAgB;AACxBC,IAAAA,QAAQ,EAAEtB,SAAS,CAACuB,IAAV,CAAeC,UADD;AAExBL,IAAAA,WAAW,EAAEnB,SAAS,CAACuB,IAAV,CAAeC;AAFJ,GAAhB,EAGTA;AAJgB,CAAvB;AAOA,eAAeZ,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FlatList, Text, View, Modal, TextInput, Pressable, ActivityIndicator } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst getData = async (done) => {\r\n    try {\r\n        const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n        const data = JSON.parse(jsonValue);\r\n        return done(data);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return null;\r\n};\r\n\r\nclass FeedScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: true\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getIds();\r\n            navigation.addListener('focus', () => {\r\n                this.getIds();\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading){\r\n            return (\r\n                <View>\r\n                    <ActivityIndicator\r\n                        size=\"large\"\r\n                        color=\"#00ff00\"\r\n                    />\r\n                </View>\r\n            );\r\n        } \r\n        return (\r\n            <View>\r\n                <Text>FeedScreen</Text>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nFeedScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FeedScreen;"]},"metadata":{},"sourceType":"module"}