{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP;AAKA,eAAe,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC3C,MACEC,KADF,GAGID,IAHJ,CACEC,KADF;AAAA,MAEEC,OAFF,GAGIF,IAHJ,CAEEE,OAFF;AAIA,MAAMC,UAAU,GAAGN,KAAK,CAACO,UAAN,CAAiBN,iBAAjB,CAAnB;AACA,MAAMO,iBAAiB,GAAGR,KAAK,CAACS,MAAN,EAA1B;AACA,MAAMC,iBAAiB,GAAGN,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACQ,KAAnB,EAA0BC,GAApD;AAGAb,OAAK,CAACc,SAAN,CAAgB;AAAA,WAAMR,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACS,WAAX,CAAuB,OAAvB,EAAgC,YAAM;AAClHP,uBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B;AACAL,aAAO,CAACY,IAAR,CAAa;AACXC,YAAI,EAAE,OADK;AAEXC,cAAM,EAAET;AAFG,OAAb;AAID,KAN6E,CAA9D;AAAA,GAAhB,EAMI,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANJ;AAOAN,OAAK,CAACc,SAAN,CAAgB;AAAA,WAAMR,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACS,WAAX,CAAuB,MAAvB,EAA+B,YAAM;AACjHP,uBAAiB,CAACQ,OAAlB,GAA4BI,SAA5B;AACAf,aAAO,CAACY,IAAR,CAAa;AACXC,YAAI,EAAE,MADK;AAEXC,cAAM,EAAET;AAFG,OAAb;AAID,KAN6E,CAA9D;AAAA,GAAhB,EAMI,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANJ;AAOAN,OAAK,CAACc,SAAN,CAAgB,YAAM;AACpB,QAAMO,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AACAR,qBAAiB,CAACQ,OAAlB,GAA4BN,iBAA5B;;AAGA,QAAIW,cAAc,KAAKD,SAAnB,IAAgC,CAACd,UAArC,EAAiD;AAC/CD,aAAO,CAACY,IAAR,CAAa;AACXC,YAAI,EAAE,OADK;AAEXC,cAAM,EAAET;AAFG,OAAb;AAID;;AAID,QAAIW,cAAc,KAAKX,iBAAnB,IAAwC,EAAEJ,UAAU,GAAGA,UAAU,CAACgB,SAAX,EAAH,GAA4B,IAAxC,CAA5C,EAA2F;AACzF;AACD;;AAED,QAAID,cAAc,KAAKD,SAAvB,EAAkC;AAEhC;AACD;;AAEDf,WAAO,CAACY,IAAR,CAAa;AACXC,UAAI,EAAE,MADK;AAEXC,YAAM,EAAEE;AAFG,KAAb;AAIAhB,WAAO,CAACY,IAAR,CAAa;AACXC,UAAI,EAAE,OADK;AAEXC,YAAM,EAAET;AAFG,KAAb;AAID,GA/BD,EA+BG,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA/BH;AAgCD","names":["React","NavigationContext","useFocusEvents","_ref","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useFocusEvents.js"],"sourcesContent":["import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents(_ref) {\n  let {\n    state,\n    emitter\n  } = _ref;\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef();\n  const currentFocusedKey = state.routes[state.index].key; // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', () => {\n    lastFocusedKeyRef.current = currentFocusedKey;\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', () => {\n    lastFocusedKeyRef.current = undefined;\n    emitter.emit({\n      type: 'blur',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey; // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    } // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n//# sourceMappingURL=useFocusEvents.js.map"]},"metadata":{},"sourceType":"module"}