{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = _defineProperty({}, fontName, expoAssetId);\n\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(\"\\\"\" + this.props.name + \"\\\" is not a valid icon name for family \\\"\" + fontName + \"\\\"\");\n        }\n\n        if (!this.state.fontIsLoaded) {\n          return _jsx(Text, {});\n        }\n\n        return _jsx(RNVIconComponent, _objectSpread({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props));\n      }\n    }]);\n\n    return Icon;\n  }(React.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAOC,aAAP;AACA,OAAOC,yBAAP;;AACA,SAASC,kBAAT,EAA6BC,iBAA7B;AACA,eAAe,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,SAA3C,EAAsD;AACjE,MAAIC,EAAJ;;AACA,MAAMC,IAAI,uBAAMJ,QAAN,EAAiBC,WAAjB,CAAV;;AACA,MAAMI,gBAAgB,GAAGV,aAAa,CAACI,QAAD,EAAWC,QAAX,EAAqB,IAArB,EAA2BE,SAA3B,CAAtC;AACA,SAAOC,EAAE;AAAA;;AAAA;;AACD,oBAAc;AAAA;;AAAA;;AACV,iCAASG,SAAT;AACA,YAAKC,QAAL,GAAgB,KAAhB;AACA,YAAKC,KAAL,GAAa;AACTC,oBAAY,EAAEhB,IAAI,CAACiB,QAAL,CAAcV,QAAd;AADL,OAAb;AAHU;AAMb;;AAPA;AAAA;AAAA,aAQD;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKO,QAAL,GAAgB,IAAhB;;AADJ,oBAES,KAAKC,KAAL,CAAWC,YAFpB;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAGchB,IAAI,CAACkB,SAAL,CAAeP,IAAf,CAHd;;AAAA;AAIQ,qBAAKG,QAAL,IAAiB,KAAKK,QAAL,CAAc;AAAEH,8BAAY,EAAE;AAAhB,iBAAd,CAAjB;;AAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARC;AAAA;AAAA,aAeD,gCAAuB;AACnB,aAAKF,QAAL,GAAgB,KAAhB;AACH;AAjBA;AAAA;AAAA,aAkBD,wBAAeM,KAAf,EAAsB;AAClB,YAAI,KAAKC,KAAT,EAAgB;AACZ,eAAKA,KAAL,CAAWC,cAAX,CAA0BF,KAA1B;AACH;AACJ;AAtBA;AAAA;AAAA,aAuBD,kBAAS;AAAA;;AACL,YAAIG,OAAO,IAAI,KAAKH,KAAL,CAAWI,IAAtB,IAA8B,EAAE,KAAKJ,KAAL,CAAWI,IAAX,IAAmBlB,QAArB,CAAlC,EAAkE;AAC9DmB,iBAAO,CAACC,IAAR,QAAiB,KAAKN,KAAL,CAAWI,IAA5B,iDAA0EjB,QAA1E;AACH;;AACD,YAAI,CAAC,KAAKQ,KAAL,CAAWC,YAAhB,EAA8B;AAC1B,iBAAO,KAAC,IAAD,KAAP;AACH;;AACD,eAAQ,KAAC,gBAAD;AAAkB,aAAG,EAAE,aAACW,IAAD,EAAU;AACrC,kBAAI,CAACN,KAAL,GAAaM,IAAb;AACH;AAFO,WAED,KAAKP,KAFJ,EAAR;AAGH;AAjCA;;AAAA;AAAA,IAAsBnB,KAAK,CAAC2B,SAA5B,CAAF,EAmCHlB,EAAE,CAACmB,YAAH,GAAkBjB,gBAAgB,CAACiB,YAnChC,EAoCHnB,EAAE,CAACoB,MAAH,GAAY3B,yBAAyB,CAACO,EAAD,CApClC,EAqCHA,EAAE,CAACJ,QAAH,GAAcA,QArCX,EAsCHI,EAAE,CAACqB,cAAH,GAAoB;AAAA,WAAMzB,QAAN;AAAA,GAtCjB,EAuCHI,EAAE,CAACsB,aAAH,GAAmB;AAAA,WAAMzB,QAAN;AAAA,GAvChB,EAwCHG,EAAE,CAACuB,QAAH,GAAc;AAAA,WAAMjC,IAAI,CAACkB,SAAL,CAAeP,IAAf,CAAN;AAAA,GAxCX,EAyCHD,EAAE,CAACC,IAAH,GAAUA,IAzCP,EA0CHD,EA1CJ;AA2CH","names":["Font","React","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","_a","font","RNVIconComponent","arguments","_mounted","state","fontIsLoaded","isLoaded","loadAsync","setState","props","_icon","setNativeProps","__DEV__","name","console","warn","view","Component","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont"],"sourceRoot":"","sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@expo/vector-icons/build/createIconSet.js"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React from \"react\";\nimport { Text, } from \"react-native\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE, } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n    var _a;\n    const font = { [fontName]: expoAssetId };\n    const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n    return _a = class Icon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this._mounted = false;\n                this.state = {\n                    fontIsLoaded: Font.isLoaded(fontName),\n                };\n            }\n            async componentDidMount() {\n                this._mounted = true;\n                if (!this.state.fontIsLoaded) {\n                    await Font.loadAsync(font);\n                    this._mounted && this.setState({ fontIsLoaded: true });\n                }\n            }\n            componentWillUnmount() {\n                this._mounted = false;\n            }\n            setNativeProps(props) {\n                if (this._icon) {\n                    this._icon.setNativeProps(props);\n                }\n            }\n            render() {\n                if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n                    console.warn(`\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`);\n                }\n                if (!this.state.fontIsLoaded) {\n                    return <Text />;\n                }\n                return (<RNVIconComponent ref={(view) => {\n                    this._icon = view;\n                }} {...this.props}/>);\n            }\n        },\n        _a.defaultProps = RNVIconComponent.defaultProps,\n        _a.Button = createIconButtonComponent(_a),\n        _a.glyphMap = glyphMap,\n        _a.getRawGlyphMap = () => glyphMap,\n        _a.getFontFamily = () => fontName,\n        _a.loadFont = () => Font.loadAsync(font),\n        _a.font = font,\n        _a;\n}\n//# sourceMappingURL=createIconSet.js.map"]},"metadata":{},"sourceType":"module"}