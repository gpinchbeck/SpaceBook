{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useButton } from \"./useButton\";\nimport { chain } from '@react-aria/utils';\nimport { mergeProps } from '@react-aria/utils';\nexport function useToggleButton(props, state) {\n  var isSelected = state.isSelected;\n\n  var _useButton = useButton(_objectSpread(_objectSpread({}, props), {}, {\n    onPress: chain(state.toggle, props.onPress)\n  })),\n      isPressed = _useButton.isPressed,\n      buttonProps = _useButton.buttonProps;\n\n  return {\n    isPressed: isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected,\n      'accessibilityPressed': isSelected\n    })\n  };\n}","map":{"version":3,"mappings":";;;;;;AAWA,SAASA,SAAT;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAMA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AAE5C,MACEC,UADF,GAEID,KAFJ,CACEC,UADF;;AAGA,mBAGIN,SAAS,iCAAMI,KAAN;AACXG,WAAO,EAAEN,KAAK,CAACI,KAAK,CAACG,MAAP,EAAeJ,KAAK,CAACG,OAArB;AADH,KAHb;AAAA,MACEE,SADF,cACEA,SADF;AAAA,MAEEC,WAFF,cAEEA,WAFF;;AAMA,SAAO;AACLD,aAAS,EAATA,SADK;AAELC,eAAW,EAAER,UAAU,CAACQ,WAAD,EAAc;AAEnC,sBAAgBJ,UAFmB;AAInC,8BAAwBA;AAJW,KAAd;AAFlB,GAAP;AASD","names":["useButton","chain","mergeProps","useToggleButton","props","state","isSelected","onPress","toggle","isPressed","buttonProps"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-native-aria/button/lib/module/useToggleButton.web.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { useButton } from './useButton';\nimport { chain } from '@react-aria/utils';\nimport { mergeProps } from '@react-aria/utils';\n\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props, state) {\n  /* eslint-enable no-redeclare */\n  const {\n    isSelected\n  } = state;\n  const {\n    isPressed,\n    buttonProps\n  } = useButton({ ...props,\n    onPress: chain(state.toggle, props.onPress)\n  });\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      // For v0.14+\n      'aria-pressed': isSelected,\n      // For v0.15+\n      'accessibilityPressed': isSelected\n    })\n  };\n}\n//# sourceMappingURL=useToggleButton.web.js.map"]},"metadata":{},"sourceType":"module"}