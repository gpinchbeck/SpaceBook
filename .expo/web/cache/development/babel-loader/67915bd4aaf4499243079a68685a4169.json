{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\n\nexport default function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":";;AAAA,IAAMA,YAAY,GAAG,SAAfA,YAAe,MAAK;AAAA,SAAIC,KAAK,CAACC,GAAN,CAAU,aAAG;AAAA,kBAASC,GAAT;AAAA,GAAb,EAA6BC,IAA7B,CAAkC,IAAlC,CAAJ;AAAA,CAA1B;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AACjD,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAA/E;AACA,MAAMG,SAAS,GAAG,CAAC,kBAAD,EAAqB,SAArB,CAAlB;;AAEA,MAAI,CAACJ,IAAL,EAAW;AACTI,aAAS,CAACC,IAAV,CAAe,MAAf,EAAuB,OAAvB,EAAgC,WAAhC,EAA6C,OAA7C;AACD;;AAED,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,CAA2B,aAAG;AAAA,WAAI,CAACL,SAAS,CAACM,QAAV,CAAmBd,GAAnB,CAAL;AAAA,GAA9B,CAApB;;AAEA,MAAIU,WAAW,CAACJ,MAAhB,EAAwB;AACtB,UAAM,IAAIS,KAAJ,sDAA6DlB,YAAY,CAACa,WAAD,CAAzE,0HAA2Mb,YAAY,CAACW,SAAD,CAAvN,4HAAN;AACD;;AAED,MAAIL,MAAM,CAACa,OAAX,EAAoB;AAClBL,UAAM,CAACM,OAAP,CAAed,MAAM,CAACa,OAAtB,EAA+BE,OAA/B,CAAuC,cAAI,EAAI;AAC7C,iCAAiBC,IAAjB;AAAA,UAAKC,CAAL;AAAA,UAAQC,KAAR;;AAEA,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BnB,0BAAkB,CAACmB,KAAD,EAAQ,KAAR,CAAlB;AACD;AACF,KAND;AAOD;AACF","names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_","value"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/validatePathConfig.js"],"sourcesContent":["const formatToList = items => items.map(key => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n//# sourceMappingURL=validatePathConfig.js.map"]},"metadata":{},"sourceType":"module"}