{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { PropTypes } from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar storeData = function storeData(value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function storeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('@spacebook_details', jsonValue));\n\n        case 4:\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar displayAlert = new DisplayAlert();\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen(props) {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    _this = _super.call(this, props);\n\n    _this.handleEmailInput = function (email) {\n      _this.setState({\n        email: email\n      });\n    };\n\n    _this.handlePasswordInput = function (password) {\n      _this.setState({\n        password: password\n      });\n    };\n\n    _this.state = {\n      email: 'gp@gp.com',\n      password: 'password'\n    };\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"emailIsValid\",\n    value: function emailIsValid() {\n      var email = this.state.email;\n      var myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n      if (myRe.exec(email)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"login\",\n    value: function login(nav) {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password;\n\n      if (email === '' || password === '') {\n        displayAlert.displayAlert('All fields must be entered.');\n      } else if (!this.emailIsValid()) {\n        displayAlert.displayAlert('Invalid email.');\n      } else {\n        fetch('http://localhost:3333/api/1.0.0/login', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password\n          })\n        }).then(function (response) {\n          if (response.status === 400) {\n            displayAlert.displayAlert('Incorrect email or password.');\n            return Promise.reject(new Error(\"Incorrect email or password. Status: \" + response.status));\n          }\n\n          if (response.status === 500) {\n            displayAlert.displayAlert('Server error.');\n            return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n          }\n\n          return response.json();\n        }).then(function (json) {\n          if (json === {}) {\n            console.log(\"hm\");\n          }\n\n          displayAlert.displayAlert('Logged in.');\n          storeData(json);\n\n          _this2.setState({\n            email: '',\n            password: ''\n          });\n\n          nav.navigate('Home');\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password;\n      return _jsxs(View, {\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter email...\",\n          onChangeText: this.handleEmailInput,\n          value: email\n        }), _jsx(TextInput, {\n          placeholder: \"Enter password...\",\n          onChangeText: this.handlePasswordInput,\n          value: password\n        }), _jsx(Button, {\n          title: \"Login\",\n          onPress: function onPress() {\n            return _this3.login(navigation);\n          }\n        }), _jsx(Button, {\n          title: \"Sign Up\",\n          onPress: function onPress() {\n            return navigation.navigate(\"SignUp\");\n          }\n        })]\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nLoginScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default LoginScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/LoginScreen.js"],"names":["React","Component","AsyncStorage","PropTypes","DisplayAlert","storeData","value","jsonValue","JSON","stringify","setItem","console","error","displayAlert","LoginScreen","props","handleEmailInput","email","setState","handlePasswordInput","password","state","myRe","exec","nav","emailIsValid","fetch","method","headers","body","then","response","status","Promise","reject","Error","json","log","navigate","catch","navigation","login","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, TextInput, View } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst storeData = async (value) => {\r\n    try {\r\n        const jsonValue = JSON.stringify(value);\r\n        await AsyncStorage.setItem('@spacebook_details', jsonValue);\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass LoginScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            email: 'gp@gp.com',\r\n            password: 'password',\r\n        }\r\n    }\r\n\r\n    handleEmailInput = (email) => {\r\n        this.setState({email});\r\n    }\r\n\r\n    handlePasswordInput = (password) => {\r\n        this.setState({password});\r\n    }\r\n\r\n    emailIsValid() {\r\n        const { email } = this.state;\r\n        const myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n\r\n        if (myRe.exec(email)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    login(nav) {\r\n        const { email, password } = this.state;\r\n        if (email === '' || password === ''){\r\n            displayAlert.displayAlert('All fields must be entered.');\r\n\r\n        }\r\n        else if (!this.emailIsValid()){\r\n            displayAlert.displayAlert('Invalid email.');\r\n        }\r\n        else {\r\n            fetch('http://localhost:3333/api/1.0.0/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email,\r\n                    password\r\n                })\r\n            })\r\n            .then((response) => {\r\n                if (response.status === 400){\r\n                    displayAlert.displayAlert('Incorrect email or password.');\r\n                    return Promise.reject(new Error(`Incorrect email or password. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 500){\r\n                    displayAlert.displayAlert('Server error.');\r\n                    return Promise.reject(new Error(`Server error. Status: ${  response.status}`));\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((json) => {\r\n                if (json === {}){\r\n                    console.log(\"hm\");\r\n                }\r\n                displayAlert.displayAlert('Logged in.');\r\n                storeData(json);\r\n                this.setState({email: '', password: ''});\r\n                nav.navigate('Home');\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { navigation } = this.props;\r\n        const { email, password } = this.state;\r\n        return(\r\n            <View>\r\n                <TextInput placeholder='Enter email...' onChangeText={this.handleEmailInput} value={email}/>\r\n                <TextInput placeholder='Enter password...' onChangeText={this.handlePasswordInput} value={password}/>\r\n                <Button title='Login' onPress={() => this.login(navigation)}/>\r\n                <Button title='Sign Up' onPress={() => navigation.navigate(\"SignUp\")}/>\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nLoginScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}