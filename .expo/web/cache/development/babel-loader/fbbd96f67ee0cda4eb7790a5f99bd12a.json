{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getItemCount } from '@react-stately/collections';\nimport { getItemId } from \"./utils\";\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\nexport function useOption(props, state, ref) {\n  var isSelected = props.isSelected,\n      isDisabled = props.isDisabled,\n      key = props.key,\n      shouldSelectOnPressUp = props.shouldSelectOnPressUp,\n      shouldFocusOnHover = props.shouldFocusOnHover,\n      isVirtualized = props.isVirtualized,\n      shouldUseVirtualFocus = props.shouldUseVirtualFocus;\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var _optionProps = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  };\n\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  var _useSelectableItem = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus\n  }),\n      itemProps = _useSelectableItem.itemProps;\n\n  var _usePress = usePress(_objectSpread(_objectSpread({}, itemProps), {}, {\n    isDisabled: isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus\n  })),\n      pressProps = _usePress.pressProps;\n\n  var _useHover = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }, ref),\n      hoverProps = _useHover.hoverProps;\n\n  var onMouseDown = function onMouseDown(e) {\n    return e.stopPropagation();\n  };\n\n  _optionProps = _objectSpread(_objectSpread(_objectSpread({}, _optionProps), mergeProps(pressProps, hoverProps)), {}, {\n    id: getItemId(state, key),\n    onMouseDown: onMouseDown\n  });\n  var optionProps = useMapDomPropsToRN(_optionProps, ref);\n  return {\n    optionProps: optionProps,\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["getItemCount","getItemId","isFocusVisible","useHover","usePress","isMac","isWebKit","mergeProps","useSlotId","useSelectableItem","useMapDomPropsToRN","useOption","props","state","ref","isSelected","isDisabled","key","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","shouldUseVirtualFocus","labelId","descriptionId","_optionProps","collection","getItem","index","selectionManager","itemProps","preventFocusOnPress","pressProps","onHoverStart","setFocused","setFocusedKey","hoverProps","onMouseDown","e","stopPropagation","id","optionProps","labelProps","nativeID","descriptionProps"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-native-aria/listbox/lib/module/useOption.web.js"],"sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption(props, state, ref) {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus\n  } = props;\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let _optionProps = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected\n  }; // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {\n    itemProps\n  } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n  let {\n    pressProps\n  } = usePress({ ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus\n  });\n  let {\n    hoverProps\n  } = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true); //@ts-ignore\n\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n\n  }, ref); // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n\n  const onMouseDown = e => e.stopPropagation();\n\n  _optionProps = { ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown\n  };\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n  return {\n    optionProps,\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    }\n  };\n}\n//# sourceMappingURL=useOption.web.js.map"]},"metadata":{},"sourceType":"module"}