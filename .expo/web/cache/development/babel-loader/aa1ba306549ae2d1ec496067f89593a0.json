{"ast":null,"code":"import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  var navigation = useNavigation();\n  var route = useRoute();\n  React.useEffect(function () {\n    var current = navigation;\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    var unsubscribe = current.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      var isFirst = navigation === current || navigation.getState().routes[0].key === route.key;\n      requestAnimationFrame(function () {\n        var scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,wBAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIA,GAAG,CAACC,OAAJ,IAAe,IAAnB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAI,iBAAiBD,GAAG,CAACC,OAArB,IAAgC,cAAcD,GAAG,CAACC,OAAlD,IAA6D,oBAAoBD,GAAG,CAACC,OAArF,IAAgG,6BAA6BD,GAAG,CAACC,OAArI,EAA8I;AAE5I,WAAOD,GAAG,CAACC,OAAX;AACD,GAHD,MAGO,IAAI,wBAAwBD,GAAG,CAACC,OAAhC,EAAyC;AAG9C,WAAOD,GAAG,CAACC,OAAJ,CAAYC,kBAAZ,EAAP;AACD,GAJM,MAIA,IAAI,aAAaF,GAAG,CAACC,OAArB,EAA8B;AAKnC,WAAOD,GAAG,CAACC,OAAJ,CAAYE,OAAZ,EAAP;AACD,GANM,MAMA;AACL,WAAOH,GAAG,CAACC,OAAX;AACD;AACF;;AAED,eAAe,SAASG,cAAT,CAAwBJ,GAAxB,EAA6B;AAC1C,MAAMK,UAAU,GAAGT,aAAa,EAAhC;AACA,MAAMU,KAAK,GAAGT,QAAQ,EAAtB;AACAC,OAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,QAAIN,OAAO,GAAGI,UAAd;;AAGA,WAAOJ,OAAO,IAAIA,OAAO,CAACO,QAAR,GAAmBC,IAAnB,KAA4B,KAA9C,EAAqD;AACnDR,aAAO,GAAGA,OAAO,CAACS,SAAR,EAAV;AACD;;AAED,QAAI,CAACT,OAAL,EAAc;AACZ;AACD;;AAED,QAAMU,WAAW,GAAGV,OAAO,CAACW,WAAR,CAGpB,UAHoB,EAGR,WAAC,EAAI;AAEf,UAAMC,SAAS,GAAGR,UAAU,CAACQ,SAAX,EAAlB;AAGA,UAAMC,OAAO,GAAGT,UAAU,KAAKJ,OAAf,IAA0BI,UAAU,CAACG,QAAX,GAAsBO,MAAtB,CAA6B,CAA7B,EAAgCC,GAAhC,KAAwCV,KAAK,CAACU,GAAxF;AAGAC,2BAAqB,CAAC,YAAM;AAC1B,YAAMC,UAAU,GAAGnB,iBAAiB,CAACC,GAAD,CAApC;;AAEA,YAAIa,SAAS,IAAIC,OAAb,IAAwBI,UAAxB,IAAsC,CAACC,CAAC,CAACC,gBAA7C,EAA+D;AAC7D,cAAI,iBAAiBF,UAArB,EAAiC;AAC/BA,sBAAU,CAACG,WAAX;AACD,WAFD,MAEO,IAAI,cAAcH,UAAlB,EAA8B;AACnCA,sBAAU,CAACI,QAAX,CAAoB;AAClBC,eAAC,EAAE,CADe;AAElBC,eAAC,EAAE,CAFe;AAGlBC,sBAAQ,EAAE;AAHQ,aAApB;AAKD,WANM,MAMA,IAAI,oBAAoBP,UAAxB,EAAoC;AACzCA,sBAAU,CAACQ,cAAX,CAA0B;AACxBC,oBAAM,EAAE,CADgB;AAExBF,sBAAQ,EAAE;AAFc,aAA1B;AAID,WALM,MAKA,IAAI,6BAA6BP,UAAjC,EAA6C;AAClDA,sBAAU,CAACU,uBAAX,CAAmC;AACjCJ,eAAC,EAAE,CAD8B;AAEjCC,sBAAQ,EAAE;AAFuB,aAAnC;AAID;AACF;AACF,OAxBoB,CAArB;AAyBD,KApCmB,CAApB;AAqCA,WAAOd,WAAP;AACD,GAlDD,EAkDG,CAACN,UAAD,EAAaL,GAAb,EAAkBM,KAAK,CAACU,GAAxB,CAlDH;AAmDD","names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","getState","type","getParent","unsubscribe","addListener","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","e","defaultPrevented","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/native/lib/module/useScrollToTop.js"],"sourcesContent":["import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  const navigation = useNavigation();\n  const route = useRoute();\n  React.useEffect(() => {\n    let current = navigation; // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener( // We don't wanna import tab types here to avoid extra deps\n    // in addition, there are multiple tab implementations\n    // @ts-expect-error\n    'tabPress', e => {\n      // We should scroll to top only when the screen is focused\n      const isFocused = navigation.isFocused(); // In a nested stack navigator, tab press resets the stack to first screen\n      // So we should scroll to top only when we are on first screen\n\n      const isFirst = navigation === current || navigation.getState().routes[0].key === route.key; // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        const scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n//# sourceMappingURL=useScrollToTop.js.map"]},"metadata":{},"sourceType":"module"}