{"ast":null,"code":"import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from \"./ServerContext\";\nexport default React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n\n  return React.createElement(ServerContext.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,wBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP;AASA,eAA4BD,KAAK,CAACE,UAAN,CAAiB,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,GAA/B,EAAoC;AAC/E,MACEC,QADF,GAGIF,IAHJ,CACEE,QADF;AAAA,MAEEC,QAFF,GAGIH,IAHJ,CAEEG,QAFF;AAIAP,OAAK,CAACQ,SAAN,CAAgB,YAAM;AACpBC,WAAO,CAACC,KAAR,CAAc,sFAAd;AACD,GAFD,EAEG,EAFH;AAGA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAIN,GAAJ,EAAS;AACP,QAAMO,KAAK,GAAG;AACZC,uBADY,+BACQ;AAClB,eAAOF,OAAO,CAACG,OAAf;AACD;AAHW,KAAd;;AAUA,QAAI,OAAOT,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,SAAG,CAACO,KAAD,CAAH;AACD,KAFD,MAEO;AAELP,SAAG,CAACM,OAAJ,GAAcC,KAAd;AACD;AACF;;AAED,SAAoBZ,KAAK,CAACe,aAAN,CAAoBd,aAAa,CAACe,QAAlC,EAA4C;AAC9DJ,SAAK,EAAE;AACLL,cAAQ,EAARA;AADK;AADuD,GAA5C,EAIJP,KAAK,CAACe,aAAN,CAAoBhB,oBAAoB,CAACiB,QAAzC,EAAmD;AACjEJ,SAAK,EAAED;AAD0D,GAAnD,EAEbL,QAFa,CAJI,CAApB;AAOD,CApC2B,CAA5B","names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","_ref","ref","children","location","useEffect","console","error","current","value","getCurrentOptions","options","createElement","Provider"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/native/lib/module/ServerContainer.js"],"sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default /*#__PURE__*/React.forwardRef(function ServerContainer(_ref, ref) {\n  let {\n    children,\n    location\n  } = _ref;\n  React.useEffect(() => {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  const current = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      }\n\n    }; // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n    value: {\n      location\n    }\n  }, /*#__PURE__*/React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n//# sourceMappingURL=ServerContainer.js.map"]},"metadata":{},"sourceType":"module"}