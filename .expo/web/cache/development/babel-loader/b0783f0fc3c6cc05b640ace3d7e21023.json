{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as queryString from 'query-string';\nimport fromEntries from \"./fromEntries\";\nimport validatePathConfig from \"./validatePathConfig\";\n\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  var configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern = void 0;\n    var focusedParams = void 0;\n    var focusedRoute = getActiveRoute(state);\n    var currentOptions = configs;\n    var nestedRouteNames = [];\n    var hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        (function () {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref3 = _slicedToArray(_ref, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n\n            return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n          }));\n\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        })();\n      }\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n\n        if (p === '*') {\n          return route.name;\n        }\n\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n\n          return encodeURIComponent(value);\n        }\n\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n\n      var query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n\n      if (query) {\n        path += \"?\" + query;\n      }\n    }\n\n    current = route.state;\n  };\n\n  while (current) {\n    var _currentOptions$route;\n\n    var _pattern;\n\n    _loop();\n  }\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\n\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\n\nvar joinPaths = function joinPaths() {\n  var _ref4;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref4 = []).concat.apply(_ref4, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  var _pattern2;\n\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return {\n      pattern: _pattern3\n    };\n  }\n\n  var pattern;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref2) {\n    var _ref5 = _slicedToArray(_ref2, 2),\n        name = _ref5[0],\n        c = _ref5[1];\n\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"mappings":"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","names":["queryString","fromEntries","validatePathConfig","getActiveRoute","route","state","index","routes","length","getPathFromState","options","Error","configs","screens","createNormalizedConfigs","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","_currentOptions$route","currentParams","Object","entries","map","_ref","key","value","String","_pattern","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","_len","arguments","paths","Array","_key","concat","Boolean","createConfigItem","config","parentPattern","_pattern2","exact","_ref2","c","result"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-navigation/core/lib/module/getPathFromState.js"],"sourcesContent":["import * as queryString from 'query-string';\nimport fromEntries from './fromEntries';\nimport validatePathConfig from './validatePathConfig';\n\nconst getActiveRoute = state => {\n  const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\n\n\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  } // Create a normalized configs object which will be easier to use\n\n\n  const configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  let path = '/';\n  let current = state;\n  const allParams = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index];\n    let pattern;\n    let focusedParams;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs; // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n\n    let nestedRouteNames = [];\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        var _currentOptions$route;\n\n        const stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n        const currentParams = fromEntries(Object.entries(route.params).map(_ref => {\n          let [key, value] = _ref;\n          return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n        }));\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          var _pattern;\n\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams\n          };\n          (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(p => p.startsWith(':')) // eslint-disable-next-line no-loop-func\n          .forEach(p => {\n            const name = getParamName(p); // Remove the params present in the pattern since we'll only use the rest for query string\n\n            if (focusedParams) {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[name];\n            }\n          });\n        }\n      } // If there is no `screens` property or no nested state, we return pattern\n\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens; // if there is config for next route name, we go deeper\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(p => {\n        const name = getParamName(p); // We don't know what to show for wildcard patterns\n        // Showing the route name seems ok, though whatever we show here will be incorrect\n        // Since the page doesn't actually exist\n\n        if (p === '*') {\n          return route.name;\n        } // If the path has a pattern for a param, put the param in the path\n\n\n        if (p.startsWith(':')) {\n          const value = allParams[name];\n\n          if (value === undefined && p.endsWith('?')) {\n            // Optional params without value assigned in route.params should be ignored\n            return '';\n          }\n\n          return encodeURIComponent(value);\n        }\n\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  } // Remove multiple as well as trailing slashes\n\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\n\nconst getParamName = pattern => pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\n\nconst createConfigItem = (config, parentPattern) => {\n  var _pattern2;\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern\n    };\n  } // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n\n\n  let pattern;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens\n  };\n};\n\nconst createNormalizedConfigs = (options, pattern) => fromEntries(Object.entries(options).map(_ref2 => {\n  let [name, c] = _ref2;\n  const result = createConfigItem(c, pattern);\n  return [name, result];\n}));\n//# sourceMappingURL=getPathFromState.js.map"]},"metadata":{},"sourceType":"module"}