{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box, Input, NativeBaseProvider, VStack, Button, Icon, Pressable, Center, HStack } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar displayAlert = new DisplayAlert();\n\nvar SignUpScreen = function (_Component) {\n  _inherits(SignUpScreen, _Component);\n\n  var _super = _createSuper(SignUpScreen);\n\n  function SignUpScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SignUpScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPass: '',\n      visible: false,\n      confirmVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(SignUpScreen, [{\n    key: \"emailIsValid\",\n    value: function emailIsValid() {\n      var email = this.state.email;\n      var myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n      if (myRe.exec(email)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"signup\",\n    value: function signup() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          confirmPass = _this$state.confirmPass,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName;\n\n      if (email === '' || password === '' || confirmPass === '' || firstName === '' || lastName === '') {\n        displayAlert.displayAlert('All fields must be entered.');\n      } else if (!this.emailIsValid(email)) {\n        displayAlert.displayAlert('Invalid email.');\n      } else if (password.length <= 5) {\n        displayAlert.displayAlert('Password must be at least 6 characters');\n      } else if (password !== confirmPass) {\n        displayAlert.displayAlert('Passwords do not match.');\n      } else {\n        fetch('http://localhost:3333/api/1.0.0/user', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            first_name: firstName,\n            last_name: lastName,\n            email: email,\n            password: password\n          })\n        }).then(function (response) {\n          if (response.status === 400) {\n            return Promise.reject(new Error(\"User already created. Status: \" + response.status));\n          }\n\n          if (response.status === 500) {\n            return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n          }\n\n          _this2.setState({\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            confirmPass: ''\n          });\n\n          return displayAlert.displayAlert('User created.');\n        }).catch(function (error) {\n          displayAlert.displayAlert(error);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          confirmPass = _this$state2.confirmPass,\n          visible = _this$state2.visible,\n          confirmVisible = _this$state2.confirmVisible;\n      var bgDark = \"darkBlue.700\";\n      var textColour = \"white\";\n      return _jsx(NativeBaseProvider, {\n        children: _jsx(Center, {\n          flex: 1,\n          bg: bgDark,\n          children: _jsx(Center, {\n            children: _jsx(VStack, {\n              children: _jsx(Box, {\n                children: _jsxs(VStack, {\n                  alignItems: \"center\",\n                  space: 5,\n                  w: \"100%\",\n                  children: [_jsx(Input, {\n                    w: \"100%\",\n                    placeholder: \"First Name\",\n                    placeholderTextColor: textColour,\n                    color: textColour,\n                    onChangeText: function onChangeText(value) {\n                      _this3.setState({\n                        firstName: value\n                      });\n                    },\n                    value: firstName\n                  }), _jsx(Input, {\n                    w: \"100%\",\n                    placeholder: \"Last Name\",\n                    placeholderTextColor: textColour,\n                    color: textColour,\n                    onChangeText: function onChangeText(value) {\n                      _this3.setState({\n                        lastName: value\n                      });\n                    },\n                    value: lastName\n                  }), _jsx(Input, {\n                    w: \"100%\",\n                    placeholder: \"Email\",\n                    placeholderTextColor: textColour,\n                    color: textColour,\n                    onChangeText: function onChangeText(value) {\n                      return _this3.setState({\n                        email: value\n                      });\n                    },\n                    value: email\n                  }), _jsx(Input, {\n                    type: visible ? \"text\" : \"password\",\n                    InputRightElement: _jsx(Pressable, {\n                      onPress: function onPress() {\n                        return _this3.setState({\n                          visible: !visible\n                        });\n                      },\n                      children: _jsx(Icon, {\n                        as: _jsx(MaterialIcons, {\n                          name: visible ? \"visibility\" : \"visibility-off\"\n                        }),\n                        size: 5,\n                        mr: \"2\",\n                        color: textColour\n                      })\n                    }),\n                    placeholder: \"Password\",\n                    placeholderTextColor: textColour,\n                    color: textColour,\n                    onChangeText: function onChangeText(value) {\n                      return _this3.setState({\n                        password: value\n                      });\n                    },\n                    value: password\n                  }), _jsx(Input, {\n                    isRequired: true,\n                    type: confirmVisible ? \"text\" : \"password\",\n                    InputRightElement: _jsx(Pressable, {\n                      onPress: function onPress() {\n                        return _this3.setState({\n                          confirmVisible: !confirmVisible\n                        });\n                      },\n                      children: _jsx(Icon, {\n                        as: _jsx(MaterialIcons, {\n                          name: confirmVisible ? \"visibility\" : \"visibility-off\"\n                        }),\n                        size: 5,\n                        mr: \"2\",\n                        color: textColour\n                      })\n                    }),\n                    placeholder: \"Confirm Password\",\n                    placeholderTextColor: textColour,\n                    color: textColour,\n                    onChangeText: function onChangeText(value) {\n                      return _this3.setState({\n                        confirmPass: value\n                      });\n                    },\n                    value: confirmPass\n                  }), _jsxs(HStack, {\n                    w: \"100%\",\n                    justifyContent: \"space-between\",\n                    children: [_jsx(Button, {\n                      colorScheme: \"blueGray\",\n                      w: \"45%\",\n                      onPress: function onPress() {\n                        return navigation.navigate('Login');\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"blueGray\",\n                      w: \"45%\",\n                      onPress: function onPress() {\n                        return _this3.signup();\n                      },\n                      children: \"Sign Up\"\n                    })]\n                  })]\n                })\n              })\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return SignUpScreen;\n}(Component);\n\nSignUpScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default SignUpScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/SignUpScreen.js"],"names":["React","Component","Box","Input","NativeBaseProvider","VStack","Button","Icon","Pressable","Center","HStack","MaterialIcons","PropTypes","DisplayAlert","displayAlert","SignUpScreen","props","state","firstName","lastName","email","password","confirmPass","visible","confirmVisible","myRe","exec","emailIsValid","length","fetch","method","headers","body","JSON","stringify","first_name","last_name","then","response","status","Promise","reject","Error","setState","catch","error","navigation","bgDark","textColour","value","navigate","signup","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Input, NativeBaseProvider, VStack, Button, Icon, Pressable, Center, HStack } from 'native-base';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass SignUpScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPass: '',\r\n            visible: false,\r\n            confirmVisible: false\r\n        }\r\n    }\r\n\r\n    emailIsValid() {\r\n        const { email } = this.state;\r\n        const myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n\r\n        if (myRe.exec(email)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    signup() {\r\n        const { email, password, confirmPass, firstName, lastName} = this.state;\r\n        if (email === '' || password === '' || confirmPass === '' || firstName === '' || lastName === ''){\r\n            displayAlert.displayAlert('All fields must be entered.');\r\n        }\r\n        else if (!this.emailIsValid(email)){\r\n            displayAlert.displayAlert('Invalid email.');\r\n        }\r\n        else if (password.length <= 5){\r\n            displayAlert.displayAlert('Password must be at least 6 characters');\r\n        }\r\n        else if (password !== confirmPass){\r\n            displayAlert.displayAlert('Passwords do not match.');\r\n        }\r\n        else {\r\n            fetch('http://localhost:3333/api/1.0.0/user', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    first_name: firstName,\r\n                    last_name: lastName,\r\n                    email,\r\n                    password\r\n                })\r\n            })\r\n            .then((response) => {\r\n                if (response.status === 400){\r\n                    return Promise.reject(new Error(`User already created. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 500){\r\n                    return Promise.reject(new Error(`Server error. Status: ${  response.status}`));\r\n                }\r\n                this.setState({firstName: '',lastName: '',email: '',password: '', confirmPass: ''})\r\n                return displayAlert.displayAlert('User created.');\r\n            })\r\n            .catch((error) => {\r\n                displayAlert.displayAlert(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { navigation } = this.props;\r\n        const { firstName, lastName, email, password, confirmPass, visible, confirmVisible } = this.state;\r\n        const bgDark = \"darkBlue.700\";\r\n        const textColour = \"white\";\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Center flex={1} bg={bgDark}>\r\n                    <Center>\r\n                        <VStack>\r\n                            <Box>\r\n                                <VStack alignItems=\"center\" space={5} w=\"100%\">\r\n                                    <Input w=\"100%\" placeholder=\"First Name\" placeholderTextColor={textColour} color={textColour}\r\n                                        onChangeText={value => {this.setState({firstName: value})}} value={firstName}/>\r\n                                    <Input w=\"100%\" placeholder=\"Last Name\" placeholderTextColor={textColour} color={textColour}\r\n                                        onChangeText={value => {this.setState({lastName: value})}} value={lastName}/>\r\n                                    <Input w=\"100%\" placeholder=\"Email\" placeholderTextColor={textColour} color={textColour}\r\n                                        onChangeText={value => this.setState({email: value})} value={email}/>\r\n                                    <Input type={visible ? \"text\" : \"password\"}\r\n                                        InputRightElement={<Pressable onPress={() => this.setState({visible: !visible})}><Icon as={<MaterialIcons \r\n                                        name={visible ? \"visibility\" : \"visibility-off\"}/>} size={5} mr=\"2\" \r\n                                        color={textColour}/></Pressable>} placeholder=\"Password\" placeholderTextColor={textColour} color={textColour}\r\n                                        onChangeText={value => this.setState({password: value})} value={password}/>\r\n                                    <Input isRequired type={confirmVisible ? \"text\" : \"password\"}\r\n                                        InputRightElement={<Pressable onPress={() => this.setState({confirmVisible: !confirmVisible})}><Icon as={<MaterialIcons \r\n                                        name={confirmVisible ? \"visibility\" : \"visibility-off\"}/>} size={5} mr=\"2\" \r\n                                        color={textColour}/></Pressable>} placeholder=\"Confirm Password\" placeholderTextColor={textColour} color={textColour}\r\n                                        onChangeText={value => this.setState({confirmPass: value})} value={confirmPass}/>\r\n                                    <HStack w=\"100%\" justifyContent=\"space-between\">\r\n                                        <Button colorScheme='blueGray' w=\"45%\" onPress={() => navigation.navigate('Login')}>Cancel</Button>\r\n                                        <Button colorScheme='blueGray' w=\"45%\" onPress={() => this.signup()}>Sign Up</Button>\r\n                                    </HStack>\r\n                                </VStack>\r\n                            </Box>\r\n                        </VStack>\r\n                    </Center>\r\n                </Center>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nSignUpScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default SignUpScreen;"]},"metadata":{},"sourceType":"module"}