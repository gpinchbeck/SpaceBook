{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Input, NativeBaseProvider, VStack, Button, Icon, Pressable, Center, HStack } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar SettingsScreen = function (_Component) {\n  _inherits(SettingsScreen, _Component);\n\n  var _super = _createSuper(SettingsScreen);\n\n  function SettingsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, SettingsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      userData: {},\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPass: '',\n      visible: false,\n      confirmVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(SettingsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getUserData();\n      });\n    }\n  }, {\n    key: \"getUserData\",\n    value: function getUserData() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.json();\n      }).then(function (responseJson) {\n        _this3.setState({\n          userData: responseJson\n        });\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"emailIsValid\",\n    value: function emailIsValid() {\n      var email = this.state.email;\n      var myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n      if (myRe.exec(email)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateDetails\",\n    value: function updateDetails() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          userData = _this$state.userData,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          password = _this$state.password,\n          confirmPass = _this$state.confirmPass;\n      var toSend = {};\n\n      if (email === '' || password === '' || confirmPass === '' || firstName === '' || lastName === '') {\n        displayAlert.displayAlert('Must have at least one field entered to update and must be diferent.');\n      } else {\n        if (userData.first_name !== firstName && firstName.length > 0) {\n          toSend.first_name = firstName;\n        }\n\n        if (userData.last_name !== lastName && lastName.length > 0) {\n          toSend.last_name = lastName;\n        }\n\n        if (userData.email !== email && email.length > 0 && this.emailIsValid()) {\n          toSend.email = email;\n        } else {\n          displayAlert.displayAlert('Must be a valid email');\n        }\n\n        if (password.length > 5 && password === confirmPass) {\n          toSend.password = password;\n        } else {\n          displayAlert.displayAlert('Passwords must be greater than 5 and match.');\n        }\n\n        if (Object.keys(toSend).length > 0) {\n          fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Authorization': data.token\n            },\n            body: JSON.stringify(toSend)\n          }).then(function (response) {\n            if (response.status === 400) {\n              return Promise.reject(new Error(\"Bad request. Status: \" + response.status));\n            }\n\n            if (response.status === 401) {\n              return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n            }\n\n            if (response.status === 403) {\n              return Promise.reject(new Error(\"Forbidden. Status: \" + response.status));\n            }\n\n            if (response.status === 404) {\n              return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n            }\n\n            if (response.status === 500) {\n              return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n            }\n\n            return displayAlert.displayAlert('Details updated');\n          }).catch(function (error) {\n            displayAlert.displayAlert(error);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state2 = this.state,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          confirmPass = _this$state2.confirmPass,\n          visible = _this$state2.visible,\n          confirmVisible = _this$state2.confirmVisible;\n      var bgDark = \"darkBlue.700\";\n      var inputBg = \"blueGray.500\";\n      var textColour = \"white\";\n      return _jsx(NativeBaseProvider, {\n        children: _jsx(Center, {\n          flex: 1,\n          children: _jsx(Center, {\n            flex: 1,\n            children: _jsxs(VStack, {\n              alignItems: \"center\",\n              space: 5,\n              w: \"100%\",\n              children: [_jsx(Input, {\n                bg: inputBg,\n                color: textColour,\n                placeholderTextColor: textColour,\n                w: \"100%\",\n                placeholder: \"First Name\",\n                onChangeText: function onChangeText(value) {\n                  return _this4.setState({\n                    firstName: value\n                  });\n                },\n                value: firstName\n              }), _jsx(Input, {\n                bg: inputBg,\n                color: textColour,\n                placeholderTextColor: textColour,\n                w: \"100%\",\n                placeholder: \"Last Name\",\n                onChangeText: function onChangeText(value) {\n                  return _this4.setState({\n                    lastName: value\n                  });\n                },\n                value: lastName\n              }), _jsx(Input, {\n                bg: inputBg,\n                color: textColour,\n                placeholderTextColor: textColour,\n                w: \"100%\",\n                placeholder: \"Email\",\n                onChangeText: function onChangeText(value) {\n                  return _this4.setState({\n                    email: value\n                  });\n                },\n                value: email\n              }), _jsx(Input, {\n                bg: inputBg,\n                color: textColour,\n                placeholderTextColor: textColour,\n                type: visible ? \"text\" : \"password\",\n                InputRightElement: _jsx(Pressable, {\n                  onPress: function onPress() {\n                    return _this4.setState({\n                      visible: !visible\n                    });\n                  },\n                  children: _jsx(Icon, {\n                    as: _jsx(MaterialIcons, {\n                      name: visible ? \"visibility\" : \"visibility-off\"\n                    }),\n                    size: 5,\n                    mr: \"2\",\n                    color: textColour\n                  })\n                }),\n                placeholder: \"Password\",\n                onChangeText: function onChangeText(value) {\n                  return _this4.setState({\n                    password: value\n                  });\n                },\n                value: password\n              }), _jsx(Input, {\n                bg: inputBg,\n                color: textColour,\n                placeholderTextColor: textColour,\n                isRequired: true,\n                type: confirmVisible ? \"text\" : \"password\",\n                InputRightElement: _jsx(Pressable, {\n                  onPress: function onPress() {\n                    return _this4.setState({\n                      confirmVisible: !confirmVisible\n                    });\n                  },\n                  children: _jsx(Icon, {\n                    as: _jsx(MaterialIcons, {\n                      name: confirmVisible ? \"visibility\" : \"visibility-off\"\n                    }),\n                    size: 5,\n                    mr: \"2\",\n                    color: textColour\n                  })\n                }),\n                placeholder: \"Confirm Password\",\n                onChangeText: function onChangeText(value) {\n                  return _this4.setState({\n                    confirmPass: value\n                  });\n                },\n                value: confirmPass\n              }), _jsxs(HStack, {\n                w: \"100%\",\n                justifyContent: \"space-between\",\n                children: [_jsx(Button, {\n                  bg: bgDark,\n                  w: \"45%\",\n                  onPress: function onPress() {\n                    return navigation.navigate('Upload');\n                  },\n                  children: \"Update Picture\"\n                }), _jsx(Button, {\n                  bg: bgDark,\n                  w: \"45%\",\n                  onPress: function onPress() {\n                    return _this4.updateDetails();\n                  },\n                  children: \"Update\"\n                })]\n              })]\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return SettingsScreen;\n}(Component);\n\nSettingsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default SettingsScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/SettingsScreen.js"],"names":["React","Component","Input","NativeBaseProvider","VStack","Button","Icon","Pressable","Center","HStack","MaterialIcons","PropTypes","DisplayAlert","Storage","asyncStorage","displayAlert","SettingsScreen","props","state","data","userData","firstName","lastName","email","password","confirmPass","visible","confirmVisible","getData","setState","getUserData","fetch","id","method","headers","token","then","response","status","Promise","reject","Error","json","responseJson","catch","error","myRe","exec","toSend","first_name","length","last_name","emailIsValid","Object","keys","body","JSON","stringify","navigation","bgDark","inputBg","textColour","value","navigate","updateDetails","propTypes","shape","func","isRequired","addListener"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, NativeBaseProvider, VStack, Button, Icon, Pressable, Center, HStack} from 'native-base';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass SettingsScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            userData: {},\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPass: '',\r\n            visible: false,\r\n            confirmVisible: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getUserData();\r\n        });\r\n    }\r\n\r\n    getUserData(){\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((responseJson) => {\r\n            this.setState({\r\n                userData: responseJson,\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    emailIsValid() {\r\n        const { email } = this.state;\r\n        const myRe = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n\r\n        if (myRe.exec(email)){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateDetails(){\r\n        const { data, userData, firstName, lastName, email, password, confirmPass } = this.state;\r\n        const toSend = {};\r\n\r\n        if (email === '' || password === '' || confirmPass === '' || firstName === '' || lastName === ''){\r\n            displayAlert.displayAlert('Must have at least one field entered to update and must be diferent.');\r\n        }\r\n        else {\r\n            if (userData.first_name !== firstName && firstName.length > 0){\r\n                toSend.first_name = firstName;\r\n            }\r\n            if (userData.last_name !== lastName && lastName.length > 0){\r\n                toSend.last_name = lastName;\r\n            }\r\n            if (userData.email !== email && email.length > 0 && this.emailIsValid()){\r\n                toSend.email = email;\r\n            } else {\r\n                displayAlert.displayAlert('Must be a valid email');\r\n            }\r\n\r\n            if (password.length > 5 && password === confirmPass){\r\n                toSend.password = password;\r\n            } else {\r\n                displayAlert.displayAlert('Passwords must be greater than 5 and match.');\r\n            }\r\n\r\n            if (Object.keys(toSend).length > 0) {\r\n                fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }`, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'X-Authorization': data.token,\r\n                    },\r\n                    body: JSON.stringify(toSend)\r\n                })\r\n                .then((response) => {\r\n                    if (response.status === 400){\r\n                        return Promise.reject(new Error(`Bad request. Status: ${  response.status}`));\r\n                    }\r\n                    if (response.status === 401){\r\n                        return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n                    }\r\n                    if (response.status === 403){\r\n                        return Promise.reject(new Error(`Forbidden. Status: ${  response.status}`));\r\n                    }\r\n                    if (response.status === 404){\r\n                        return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n                    }\r\n                    if (response.status === 500){\r\n                        return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n                    } \r\n                    return displayAlert.displayAlert('Details updated');\r\n                })\r\n                .catch((error) => {\r\n                    displayAlert.displayAlert(error);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { firstName, lastName, email, password, confirmPass, visible, confirmVisible } = this.state;\r\n        const bgDark = \"darkBlue.700\";\r\n        const inputBg = \"blueGray.500\";\r\n        const textColour = \"white\";\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Center flex={1}>\r\n                    <Center flex={1}>\r\n                        <VStack alignItems=\"center\" space={5} w=\"100%\">\r\n                            <Input bg={inputBg} color={textColour} placeholderTextColor={textColour} w=\"100%\" placeholder=\"First Name\"\r\n                                onChangeText={value => this.setState({firstName: value})} value={firstName}/>\r\n                            <Input bg={inputBg} color={textColour} placeholderTextColor={textColour} w=\"100%\" placeholder=\"Last Name\"\r\n                                onChangeText={value => this.setState({lastName: value})} value={lastName}/>\r\n                            <Input bg={inputBg} color={textColour} placeholderTextColor={textColour} w=\"100%\" placeholder=\"Email\"\r\n                                onChangeText={value => this.setState({email: value})} value={email}/>\r\n                            <Input bg={inputBg} color={textColour} placeholderTextColor={textColour} type={visible ? \"text\" : \"password\"}\r\n                                InputRightElement={<Pressable onPress={() => this.setState({visible: !visible})}><Icon as={<MaterialIcons \r\n                                name={visible ? \"visibility\" : \"visibility-off\"}/>} size={5} mr=\"2\" \r\n                                color={textColour}/></Pressable>} placeholder=\"Password\"\r\n                                onChangeText={value => this.setState({password: value})} value={password}/>\r\n                            <Input bg={inputBg} color={textColour} placeholderTextColor={textColour} isRequired type={confirmVisible ? \"text\" : \"password\"}\r\n                                InputRightElement={<Pressable onPress={() => this.setState({confirmVisible: !confirmVisible})}><Icon as={<MaterialIcons \r\n                                name={confirmVisible ? \"visibility\" : \"visibility-off\"}/>} size={5} mr=\"2\" \r\n                                color={textColour}/></Pressable>} placeholder=\"Confirm Password\"\r\n                                onChangeText={value => this.setState({confirmPass: value})} value={confirmPass}/>\r\n                            <HStack w=\"100%\" justifyContent=\"space-between\">\r\n                                <Button bg={bgDark} w=\"45%\" onPress={() => navigation.navigate('Upload')}>Update Picture</Button>\r\n                                <Button bg={bgDark} w=\"45%\" onPress={() => this.updateDetails()}>Update</Button>\r\n                            </HStack>\r\n                        </VStack>\r\n                    </Center>\r\n                </Center>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nSettingsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default SettingsScreen;"]},"metadata":{},"sourceType":"module"}