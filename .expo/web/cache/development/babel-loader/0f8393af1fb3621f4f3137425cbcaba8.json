{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport PropTypes from 'prop-types';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar ProfileScreen = function (_Component) {\n  _inherits(ProfileScreen, _Component);\n\n  var _super = _createSuper(ProfileScreen);\n\n  function ProfileScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ProfileScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loginInfo: {},\n      userData: {},\n      img: null\n    };\n    return _this;\n  }\n\n  _createClass(ProfileScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          loginInfo: data\n        });\n\n        _this2.getUserData();\n\n        _this2.getProfileImage();\n\n        navigation.addListener('focus', function () {\n          _this2.getUserData();\n\n          _this2.getProfileImage();\n        });\n      });\n    }\n  }, {\n    key: \"getProfileImage\",\n    value: function getProfileImage() {\n      var _this3 = this;\n\n      var loginInfo = this.state.loginInfo;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + loginInfo.id + \"/photo\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': loginInfo.token\n        }\n      }).then(function (response) {\n        return response.blob();\n      }).then(function (responseBlob) {\n        var data = URL.createObjectURL(responseBlob);\n\n        _this3.setState({\n          img: data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"getUserData\",\n    value: function getUserData() {\n      var loginInfo, response, result;\n      return _regeneratorRuntime.async(function getUserData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loginInfo = this.state.loginInfo;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:3333/api/1.0.0/user/\" + loginInfo.id, {\n                method: 'get',\n                headers: {\n                  'X-Authorization': loginInfo.token\n                }\n              }));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              result = _context.sent;\n              this.setState({\n                userData: result\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(nav) {\n      var loginInfo = this.state.loginInfo;\n      fetch('http://localhost:3333/api/1.0.0/logout', {\n        method: 'post',\n        headers: {\n          'X-Authorization': loginInfo.token\n        },\n        body: {}\n      }).then(function (response) {\n        console.log(response.status);\n\n        if (response.status === 200) {\n          displayAlert.displayAlert('Logged out.');\n          nav.navigate('Login');\n        } else if (response.status === 401 || response.status === 500) {\n          displayAlert.displayAlert(response.statusText);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state = this.state,\n          loginInfo = _this$state.loginInfo,\n          userData = _this$state.userData,\n          img = _this$state.img;\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: \"Profile\"\n        }), _jsxs(Text, {\n          children: [\"Login id: \", loginInfo.id]\n        }), _jsxs(Text, {\n          children: [\"Login token: \", loginInfo.token]\n        }), _jsxs(View, {\n          children: [_jsx(Image, {\n            source: {\n              uri: img\n            },\n            style: {\n              width: 100,\n              height: 100,\n              borderWidth: 1\n            }\n          }), _jsx(Text, {\n            children: userData.first_name\n          }), _jsx(Text, {\n            children: userData.last_name\n          }), _jsx(Text, {\n            children: userData.email\n          }), _jsx(Text, {\n            children: userData.friend_count\n          })]\n        }), _jsxs(View, {\n          children: [_jsx(Button, {\n            title: \"Account Settings\",\n            onPress: function onPress() {\n              return navigation.navigate('Settings');\n            }\n          }), _jsx(Button, {\n            title: \"Logout\",\n            onPress: function onPress() {\n              return _this4.logout(navigation);\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return ProfileScreen;\n}(Component);\n\nProfileScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default ProfileScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/ProfileScreen.js"],"names":["React","Component","PropTypes","DisplayAlert","Storage","asyncStorage","displayAlert","ProfileScreen","props","state","loginInfo","userData","img","navigation","getData","data","setState","getUserData","getProfileImage","addListener","fetch","id","method","headers","token","then","response","blob","responseBlob","URL","createObjectURL","catch","error","console","log","json","result","nav","body","status","navigate","statusText","uri","width","height","borderWidth","first_name","last_name","email","friend_count","logout","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Text, View, Image } from 'react-native';\r\n// import AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport PropTypes from 'prop-types';\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\n// const getData = async (done) => {\r\n//     try {\r\n//         const jsonValue = await AsyncStorage.getItem('@spacebook_details');\r\n//         const data = JSON.parse(jsonValue);\r\n//         return done(data);\r\n//     } catch (e) {\r\n//         console.log(e);\r\n//     }\r\n//     return null;\r\n// };\r\n\r\n\r\nclass ProfileScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loginInfo: {},\r\n            userData: {},\r\n            img: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                loginInfo: data,\r\n            });\r\n            this.getUserData();\r\n            this.getProfileImage();\r\n            navigation.addListener('focus', () => {\r\n                this.getUserData();\r\n                this.getProfileImage();\r\n            });\r\n        });\r\n    }\r\n\r\n    getProfileImage() {\r\n        const { loginInfo } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${  loginInfo.id  }/photo`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': loginInfo.token\r\n            }\r\n        })\r\n        .then((response) => response.blob())\r\n        .then((responseBlob) => {\r\n            const data = URL.createObjectURL(responseBlob);\r\n            this.setState({\r\n                img: data\r\n            });\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    async getUserData() {\r\n        const { loginInfo } = this.state;\r\n        const response = await fetch(\r\n            `http://localhost:3333/api/1.0.0/user/${  loginInfo.id}`,\r\n            {\r\n                method: 'get',\r\n                headers: {\r\n                    'X-Authorization': loginInfo.token,\r\n                },\r\n            }\r\n        );\r\n        const result = await response.json();\r\n        this.setState({\r\n            userData: result,\r\n        });\r\n    }\r\n\r\n    logout(nav) {\r\n        const { loginInfo } = this.state;\r\n        fetch('http://localhost:3333/api/1.0.0/logout', {\r\n            method: 'post',\r\n            headers: {\r\n                'X-Authorization': loginInfo.token,\r\n            },\r\n            body: {},\r\n        })\r\n            .then((response) => {\r\n                console.log(response.status);\r\n                if (response.status === 200) {\r\n                    displayAlert.displayAlert('Logged out.');\r\n                    nav.navigate('Login');\r\n                } else if (response.status === 401 || response.status === 500) {\r\n                    displayAlert.displayAlert(response.statusText);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { loginInfo, userData, img } = this.state;\r\n        return (\r\n            <View>\r\n                <Text>Profile</Text>\r\n                <Text>Login id: {loginInfo.id}</Text>\r\n                <Text>Login token: {loginInfo.token}</Text>\r\n                <View>\r\n                    <Image source={{uri: img}}\r\n                        style={{width:100, height:100, borderWidth: 1}} />\r\n                    <Text>{userData.first_name}</Text>\r\n                    <Text>{userData.last_name}</Text>\r\n                    <Text>{userData.email}</Text>\r\n                    <Text>{userData.friend_count}</Text>\r\n                </View>\r\n                <View>\r\n                    <Button title=\"Account Settings\" onPress={() => navigation.navigate('Settings')} />\r\n                    <Button title=\"Logout\" onPress={() => this.logout(navigation)} />\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nProfileScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default ProfileScreen;\r\n"]},"metadata":{},"sourceType":"module"}