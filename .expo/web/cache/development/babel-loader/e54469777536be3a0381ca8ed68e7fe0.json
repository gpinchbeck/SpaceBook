{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\n\nexport default function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : name + \"-\" + nanoid(),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList,\n          routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[route.name]), route.params), action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                }\n\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? _objectSpread(_objectSpread({}, route), {}, {\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","_state$routes","_state$index","_state$history$filter","_state$history","find","r","Math","min","max","length","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/routers/lib/module/TabRouter.js"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n\n};\n\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return { ...state,\n    index,\n    history\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute'\n}) {\n  const router = { ...BaseRouter,\n    type: 'tab',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return { ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeKeyChanges\n    }) {\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter( // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return { ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, {\n      routeParamList\n    }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex({ ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? { ...route,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n\n            if (index === -1) {\n              return null;\n            }\n\n            return { ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions\n  };\n  return router;\n}\n//# sourceMappingURL=TabRouter.js.map"]},"metadata":{},"sourceType":"module"}