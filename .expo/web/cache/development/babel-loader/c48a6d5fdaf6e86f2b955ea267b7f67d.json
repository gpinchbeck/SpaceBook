{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport var EventEmitter = function () {\n  function EventEmitter(nativeModule) {\n    _classCallCheck(this, EventEmitter);\n\n    this._listenerCount = 0;\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule);\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      var _this = this,\n          _subscription;\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n        this._nativeModule.startObserving();\n      }\n\n      this._listenerCount++;\n\n      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n\n      var subscription = (_subscription = {}, _defineProperty(_subscription, nativeEmitterSubscriptionKey, nativeEmitterSubscription), _defineProperty(_subscription, \"remove\", function remove() {\n        _this.removeSubscription(subscription);\n      }), _subscription);\n      return subscription;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var removedListenerCount = this._eventEmitter.listenerCount ? this._eventEmitter.listenerCount(eventName) : this._eventEmitter.listeners(eventName).length;\n\n      this._eventEmitter.removeAllListeners(eventName);\n\n      this._listenerCount -= removedListenerCount;\n      invariant(this._listenerCount >= 0, \"EventEmitter must have a non-negative number of listeners\");\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n\n      if (!nativeEmitterSubscription) {\n        return;\n      }\n\n      if ('remove' in nativeEmitterSubscription) {\n        nativeEmitterSubscription.remove();\n      } else if ('removeSubscription' in this._eventEmitter) {\n        this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n      }\n\n      this._listenerCount--;\n      delete subscription[nativeEmitterSubscriptionKey];\n\n      subscription.remove = function () {};\n\n      if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n        this._nativeModule.stopObserving();\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this$_eventEmitter;\n\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));\n    }\n  }]);\n\n  return EventEmitter;\n}();","map":{"version":3,"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;;;AAEA,IAAMC,4BAA4B,GAAG,+BAArC;AACA,WAAaC,YAAb;AAII,wBAAYC,YAAZ,EAA0B;AAAA;;AAAA,SAH1BC,cAG0B,GAHT,CAGS;AACtB,SAAKC,aAAL,GAAqBF,YAArB;AACA,SAAKG,aAAL,GAAqB,IAAIC,kBAAJ,CAAuBJ,YAAvB,CAArB;AACH;;AAPL;AAAA;AAAA,WAQI,qBAAYK,SAAZ,EAAuBC,QAAvB,EAAiC;AAAA;AAAA;;AAC7B,UAAI,CAAC,KAAKL,cAAN,IAAwBM,QAAQ,CAACC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBO,cAAxE,EAAwF;AACpF,aAAKP,aAAL,CAAmBO,cAAnB;AACH;;AACD,WAAKR,cAAL;;AACA,UAAMS,yBAAyB,GAAG,KAAKP,aAAL,CAAmBQ,WAAnB,CAA+BN,SAA/B,EAA0CC,QAA1C,CAAlC;;AACA,UAAMM,YAAY,uDACbd,4BADa,EACkBY,yBADlB,4CAEN,kBAAM;AACV,aAAI,CAACG,kBAAL,CAAwBD,YAAxB;AACH,OAJa,iBAAlB;AAMA,aAAOA,YAAP;AACH;AArBL;AAAA;AAAA,WAsBI,4BAAmBP,SAAnB,EAA8B;AAE1B,UAAMS,oBAAoB,GAAG,KAAKX,aAAL,CAAmBY,aAAnB,GAErB,KAAKZ,aAAL,CAAmBY,aAAnB,CAAiCV,SAAjC,CAFqB,GAIrB,KAAKF,aAAL,CAAmBa,SAAnB,CAA6BX,SAA7B,EAAwCY,MAJhD;;AAKA,WAAKd,aAAL,CAAmBe,kBAAnB,CAAsCb,SAAtC;;AACA,WAAKJ,cAAL,IAAuBa,oBAAvB;AACAjB,eAAS,CAAC,KAAKI,cAAL,IAAuB,CAAxB,8DAAT;;AACA,UAAI,CAAC,KAAKA,cAAN,IAAwBM,QAAQ,CAACC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBiB,aAAxE,EAAuF;AACnF,aAAKjB,aAAL,CAAmBiB,aAAnB;AACH;AACJ;AAnCL;AAAA;AAAA,WAoCI,4BAAmBP,YAAnB,EAAiC;AAC7B,UAAMF,yBAAyB,GAAGE,YAAY,CAACd,4BAAD,CAA9C;;AACA,UAAI,CAACY,yBAAL,EAAgC;AAC5B;AACH;;AACD,UAAI,YAAYA,yBAAhB,EAA2C;AAEvCA,iCAAyB,CAACU,MAA1B;AACH,OAHD,MAIK,IAAI,wBAAwB,KAAKjB,aAAjC,EAAgD;AACjD,aAAKA,aAAL,CAAmBU,kBAAnB,CAAsCH,yBAAtC;AACH;;AACD,WAAKT,cAAL;AAGA,aAAOW,YAAY,CAACd,4BAAD,CAAnB;;AAEAc,kBAAY,CAACQ,MAAb,GAAsB,YAAM,CAAG,CAA/B;;AACA,UAAI,CAAC,KAAKnB,cAAN,IAAwBM,QAAQ,CAACC,EAAT,KAAgB,KAAxC,IAAiD,KAAKN,aAAL,CAAmBiB,aAAxE,EAAuF;AACnF,aAAKjB,aAAL,CAAmBiB,aAAnB;AACH;AACJ;AAzDL;AAAA;AAAA,WA0DI,cAAKd,SAAL,EAA2B;AAAA;;AAAA,wCAARgB,MAAQ;AAARA,cAAQ;AAAA;;AACvB,kCAAKlB,aAAL,EAAmBmB,IAAnB,6BAAwBjB,SAAxB,SAAsCgB,MAAtC;AACH;AA5DL;;AAAA;AAAA","names":["invariant","nativeEmitterSubscriptionKey","EventEmitter","nativeModule","_listenerCount","_nativeModule","_eventEmitter","NativeEventEmitter","eventName","listener","Platform","OS","startObserving","nativeEmitterSubscription","addListener","subscription","removeSubscription","removedListenerCount","listenerCount","listeners","length","removeAllListeners","stopObserving","remove","params","emit"],"sourceRoot":"","sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/expo-modules-core/build/EventEmitter.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nexport class EventEmitter {\n    _listenerCount = 0;\n    _nativeModule;\n    _eventEmitter;\n    constructor(nativeModule) {\n        this._nativeModule = nativeModule;\n        this._eventEmitter = new NativeEventEmitter(nativeModule);\n    }\n    addListener(eventName, listener) {\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n            this._nativeModule.startObserving();\n        }\n        this._listenerCount++;\n        const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n        const subscription = {\n            [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n            remove: () => {\n                this.removeSubscription(subscription);\n            },\n        };\n        return subscription;\n    }\n    removeAllListeners(eventName) {\n        // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n        const removedListenerCount = this._eventEmitter.listenerCount\n            ? // @ts-ignore: this is available since 0.64\n                this._eventEmitter.listenerCount(eventName)\n            : // @ts-ignore: this is available in older versions\n                this._eventEmitter.listeners(eventName).length;\n        this._eventEmitter.removeAllListeners(eventName);\n        this._listenerCount -= removedListenerCount;\n        invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n            this._nativeModule.stopObserving();\n        }\n    }\n    removeSubscription(subscription) {\n        const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n        if (!nativeEmitterSubscription) {\n            return;\n        }\n        if ('remove' in nativeEmitterSubscription) {\n            // `react-native-web@0.17.1` doesn't support `removeSubscription`\n            nativeEmitterSubscription.remove();\n        }\n        else if ('removeSubscription' in this._eventEmitter) {\n            this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n        }\n        this._listenerCount--;\n        // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n        // called again with the same subscription\n        delete subscription[nativeEmitterSubscriptionKey];\n        // Release closed-over references to the emitter\n        subscription.remove = () => { };\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n            this._nativeModule.stopObserving();\n        }\n    }\n    emit(eventName, ...params) {\n        this._eventEmitter.emit(eventName, ...params);\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map"]},"metadata":{},"sourceType":"module"}