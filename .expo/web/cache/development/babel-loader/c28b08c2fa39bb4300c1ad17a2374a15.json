{"ast":null,"code":"import mergeOptions from 'merge-options';\nvar merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nfunction mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n\n  if (oldValue) {\n    var oldObject = JSON.parse(oldValue);\n    var newObject = JSON.parse(value);\n    var nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var _processResult;\n\n    var value = (_processResult = processResult === null || processResult === void 0 ? void 0 : processResult(result)) !== null && _processResult !== void 0 ? _processResult : null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\n\nvar AsyncStorage = {\n  getItem: function getItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.getItem(key);\n    }, callback);\n  },\n  setItem: function setItem(key, value, callback) {\n    return createPromise(function () {\n      return window.localStorage.setItem(key, value);\n    }, callback);\n  },\n  removeItem: function removeItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  },\n  mergeItem: function mergeItem(key, value, callback) {\n    return createPromise(function () {\n      return mergeLocalStorageItem(key, value);\n    }, callback);\n  },\n  clear: function clear(callback) {\n    return createPromise(function () {\n      return window.localStorage.clear();\n    }, callback);\n  },\n  getAllKeys: function getAllKeys(callback) {\n    return createPromise(function () {\n      var numberOfKeys = window.localStorage.length;\n      var keys = [];\n\n      for (var i = 0; i < numberOfKeys; i += 1) {\n        var key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n\n      return keys;\n    }, callback);\n  },\n  flushGetRequests: function flushGetRequests() {\n    return undefined;\n  },\n  multiGet: function multiGet(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.getItem(key);\n    });\n\n    var processResult = function processResult(result) {\n      return result.map(function (value, i) {\n        return [keys[i], value];\n      });\n    };\n\n    return createPromiseAll(promises, callback, processResult);\n  },\n  multiSet: function multiSet(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.setItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiRemove: function multiRemove(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.removeItem(key);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiMerge: function multiMerge(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      var _AsyncStorage$mergeIt, _AsyncStorage$mergeIt2;\n\n      return (_AsyncStorage$mergeIt = (_AsyncStorage$mergeIt2 = AsyncStorage.mergeItem) === null || _AsyncStorage$mergeIt2 === void 0 ? void 0 : _AsyncStorage$mergeIt2.call(AsyncStorage, item[0], item[1])) !== null && _AsyncStorage$mergeIt !== void 0 ? _AsyncStorage$mergeIt : Promise.reject('Not implemented');\n    });\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;","map":{"version":3,"mappings":"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","names":["mergeOptions","merge","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","_processResult","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","undefined","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge","_AsyncStorage$mergeIt","_AsyncStorage$mergeIt2","call"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-native-async-storage/async-storage/lib/module/AsyncStorage.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nfunction mergeLocalStorageItem(key, value) {\n  const oldValue = window.localStorage.getItem(key);\n\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise(getValue, callback) {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(result => {\n    var _processResult;\n\n    const value = (_processResult = processResult === null || processResult === void 0 ? void 0 : processResult(result)) !== null && _processResult !== void 0 ? _processResult : null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, errors => {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\n\nconst AsyncStorage = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(() => window.localStorage.setItem(key, value), callback);\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: callback => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: callback => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(item => {\n      var _AsyncStorage$mergeIt, _AsyncStorage$mergeIt2;\n\n      return (_AsyncStorage$mergeIt = (_AsyncStorage$mergeIt2 = AsyncStorage.mergeItem) === null || _AsyncStorage$mergeIt2 === void 0 ? void 0 : _AsyncStorage$mergeIt2.call(AsyncStorage, item[0], item[1])) !== null && _AsyncStorage$mergeIt !== void 0 ? _AsyncStorage$mergeIt : Promise.reject('Not implemented');\n    });\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;\n//# sourceMappingURL=AsyncStorage.js.map"]},"metadata":{},"sourceType":"module"}