{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useNavigationState(selector) {\n  var navigation = useNavigation();\n\n  var _React$useState = React.useState(function () {\n    return selector(navigation.getState());\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      setResult = _React$useState2[1];\n\n  var selectorRef = React.useRef(selector);\n  React.useEffect(function () {\n    selectorRef.current = selector;\n  });\n  React.useEffect(function () {\n    var unsubscribe = navigation.addListener('state', function (e) {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP;AAOA,eAAe,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACnD,MAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAGA,wBAAsBD,KAAK,CAACK,QAAN,CAAe;AAAA,WAAMF,QAAQ,CAACC,UAAU,CAACE,QAAX,EAAD,CAAd;AAAA,GAAf,CAAtB;AAAA;AAAA,MAASC,SAAT;;AAEA,MAAMC,WAAW,GAAGR,KAAK,CAACS,MAAN,CAAaN,QAAb,CAApB;AACAH,OAAK,CAACU,SAAN,CAAgB,YAAM;AACpBF,eAAW,CAACG,OAAZ,GAAsBR,QAAtB;AACD,GAFD;AAGAH,OAAK,CAACU,SAAN,CAAgB,YAAM;AACpB,QAAME,WAAW,GAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,EAAgC,WAAC,EAAI;AACvDN,eAAS,CAACC,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT;AACD,KAFmB,CAApB;AAGA,WAAOJ,WAAP;AACD,GALD,EAKG,CAACR,UAAD,CALH;AAMA,SAAOD,QAAQ,CAACC,UAAU,CAACE,QAAX,EAAD,CAAf;AACD","names":["React","useNavigation","useNavigationState","selector","navigation","useState","getState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useNavigationState.js"],"sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState(selector) {\n  const navigation = useNavigation(); // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n\n  const [, setResult] = React.useState(() => selector(navigation.getState())); // We store the selector in a ref to avoid re-subscribing listeners every render\n\n  const selectorRef = React.useRef(selector);\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', e => {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}\n//# sourceMappingURL=useNavigationState.js.map"]},"metadata":{},"sourceType":"module"}