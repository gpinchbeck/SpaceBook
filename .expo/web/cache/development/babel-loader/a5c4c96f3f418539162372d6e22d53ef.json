{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\nvar visibleOverlays = [];\nexport function useOverlay(props, ref) {\n  var onClose = props.onClose,\n      shouldCloseOnBlur = props.shouldCloseOnBlur,\n      isOpen = props.isOpen,\n      _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n      isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism;\n  useEffect(function () {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return function () {\n      var index = visibleOverlays.indexOf(ref);\n\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  var onHide = function onHide() {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  var _useFocusWithin = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: function onBlurWithin() {\n      onClose && onClose();\n    }\n  }),\n      focusWithinProps = _useFocusWithin.focusWithinProps;\n\n  return {\n    overlayProps: _objectSpread({\n      onKeyDown: onKeyDown\n    }, focusWithinProps)\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,IAAMC,eAAe,GAAG,EAAxB;AAOA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AACrC,MACEC,OADF,GAKIF,KALJ,CACEE,OADF;AAAA,MAEEC,iBAFF,GAKIH,KALJ,CAEEG,iBAFF;AAAA,MAGEC,MAHF,GAKIJ,KALJ,CAGEI,MAHF;AAAA,8BAKIJ,KALJ,CAIEK,yBAJF;AAAA,MAIEA,yBAJF,sCAI8B,KAJ9B;AAOAT,WAAS,CAAC,YAAM;AACd,QAAIQ,MAAJ,EAAY;AACVN,qBAAe,CAACQ,IAAhB,CAAqBL,GAArB;AACD;;AAED,WAAO,YAAM;AACX,UAAIM,KAAK,GAAGT,eAAe,CAACU,OAAhB,CAAwBP,GAAxB,CAAZ;;AAEA,UAAIM,KAAK,IAAI,CAAb,EAAgB;AACdT,uBAAe,CAACW,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF,KAND;AAOD,GAZQ,EAYN,CAACH,MAAD,EAASH,GAAT,CAZM,CAAT;;AAcA,MAAIS,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,QAAIZ,eAAe,CAACA,eAAe,CAACa,MAAhB,GAAyB,CAA1B,CAAf,KAAgDV,GAAhD,IAAuDC,OAA3D,EAAoE;AAClEA,aAAO;AACR;AACF,GAJD;;AAOA,MAAIU,SAAS,GAAG,SAAZA,SAAY,EAAC,EAAI;AACnB,QAAIC,CAAC,CAACC,GAAF,KAAU,QAAV,IAAsB,CAACT,yBAA3B,EAAsD;AACpDQ,OAAC,CAACE,cAAF;AACAL,YAAM;AACP;AACF,GALD;;AAQA,wBAEIb,cAAc,CAAC;AACjBmB,cAAU,EAAE,CAACb,iBADI;AAEjBc,gBAAY,EAAE,wBAAM;AAClBf,aAAO,IAAIA,OAAO,EAAlB;AACD;AAJgB,GAAD,CAFlB;AAAA,MACEgB,gBADF,mBACEA,gBADF;;AAQA,SAAO;AACLC,gBAAY;AACVP,eAAS,EAATA;AADU,OAEPM,gBAFO;AADP,GAAP;AAMD","names":["useEffect","useFocusWithin","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","isKeyboardDismissDisabled","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","isDisabled","onBlurWithin","focusWithinProps","overlayProps"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-native-aria/overlays/lib/module/useOverlay.web.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\nconst visibleOverlays = [];\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\n\nexport function useOverlay(props, ref) {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false\n  } = props; // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]); // Only hide the overlay when it is the topmost visible overlay in the stack.\n\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  }; // Handle the escape key\n\n\n  let onKeyDown = e => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  }; // Handle clicking outside the overlay to close it\n\n\n  let {\n    focusWithinProps\n  } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    }\n  });\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps\n    }\n  };\n}\n//# sourceMappingURL=useOverlay.web.js.map"]},"metadata":{},"sourceType":"module"}