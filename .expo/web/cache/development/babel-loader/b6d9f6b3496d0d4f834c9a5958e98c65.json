{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, HStack, Image, FlatList, Divider, Fab, Modal, FormControl, Input } from 'native-base';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport Storage from \"./Storage\";\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar FriendsScreen = function (_Component) {\n  _inherits(FriendsScreen, _Component);\n\n  var _super = _createSuper(FriendsScreen);\n\n  function FriendsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FriendsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      friends: []\n    };\n    return _this;\n  }\n\n  _createClass(FriendsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      this.setState({\n        friends: []\n      });\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getFriends();\n\n        navigation.addListener('focus', function () {\n          _this2.setState({\n            friends: []\n          });\n\n          _this2.getFriends();\n        });\n      });\n    }\n  }, {\n    key: \"getFriends\",\n    value: function getFriends() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var friendsList = [];\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.json();\n      }).then(function (responseJson) {\n        var _loop = function _loop(i) {\n          console.log(responseJson[i]);\n\n          _this3.getProfileImage(responseJson[i].user_id).then(function (responseBlob) {\n            var responseUrl = URL.createObjectURL(responseBlob);\n            friendsList.push([responseJson[i], responseUrl]);\n\n            _this3.setState({\n              friends: friendsList\n            });\n\n            console.log(friendsList);\n          });\n        };\n\n        for (var i = 0; i < responseJson.length; i += 1) {\n          _loop(i);\n        }\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"getProfileImage\",\n    value: function getProfileImage(userId) {\n      console.log(userId);\n      var data = this.state.data;\n      return fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId + \"/photo\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.blob();\n      });\n    }\n  }, {\n    key: \"viewPost\",\n    value: function viewPost(item) {\n      return _jsx(HStack, {\n        children: _jsx(Box, {\n          children: _jsxs(HStack, {\n            space: 5,\n            justifyContent: \"flex-end\",\n            children: [_jsx(Image, {\n              source: {\n                uri: item[1]\n              },\n              size: 50,\n              borderRadius: \"100\",\n              alt: \"Profile Picture\"\n            }), _jsxs(VStack, {\n              children: [_jsxs(Text, {\n                bold: true,\n                children: [item[0].user_givenname, \" \", item[0].user_familyname]\n              }), _jsx(Text, {\n                children: item[0].text\n              })]\n            })]\n          })\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var navigation = this.props.navigation;\n      var friends = this.state.friends;\n      return _jsxs(NativeBaseProvider, {\n        children: [_jsx(Box, {\n          children: _jsx(FlatList, {\n            data: friends,\n            renderItem: function renderItem(_ref) {\n              var item = _ref.item;\n              return _jsx(Box, {\n                style: {\n                  borderWidth: 1,\n                  borderColor: 'gray'\n                },\n                children: _this4.viewPost(item)\n              });\n            },\n            keyExtractor: function keyExtractor(item, index) {\n              return index.toString();\n            }\n          })\n        }), _jsxs(Box, {\n          children: [_jsx(Button, {\n            title: \"Find friends\",\n            onPress: function onPress() {\n              return navigation.navigate('FindFriends');\n            }\n          }), _jsx(Button, {\n            title: \"Friend requests\",\n            onPress: function onPress() {\n              return navigation.navigate('FriendRequests');\n            }\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return FriendsScreen;\n}(Component);\n\nFriendsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FriendsScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/FriendsScreen.js"],"names":["React","Component","Box","NativeBaseProvider","Text","VStack","Button","Icon","Pressable","HStack","Image","FlatList","Divider","Fab","Modal","FormControl","Input","PropTypes","Moment","Storage","DisplayAlert","asyncStorage","displayAlert","FriendsScreen","props","state","data","friends","navigation","setState","getData","getFriends","addListener","friendsList","fetch","id","method","headers","token","then","response","status","Promise","reject","Error","json","responseJson","i","console","log","getProfileImage","user_id","responseBlob","responseUrl","URL","createObjectURL","push","length","catch","error","userId","blob","item","uri","user_givenname","user_familyname","text","borderWidth","borderColor","viewPost","index","toString","navigate","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, HStack, Image, FlatList, Divider, Fab, Modal, FormControl, Input } from 'native-base';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport Storage from './Storage'\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FriendsScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            friends: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        this.setState({friends: []});\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getFriends();\r\n            navigation.addListener('focus', () => {\r\n                this.setState({friends: []});\r\n                this.getFriends();\r\n            });\r\n        });\r\n    }\r\n\r\n    getFriends(){\r\n        const { data } = this.state; \r\n        const friendsList = [];\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            return response.json()\r\n        })\r\n        .then((responseJson) => {\r\n            for (let i = 0; i < responseJson.length; i+=1){\r\n                console.log(responseJson[i]);\r\n                this.getProfileImage(responseJson[i].user_id)\r\n                    .then((responseBlob) => {\r\n                        const responseUrl = URL.createObjectURL(responseBlob);\r\n\r\n                        friendsList.push([responseJson[i], responseUrl]);\r\n                        this.setState({\r\n                            friends: friendsList\r\n                        });\r\n                        console.log(friendsList);\r\n                    });\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    getProfileImage(userId) {\r\n        console.log(userId);\r\n        const { data } = this.state;\r\n        return fetch(`http://localhost:3333/api/1.0.0/user/${  userId  }/photo`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }\r\n            return response.blob();\r\n        })\r\n    }\r\n\r\n    viewPost(item){\r\n        return (\r\n        <HStack>\r\n            <Box>\r\n                <HStack space={5} justifyContent=\"flex-end\">\r\n                    <Image source={{uri: item[1]}} size={50} borderRadius=\"100\" alt=\"Profile Picture\"/>\r\n                    <VStack>\r\n                        <Text  bold>{item[0].user_givenname} {item[0].user_familyname}</Text>\r\n                        <Text>{item[0].text}</Text>\r\n                    </VStack>\r\n                </HStack>\r\n            </Box>\r\n        </HStack>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { friends } = this.state;\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Box>\r\n                    <FlatList\r\n                        data={friends}\r\n                        renderItem={({item}) => (\r\n                            <Box style={{borderWidth: 1, borderColor: 'gray'}}>\r\n                                {this.viewPost(item)}\r\n                            </Box>\r\n                        )}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                    />\r\n                </Box>\r\n                <Box>  \r\n                    <Button title='Find friends' onPress={() => navigation.navigate('FindFriends')}/>   \r\n                    <Button title='Friend requests' onPress={() => navigation.navigate('FriendRequests')}/>\r\n                </Box>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nFriendsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FriendsScreen;"]},"metadata":{},"sourceType":"module"}