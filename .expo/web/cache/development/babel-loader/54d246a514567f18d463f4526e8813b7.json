{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { listIds } from \"./utils\";\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\nexport function useListBox(props, state, ref) {\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _useSelectableList = useSelectableList(_objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _useSelectableList.listProps;\n\n  var id = useId(props.id);\n  listIds.set(state, id);\n\n  var _useLabel = useLabel(_objectSpread(_objectSpread({}, props), {}, {\n    id: id,\n    labelElementType: 'span'\n  })),\n      _labelProps = _useLabel.labelProps,\n      fieldProps = _useLabel.fieldProps;\n\n  var labelProps = mapDomPropsToRN(_labelProps);\n\n  var _listBoxProps = mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n    'aria-multiselectable': 'true'\n  } : {}, _objectSpread({\n    role: 'listbox'\n  }, mergeProps(fieldProps, listProps)));\n\n  var listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n  return {\n    labelProps: labelProps,\n    listBoxProps: listBoxProps\n  };\n}","map":{"version":3,"mappings":";;;;;;AAWA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,mBAA3C;AACA,SAASC,OAAT;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,0BAApD;AAQA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuC;AAC5C,MAAIC,QAAQ,GAAGZ,cAAc,CAACS,KAAD,EAAQ;AACnCI,aAAS,EAAE;AADwB,GAAR,CAA7B;;AAGA,2BAEIR,iBAAiB,iCAAMI,KAAN;AACnBE,OAAG,EAAHA,GADmB;AAEnBG,oBAAgB,EAAEJ,KAAK,CAACI,gBAFL;AAGnBC,cAAU,EAAEL,KAAK,CAACK,UAHC;AAInBC,gBAAY,EAAEN,KAAK,CAACM;AAJD,KAFrB;AAAA,MACEC,SADF,sBACEA,SADF;;AAQA,MAAIC,EAAE,GAAGf,KAAK,CAACM,KAAK,CAACS,EAAP,CAAd;AACAhB,SAAO,CAACiB,GAAR,CAAYT,KAAZ,EAAmBQ,EAAnB;;AACA,kBAGId,QAAQ,iCAAMK,KAAN;AACVS,MAAE,EAAFA,EADU;AAIVE,oBAAgB,EAAE;AAJR,KAHZ;AAAA,MACcC,WADd,aACEC,UADF;AAAA,MAEEC,UAFF,aAEEA,UAFF;;AASA,MAAMD,UAAU,GAAGhB,eAAe,CAACe,WAAD,CAAlC;;AAEA,MAAMG,aAAa,GAAGvB,UAAU,CAACW,QAAD,EAAWF,KAAK,CAACI,gBAAN,CAAuBW,aAAvB,KAAyC,UAAzC,GAAsD;AAC/F,4BAAwB;AADuE,GAAtD,GAEvC,EAF4B;AAG9BC,QAAI,EAAE;AAHwB,KAI3BzB,UAAU,CAACsB,UAAD,EAAaN,SAAb,CAJiB,EAAhC;;AAOA,MAAMU,YAAY,GAAGpB,kBAAkB,CAACiB,aAAD,EAAgBb,GAAhB,CAAvC;AACA,SAAO;AACLW,cAAU,EAAVA,UADK;AAELK,gBAAY,EAAZA;AAFK,GAAP;AAID","names":["filterDOMProps","mergeProps","listIds","useId","useLabel","useSelectableList","mapDomPropsToRN","useMapDomPropsToRN","useListBox","props","state","ref","domProps","labelable","selectionManager","collection","disabledKeys","listProps","id","set","labelElementType","_labelProps","labelProps","fieldProps","_listBoxProps","selectionMode","role","listBoxProps"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@react-native-aria/listbox/lib/module/useListBox.web.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { listIds } from './utils';\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox(props, state, ref) {\n  let domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    listProps\n  } = useSelectableList({ ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n  let id = useId(props.id);\n  listIds.set(state, id);\n  let {\n    labelProps: _labelProps,\n    fieldProps\n  } = useLabel({ ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  const labelProps = mapDomPropsToRN(_labelProps);\n\n  const _listBoxProps = mergeProps(domProps, state.selectionManager.selectionMode === 'multiple' ? {\n    'aria-multiselectable': 'true'\n  } : {}, {\n    role: 'listbox',\n    ...mergeProps(fieldProps, listProps)\n  });\n\n  const listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n  return {\n    labelProps,\n    listBoxProps\n  };\n}\n//# sourceMappingURL=useListBox.web.js.map"]},"metadata":{},"sourceType":"module"}