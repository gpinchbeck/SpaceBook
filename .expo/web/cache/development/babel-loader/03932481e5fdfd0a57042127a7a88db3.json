{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box, Input, NativeBaseProvider, Text, VStack, Button, Stack, Icon, Pressable, Center, useContrastText, HStack, Image, FlatList, Circle, ZStack, Divider, Fab } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar FeedScreen = function (_Component) {\n  _inherits(FeedScreen, _Component);\n\n  var _super = _createSuper(FeedScreen);\n\n  function FeedScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FeedScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      posts: [],\n      ids: [],\n      uploadModalVisible: false,\n      viewPostModalVisible: false,\n      postText: '',\n      currentPost: {},\n      userDet: [],\n      editText: '',\n      editVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(FeedScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getIds();\n\n        navigation.addListener('focus', function () {\n          _this2.getIds();\n        });\n      });\n    }\n  }, {\n    key: \"getIds\",\n    value: function getIds() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var idList = [data.id];\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.json();\n      }).then(function (responseJson) {\n        for (var i = 0; i < responseJson.length; i += 1) {\n          idList.push(responseJson[i].user_id);\n        }\n\n        _this3.setState({\n          ids: idList\n        });\n\n        _this3.getPosts();\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"getPosts\",\n    value: function getPosts() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          ids = _this$state.ids;\n      var postsList = [];\n      var idList = ids;\n\n      var _loop = function _loop(i) {\n        fetch(\"http://localhost:3333/api/1.0.0/user/\" + idList[i] + \"/post\", {\n          method: 'GET',\n          headers: {\n            'X-Authorization': data.token\n          }\n        }).then(function (response) {\n          if (response.status === 401) {\n            return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n          }\n\n          if (response.status === 403) {\n            return Promise.reject(new Error(\"Can only view the posts of yourself or your friends. Status: \" + response.status));\n          }\n\n          if (response.status === 404) {\n            return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n          }\n\n          if (response.status === 500) {\n            return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n          }\n\n          return response.json();\n        }).then(function (responseJson) {\n          if (responseJson.length > 0) {\n            var _loop2 = function _loop2(j) {\n              _this4.getProfileImage(idList[i]).then(function (responseBlob) {\n                var responseUrl = URL.createObjectURL(responseBlob);\n                postsList.push([responseJson[j], responseUrl]);\n\n                _this4.setState({\n                  posts: postsList\n                });\n              });\n            };\n\n            for (var j = 0; j < responseJson.length; j += 1) {\n              _loop2(j);\n            }\n          }\n        }).catch(function (error) {\n          displayAlert.displayAlert(error);\n        });\n      };\n\n      for (var i = 0; i < idList.length; i += 1) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"getProfileImage\",\n    value: function getProfileImage(userId) {\n      var data = this.state.data;\n      return fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId + \"/photo\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.blob();\n      });\n    }\n  }, {\n    key: \"uploadPost\",\n    value: function uploadPost() {\n      var _this5 = this;\n\n      var _this$state2 = this.state,\n          data = _this$state2.data,\n          postText = _this$state2.postText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: postText\n        })\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this5.getPosts();\n\n        return displayAlert.displayAlert('Post uploaded.');\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"deletePost\",\n    value: function deletePost(postId) {\n      var _this6 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/ \" + postId, {\n        method: 'DELETE',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only delete your own posts. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this6.getPosts();\n\n        _this6.setState({\n          viewPostModalVisible: false\n        });\n\n        return displayAlert.displayAlert('Post deleted.');\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"updatePost\",\n    value: function updatePost(postId) {\n      var _this7 = this;\n\n      var _this$state3 = this.state,\n          data = _this$state3.data,\n          editText = _this$state3.editText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post/\" + postId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: editText\n        })\n      }).then(function (response) {\n        if (response.status === 400) {\n          return Promise.reject(new Error(\"Bad request. Status: \" + response.status));\n        }\n\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only update your own posts. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this7.getPosts();\n\n        _this7.setState({\n          viewPostModalVisible: false\n        });\n\n        return displayAlert.displayAlert('Post updated.');\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"likePost\",\n    value: function likePost(userPostId, postId) {\n      var _this8 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + userPostId + \"/post/\" + postId + \"/like\", {\n        method: 'POST',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 400) {\n          return Promise.reject(new Error(\"Post already liked. Status: \" + response.status));\n        }\n\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only like your friends posts. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this8.getPosts();\n\n        _this8.setState({\n          viewPostModalVisible: false\n        });\n\n        return displayAlert.displayAlert('Post liked');\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"deleteLike\",\n    value: function deleteLike(userPostId, postId) {\n      var _this9 = this;\n\n      var data = this.state.data;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + userPostId + \"/post/\" + postId + \"/like\", {\n        method: 'DELETE',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"You have not liked this post. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this9.getPosts();\n\n        _this9.setState({\n          viewPostModalVisible: false\n        });\n\n        return displayAlert.displayAlert(\"Post unliked, \" + postId);\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"viewPost\",\n    value: function viewPost() {\n      var _this10 = this;\n\n      var posts = this.state.posts;\n      return _jsx(FlatList, {\n        extraData: this.state,\n        data: posts,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsxs(Pressable, {\n            style: styles.listView,\n            onPress: function onPress() {\n              _this10.setState({\n                viewPostModalVisible: true,\n                currentPost: item\n              });\n            },\n            children: [_jsxs(Text, {\n              children: [item.author.first_name, \" \", item.author.last_name]\n            }), _jsx(Text, {\n              children: _jsx(Moment, {\n                date: item.timestamp,\n                format: \"LLLL\"\n              })\n            }), _jsx(Text, {\n              children: item.text\n            }), _jsxs(Text, {\n              style: styles.likeView,\n              children: [\"Likes: \", item.numLikes]\n            })]\n          });\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        }\n      });\n    }\n  }, {\n    key: \"viewSinglePost\",\n    value: function viewSinglePost() {\n      var _this11 = this;\n\n      var _this$state4 = this.state,\n          data = _this$state4.data,\n          currentPost = _this$state4.currentPost,\n          editVisible = _this$state4.editVisible,\n          editText = _this$state4.editText;\n\n      if (Object.keys(currentPost).length > 0) {\n        return _jsxs(View, {\n          style: styles.singlePostView,\n          children: [_jsxs(Text, {\n            children: [currentPost.author.first_name, \" \", currentPost.author.last_name]\n          }), _jsx(Text, {\n            children: _jsx(Moment, {\n              data: currentPost.timestamp,\n              format: \"LLLL\"\n            })\n          }), _jsx(Text, {\n            children: currentPost.text\n          }), _jsxs(Text, {\n            style: styles.likeView,\n            children: [\"Likes: \", currentPost.numLikes]\n          }), editVisible && _jsxs(View, {\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter text\",\n              onChangeText: function onChangeText(newEditText) {\n                return _this11.setState({\n                  editText: newEditText\n                });\n              },\n              value: editText\n            }), _jsx(Button, {\n              title: \"Update\",\n              onPress: function onPress() {\n                return _this11.updatePost(currentPost.post_id);\n              }\n            })]\n          }), !editVisible && currentPost.author.user_id === data.id && _jsx(Button, {\n            title: \"Edit\",\n            onPress: function onPress() {\n              return _this11.setState({\n                editVisible: true\n              });\n            }\n          }), !editVisible && currentPost.author.user_id === data.id && _jsx(Button, {\n            title: \"Delete\",\n            onPress: function onPress() {\n              return _this11.deletePost(currentPost.post_id);\n            }\n          }), !editVisible && currentPost.author.user_id !== data.id && _jsx(Button, {\n            title: \"Like\",\n            onPress: function onPress() {\n              return _this11.likePost(currentPost.author.user_id, currentPost.post_id);\n            }\n          }), !editVisible && currentPost.author.user_id !== data.id && _jsx(Button, {\n            title: \"Unlike\",\n            onPress: function onPress() {\n              return _this11.deleteLike(currentPost.author.user_id, currentPost.post_id);\n            }\n          }), _jsx(Button, {\n            title: \"Cancel\",\n            onPress: function onPress() {\n              _this11.setState({\n                viewPostModalVisible: false,\n                editVisible: false,\n                editText: ''\n              });\n            }\n          })]\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this12 = this;\n\n      var navigation = this.props.navigation;\n      var _this$state5 = this.state,\n          uploadModalVisible = _this$state5.uploadModalVisible,\n          viewPostModalVisible = _this$state5.viewPostModalVisible,\n          postText = _this$state5.postText,\n          posts = _this$state5.posts;\n      return _jsx(NativeBaseProvider, {\n        children: _jsxs(Box, {\n          flex: 1,\n          boxSize: \"100%\",\n          children: [_jsx(FlatList, {\n            extraData: this.state,\n            data: posts,\n            renderItem: function renderItem(_ref2) {\n              var item = _ref2.item;\n              return _jsxs(Pressable, {\n                onPress: function onPress() {\n                  _this12.setState({\n                    viewPostModalVisible: true,\n                    currentPost: item\n                  });\n                },\n                pl: \"5\",\n                pr: \"5\",\n                pb: \"5\",\n                pt: \"5\",\n                children: [_jsxs(HStack, {\n                  justifyContent: \"space-between\",\n                  children: [_jsx(Box, {\n                    children: _jsxs(HStack, {\n                      space: 5,\n                      children: [_jsx(Image, {\n                        source: {\n                          uri: item[1]\n                        },\n                        size: 50,\n                        borderRadius: \"100\",\n                        alt: \"Profile Picture\"\n                      }), _jsxs(VStack, {\n                        children: [_jsxs(Text, {\n                          bold: true,\n                          children: [item[0].author.first_name, \" \", item[0].author.last_name]\n                        }), _jsx(Text, {\n                          children: item[0].text\n                        })]\n                      })]\n                    })\n                  }), _jsxs(VStack, {\n                    children: [_jsx(Text, {\n                      children: _jsx(Moment, {\n                        date: item[0].timestamp,\n                        format: \"D MMM\"\n                      })\n                    }), _jsx(Box, {\n                      alignSelf: \"flex-start\",\n                      children: _jsxs(Text, {\n                        children: [\"Likes: \", item[0].numLikes]\n                      })\n                    })]\n                  })]\n                }), _jsx(Divider, {\n                  mt: 10,\n                  bg: \"muted.400\"\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item, index) {\n              return index.toString();\n            }\n          }), _jsx(Fab, {\n            onPress: function onPress() {\n              return _this12.setState({\n                uploadModalVisible: true\n              });\n            },\n            bg: \"darkBlue.700\",\n            icon: _jsx(Icon, {\n              as: _jsx(MaterialIcons, {\n                style: {\n                  color: \"white\",\n                  fontSize: 30\n                },\n                name: \"post-add\"\n              })\n            }),\n            size: 50,\n            justifySelf: \"center\",\n            alignSelf: \"center\",\n            position: \"absolute\",\n            bottom: \"25\"\n          })]\n        })\n      });\n    }\n  }]);\n\n  return FeedScreen;\n}(Component);\n\nFeedScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FeedScreen;","map":{"version":3,"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/components/FeedScreen.js"],"names":["React","Component","Box","Input","NativeBaseProvider","Text","VStack","Button","Stack","Icon","Pressable","Center","useContrastText","HStack","Image","FlatList","Circle","ZStack","Divider","Fab","MaterialIcons","PropTypes","Moment","DisplayAlert","Storage","asyncStorage","displayAlert","FeedScreen","props","state","data","posts","ids","uploadModalVisible","viewPostModalVisible","postText","currentPost","userDet","editText","editVisible","navigation","getData","setState","getIds","addListener","idList","id","fetch","method","headers","token","then","response","status","Promise","reject","Error","json","responseJson","i","length","push","user_id","getPosts","catch","error","postsList","j","getProfileImage","responseBlob","responseUrl","URL","createObjectURL","userId","blob","body","JSON","stringify","text","postId","userPostId","item","styles","listView","author","first_name","last_name","timestamp","likeView","numLikes","index","toString","Object","keys","singlePostView","newEditText","updatePost","post_id","deletePost","likePost","deleteLike","uri","color","fontSize","propTypes","shape","navigate","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, Input, NativeBaseProvider, Text, VStack, Button, Stack, Icon, Pressable, Center, useContrastText, HStack, Image, FlatList, Circle, ZStack, Divider, Fab } from 'native-base';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n// import { Button, FlatList, Text, View, Modal, TextInput, Pressable, StyleSheet } from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FeedScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            posts: [],\r\n            ids: [],\r\n            uploadModalVisible: false,\r\n            viewPostModalVisible: false,\r\n            postText: '',\r\n            currentPost: {},\r\n            userDet: [],\r\n            editText: '',\r\n            editVisible: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getIds();\r\n            navigation.addListener('focus', () => {\r\n                this.getIds();\r\n            });\r\n        });\r\n    }\r\n\r\n    getIds(){\r\n        const { data } = this.state;\r\n        const idList = [data.id];\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }\r\n            return response.json()\r\n        })\r\n        .then((responseJson) => {\r\n            for (let i = 0; i < responseJson.length; i+=1){\r\n                idList.push(responseJson[i].user_id);\r\n            }\r\n            this.setState({ids: idList});\r\n            this.getPosts();\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        });\r\n    }\r\n\r\n    getPosts(){\r\n        const { data, ids } = this.state;\r\n        const postsList = [];\r\n        const idList = ids;\r\n        for (let i = 0; i < idList.length; i+=1){\r\n            fetch(`http://localhost:3333/api/1.0.0/user/${ idList[i] }/post`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'X-Authorization': data.token\r\n                }\r\n            })\r\n            .then((response) => {\r\n                if (response.status === 401){\r\n                    return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 403){\r\n                    return Promise.reject(new Error(`Can only view the posts of yourself or your friends. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 404){\r\n                    return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n                }\r\n                if (response.status === 500){\r\n                    return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n                }\r\n                return response.json()\r\n            })\r\n            .then((responseJson) => {\r\n                if (responseJson.length > 0){\r\n                    for (let j=0;j<responseJson.length;j+=1){\r\n                        this.getProfileImage(idList[i])\r\n                        .then((responseBlob) => {\r\n                            const responseUrl = URL.createObjectURL(responseBlob);\r\n                            postsList.push([responseJson[j], responseUrl])\r\n                            this.setState({\r\n                                posts: postsList\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                displayAlert.displayAlert(error);\r\n            });\r\n        }\r\n    }\r\n\r\n    getProfileImage(userId) {\r\n        const { data } = this.state;\r\n        return fetch(`http://localhost:3333/api/1.0.0/user/${  userId  }/photo`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }\r\n            return response.blob();\r\n        })\r\n    }\r\n\r\n    uploadPost(){\r\n        const { data, postText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({\r\n                text: postText\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }            \r\n            this.getPosts();\r\n            return displayAlert.displayAlert('Post uploaded.');\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    deletePost(postId) {\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/ ${ postId }`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only delete your own posts. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false});\r\n            return displayAlert.displayAlert('Post deleted.');\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    updatePost(postId) {\r\n        const { data, editText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post/${ postId }`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({text: editText})\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 400){\r\n                return Promise.reject(new Error(`Bad request. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only update your own posts. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false})\r\n            return displayAlert.displayAlert('Post updated.');\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        });\r\n    }\r\n\r\n    likePost(userPostId, postId){\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ userPostId }/post/${ postId }/like`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 400){\r\n                return Promise.reject(new Error(`Post already liked. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only like your friends posts. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false});\r\n            return displayAlert.displayAlert('Post liked');\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    deleteLike(userPostId, postId) {\r\n        const { data } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ userPostId }/post/${ postId }/like`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`You have not liked this post. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            this.getPosts();\r\n            this.setState({viewPostModalVisible: false});\r\n            return displayAlert.displayAlert(`Post unliked, ${postId}`);\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    viewPost(){\r\n        const { posts } = this.state;\r\n        return (\r\n            <FlatList extraData={this.state} data={posts}\r\n                renderItem={({item}) => (\r\n                    <Pressable style={styles.listView} onPress={() => {this.setState({viewPostModalVisible: true, currentPost: item})}}>\r\n                        <Text>{item.author.first_name} {item.author.last_name}</Text>\r\n                        <Text><Moment date={item.timestamp} format=\"LLLL\"/></Text>\r\n                        <Text>{item.text}</Text>\r\n                        <Text style={styles.likeView}>Likes: {item.numLikes}</Text>\r\n                    </Pressable>\r\n                )}\r\n                keyExtractor={(item, index) => index.toString()}\r\n            />\r\n        )\r\n    }\r\n\r\n    viewSinglePost(){\r\n        const { data, currentPost, editVisible, editText } = this.state;\r\n        if(Object.keys(currentPost).length > 0){\r\n            return (\r\n                <View style={styles.singlePostView}>\r\n                    <Text>{currentPost.author.first_name} {currentPost.author.last_name}</Text>\r\n                    <Text><Moment data={currentPost.timestamp} format=\"LLLL\"/></Text>\r\n                    <Text>{currentPost.text}</Text>\r\n                    <Text style={styles.likeView}>Likes: {currentPost.numLikes}</Text>\r\n                    {editVisible && \r\n                        <View>\r\n                            <TextInput placeholder='Enter text' onChangeText={(newEditText) => this.setState({editText: newEditText})} value={editText}/>\r\n                            <Button title='Update' onPress={() => this.updatePost(currentPost.post_id)}/>\r\n                        </View>}\r\n                    {!editVisible && (currentPost.author.user_id === data.id) && <Button title='Edit' onPress={() => this.setState({editVisible: true})}/>}\r\n                    {!editVisible && (currentPost.author.user_id === data.id) && <Button title='Delete' onPress={() => this.deletePost(currentPost.post_id)}/>}\r\n                    {!editVisible && (currentPost.author.user_id !== data.id) && <Button title='Like' onPress={() => this.likePost(currentPost.author.user_id,currentPost.post_id)}/>}\r\n                    {!editVisible && (currentPost.author.user_id !== data.id) && <Button title='Unlike' onPress={() => this.deleteLike(currentPost.author.user_id,currentPost.post_id)}/>}\r\n                    <Button title='Cancel' onPress={() => {this.setState({viewPostModalVisible: false, editVisible: false, editText: ''})}}/>\r\n                </View>\r\n            )\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render(){\r\n        const { navigation } = this.props;\r\n        const { uploadModalVisible, viewPostModalVisible, postText, posts } = this.state;\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Box flex={1} boxSize=\"100%\">\r\n                    <FlatList extraData={this.state} data={posts}\r\n                        renderItem={({item}) => (\r\n                            <Pressable onPress={() => {this.setState({viewPostModalVisible: true, currentPost: item})}} pl=\"5\" pr=\"5\" pb=\"5\" pt=\"5\">\r\n                                <HStack justifyContent=\"space-between\">\r\n                                    <Box>\r\n                                        <HStack space={5}>\r\n                                            <Image source={{uri: item[1]}} size={50} borderRadius=\"100\" alt=\"Profile Picture\"/>\r\n                                            <VStack>\r\n                                                <Text  bold>{item[0].author.first_name} {item[0].author.last_name}</Text>\r\n                                                <Text>{item[0].text}</Text>\r\n                                            </VStack>\r\n                                        </HStack>\r\n                                    </Box>\r\n                                    <VStack>\r\n                                        <Text><Moment date={item[0].timestamp} format=\"D MMM\"/></Text>\r\n                                        <Box alignSelf=\"flex-start\">\r\n                                            <Text>Likes: {item[0].numLikes}</Text>\r\n                                        </Box>\r\n                                    </VStack>\r\n                                </HStack>\r\n                                <Divider mt={10} bg=\"muted.400\"/>\r\n                            </Pressable>\r\n                        )}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                    />\r\n                    <Fab onPress={() => this.setState({uploadModalVisible: true})} bg=\"darkBlue.700\" icon={<Icon as={<MaterialIcons style={{color: \"white\", fontSize: 30}} name=\"post-add\"/>}/>} size={50} justifySelf=\"center\" alignSelf=\"center\" position=\"absolute\" bottom=\"25\"/>\r\n                </Box>\r\n            </NativeBaseProvider>\r\n        );\r\n        // return (\r\n        //     <View style={styles.feedView}>\r\n        //         <Modal animationType='none' \r\n        //             transparent\r\n        //             visible={uploadModalVisible} \r\n        //             onRequestClose={() => {\r\n        //                 this.setState({uploadModalVisible: !uploadModalVisible});\r\n        //             }}\r\n        //         >\r\n        //             <View style={styles.centeredViewDark}>\r\n        //                 <View style={styles.modalView}>\r\n        //                     <TextInput placeholder='Enter text...' onChangeText={(newPostText) => this.setState({postText: newPostText})} value={postText}/>\r\n        //                     <Button title='Post' onPress={() => {\r\n        //                         this.uploadPost();\r\n        //                         this.setState({uploadModalVisible: false, postText: ''})\r\n        //                     }}/>\r\n        //                     <Button title='Save as draft' onPress={() => {\r\n        //                         asyncStorage.saveDraft(postText);\r\n        //                         this.setState({uploadModalVisible: false, postText: ''})\r\n        //                         displayAlert.displayAlert('Post saved as draft.');\r\n        //                     }}/>\r\n        //                     <Button title='Cancel' onPress={() => this.setState({uploadModalVisible: false, postText: ''})}/>\r\n        //                 </View>\r\n        //             </View>\r\n        //         </Modal>\r\n        //         <Modal animationType='none'\r\n        //             transparent\r\n        //             visible={viewPostModalVisible}\r\n        //             onRequestClose={() => {\r\n        //                 this.setState({viewPostModalVisible: !viewPostModalVisible});\r\n        //             }}\r\n        //         >\r\n        //             <View style={styles.centeredViewDark}>\r\n        //                 <View style={styles.modalView}>\r\n        //                     {this.viewSinglePost()}\r\n        //                 </View>\r\n        //             </View>\r\n        //         </Modal>\r\n        //         <View style={{flex: 1}}>\r\n        //             <View style={styles.listView}>\r\n        //                 {this.viewPost()}\r\n        //             </View>\r\n        //             <View>\r\n        //                 <Button title='Add post' onPress={() => this.setState({uploadModalVisible: true})}/>\r\n        //                 <Button title='Drafts' onPress={() => navigation.navigate('Drafts')}/>\r\n        //             </View>\r\n        //         </View>\r\n        //     </View>\r\n        // )\r\n    }\r\n}\r\n\r\nFeedScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FeedScreen;"]},"metadata":{},"sourceType":"module"}