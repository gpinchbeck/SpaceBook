{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DateTimePicker from 'react-datetime-picker';\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\n\nvar DraftsScreen = function (_Component) {\n  _inherits(DraftsScreen, _Component);\n\n  var _super = _createSuper(DraftsScreen);\n\n  function DraftsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, DraftsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      drafts: [],\n      currentDraft: '',\n      viewDraftModalVisible: false,\n      viewDate: false,\n      date: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(DraftsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getDrafts();\n    }\n  }, {\n    key: \"getDrafts\",\n    value: function getDrafts() {\n      var res;\n      return _regeneratorRuntime.async(function getDrafts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(asyncStorage.getDrafts());\n\n            case 2:\n              res = _context.sent;\n              this.setState({\n                drafts: res\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          drafts = _this$state.drafts,\n          viewDraftModalVisible = _this$state.viewDraftModalVisible,\n          currentDraft = _this$state.currentDraft,\n          viewDate = _this$state.viewDate,\n          date = _this$state.date;\n      return _jsxs(View, {\n        children: [_jsx(Modal, {\n          animationType: \"none\",\n          transparent: true,\n          visible: viewDraftModalVisible,\n          onRequestClose: function onRequestClose() {\n            _this2.setState({\n              viewDraftModalVisible: !viewDraftModalVisible\n            });\n          },\n          children: _jsxs(View, {\n            children: [_jsx(Text, {\n              children: currentDraft\n            }), _jsx(Button, {\n              title: \"Cancel\",\n              onPress: function onPress() {\n                return _this2.setState({\n                  viewDraftModalVisible: false\n                });\n              }\n            }), _jsx(Button, {\n              title: \"Post\"\n            }), _jsx(Button, {\n              title: \"Schedule\",\n              onPress: function onPress() {\n                return _this2.setState({\n                  viewDate: !viewDate\n                });\n              }\n            }), viewDate && _jsxs(View, {\n              children: [_jsx(DateTimePicker, {\n                onChange: function onChange(newDate) {\n                  return _this2.setState({\n                    date: newDate\n                  });\n                },\n                value: date\n              }), _jsx(Button, {\n                title: \"Confirm scheduled post\",\n                onPress: function onPress() {\n                  return console.log(date);\n                }\n              })]\n            })]\n          })\n        }), _jsx(FlatList, {\n          data: drafts,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(View, {\n              children: _jsx(Pressable, {\n                onPress: function onPress() {\n                  _this2.setState({\n                    viewDraftModalVisible: true,\n                    currentDraft: item\n                  });\n                },\n                children: _jsx(Text, {\n                  children: item\n                })\n              })\n            });\n          },\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          }\n        })]\n      });\n    }\n  }]);\n\n  return DraftsScreen;\n}(Component);\n\nexport default DraftsScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/DraftsScreen.js"],"names":["React","Component","DateTimePicker","Storage","asyncStorage","DraftsScreen","props","state","drafts","currentDraft","viewDraftModalVisible","viewDate","date","Date","getDrafts","res","setState","newDate","console","log","item","index","toString"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;AAKA,OAAOC,cAAP,MAA2B,uBAA3B;AAGA,OAAOC,OAAP;;;AAEA,IAAMC,YAAY,GAAG,IAAID,OAAJ,EAArB;;IAEME,Y;;;;;AACF,wBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,YAAY,EAAE,EAFL;AAGTC,MAAAA,qBAAqB,EAAE,KAHd;AAITC,MAAAA,QAAQ,EAAE,KAJD;AAKTC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AALG,KAAb;AAHc;AAUjB;;;;WAED,6BAAmB;AACf,WAAKC,SAAL;AAEH;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBV,YAAY,CAACU,SAAb,EADtB;;AAAA;AACUC,cAAAA,GADV;AAEI,mBAAKC,QAAL,CAAc;AAACR,gBAAAA,MAAM,EAAEO;AAAT,eAAd;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WA6BA,kBAAQ;AAAA;;AACJ,wBAAwE,KAAKR,KAA7E;AAAA,UAAQC,MAAR,eAAQA,MAAR;AAAA,UAAgBE,qBAAhB,eAAgBA,qBAAhB;AAAA,UAAuCD,YAAvC,eAAuCA,YAAvC;AAAA,UAAqDE,QAArD,eAAqDA,QAArD;AAAA,UAA+DC,IAA/D,eAA+DA,IAA/D;AACA,aACI,MAAC,IAAD;AAAA,mBACI,KAAC,KAAD;AAAO,UAAA,aAAa,EAAC,MAArB;AACI,UAAA,WAAW,MADf;AAEI,UAAA,OAAO,EAAEF,qBAFb;AAGI,UAAA,cAAc,EAAE,0BAAM;AAClB,YAAA,MAAI,CAACM,QAAL,CAAc;AAACN,cAAAA,qBAAqB,EAAE,CAACA;AAAzB,aAAd;AACH,WALL;AAAA,oBAOI,MAAC,IAAD;AAAA,uBACI,KAAC,IAAD;AAAA,wBAAOD;AAAP,cADJ,EAEI,KAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,QAAd;AAAuB,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACO,QAAL,CAAc;AAACN,kBAAAA,qBAAqB,EAAE;AAAxB,iBAAd,CAAN;AAAA;AAAhC,cAFJ,EAGI,KAAC,MAAD;AAAQ,cAAA,KAAK,EAAC;AAAd,cAHJ,EAII,KAAC,MAAD;AAAQ,cAAA,KAAK,EAAC,UAAd;AAAyB,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACM,QAAL,CAAc;AAACL,kBAAAA,QAAQ,EAAE,CAACA;AAAZ,iBAAd,CAAN;AAAA;AAAlC,cAJJ,EAKKA,QAAQ,IACL,MAAC,IAAD;AAAA,yBACI,KAAC,cAAD;AAAgB,gBAAA,QAAQ,EAAE,kBAACM,OAAD;AAAA,yBAAa,MAAI,CAACD,QAAL,CAAc;AAACJ,oBAAAA,IAAI,EAAEK;AAAP,mBAAd,CAAb;AAAA,iBAA1B;AAAuE,gBAAA,KAAK,EAAEL;AAA9E,gBADJ,EAEI,KAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,wBAAd;AAAuC,gBAAA,OAAO,EAAE;AAAA,yBAAMM,OAAO,CAACC,GAAR,CAAYP,IAAZ,CAAN;AAAA;AAAhD,gBAFJ;AAAA,cANR;AAAA;AAPJ,UADJ,EAoBI,KAAC,QAAD;AAAU,UAAA,IAAI,EAAEJ,MAAhB;AACI,UAAA,UAAU,EAAE;AAAA,gBAAEY,IAAF,QAAEA,IAAF;AAAA,mBACR,KAAC,IAAD;AAAA,wBACI,KAAC,SAAD;AAAW,gBAAA,OAAO,EAAE,mBAAM;AACtB,kBAAA,MAAI,CAACJ,QAAL,CAAc;AAACN,oBAAAA,qBAAqB,EAAE,IAAxB;AAA8BD,oBAAAA,YAAY,EAAEW;AAA5C,mBAAd;AACH,iBAFD;AAAA,0BAGI,KAAC,IAAD;AAAA,4BAAOA;AAAP;AAHJ;AADJ,cADQ;AAAA,WADhB;AAUI,UAAA,YAAY,EAAE,sBAACA,IAAD,EAAOC,KAAP;AAAA,mBAAiBA,KAAK,CAACC,QAAN,EAAjB;AAAA;AAVlB,UApBJ;AAAA,QADJ;AAoCH;;;;EArFsBrB,S;;AAwF3B,eAAeI,YAAf","sourcesContent":["import React, { Component } from 'react';\r\n// import Moment from 'react-moment';\r\nimport { Button, FlatList, Modal, Pressable, Text, View } from 'react-native';\r\n// import BackgroundFetch from 'react-native-background-fetch';\r\n// import BackgroundTimer from 'react-native-background-timer';\r\nimport DateTimePicker from 'react-datetime-picker';\r\n// import { BackgroundFetchOptions, BackgroundFetchResult, BackgroundFetchStatus } from 'react-native-web-background-fetch';\r\n\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nclass DraftsScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            drafts: [],\r\n            currentDraft: '',\r\n            viewDraftModalVisible: false,\r\n            viewDate: false,\r\n            date: new Date()\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getDrafts();\r\n        // BackgroundFetchOptions\r\n    }\r\n\r\n    async getDrafts(){\r\n        const res = await asyncStorage.getDrafts();\r\n        this.setState({drafts: res});\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     this.getDrafts();\r\n    //     const schedDate = Moment.add(0, 'd').set({hour:11,minute:40,second:0,millisecod:0})\r\n    //     const diffTime = schedDate.diff(Moment())\r\n    //     this.timeoutId = BackgroundTimer.setTimeout(() => {\r\n    //         console.log('tac');\r\n    //     }, diffTime);\r\n    // }\r\n\r\n    // componentWillUnmount(){\r\n    //     BackgroundTimer.clearTimeout(this.timeoutId);\r\n    // }\r\n\r\n    // async getDrafts(){\r\n    //     const res = await asyncStorage.getDrafts();\r\n    //     this.setState({drafts: res});\r\n    // }\r\n\r\n    // schedTest(){\r\n    //     this.timeoutId = BackgroundTimer.setTimeout(() => {\r\n    //         console.log('tac');\r\n    //     }, 10000);\r\n    // }\r\n\r\n    render(){\r\n        const { drafts, viewDraftModalVisible, currentDraft, viewDate, date } = this.state;\r\n        return (\r\n            <View>\r\n                <Modal animationType='none'\r\n                    transparent\r\n                    visible={viewDraftModalVisible}\r\n                    onRequestClose={() => {\r\n                        this.setState({viewDraftModalVisible: !viewDraftModalVisible});\r\n                    }}\r\n                >\r\n                    <View>\r\n                        <Text>{currentDraft}</Text>\r\n                        <Button title='Cancel' onPress={() => this.setState({viewDraftModalVisible: false})}/>\r\n                        <Button title='Post'/>\r\n                        <Button title='Schedule' onPress={() => this.setState({viewDate: !viewDate})}/>\r\n                        {viewDate && \r\n                            <View>\r\n                                <DateTimePicker onChange={(newDate) => this.setState({date: newDate})} value={date}/>\r\n                                <Button title='Confirm scheduled post' onPress={() => console.log(date)}/>\r\n                            </View>}\r\n                    </View>\r\n                </Modal>\r\n                <FlatList data={drafts}\r\n                    renderItem={({item}) => (\r\n                        <View>\r\n                            <Pressable onPress={() => {\r\n                                this.setState({viewDraftModalVisible: true, currentDraft: item})\r\n                            }}>\r\n                                <Text>{item}</Text>\r\n                            </Pressable>\r\n                        </View>\r\n                    )}\r\n                    keyExtractor={(item, index) => index.toString()}\r\n                />\r\n                {/* <Button title='test' onPress={() => this.schedTest()}/> */}\r\n            </View>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DraftsScreen;"]},"metadata":{},"sourceType":"module"}