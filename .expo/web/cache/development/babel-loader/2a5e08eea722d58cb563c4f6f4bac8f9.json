{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { useRef as $f0goU$useRef, useState as $f0goU$useState, useMemo as $f0goU$useMemo } from \"react\";\nimport { useControlledState as $f0goU$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $ec35bdc00c823be9$exports = {};\n$parcel$export($ec35bdc00c823be9$exports, \"useMultipleSelectionState\", function () {\n  return $ec35bdc00c823be9$export$253fe78d46329472;\n});\n\nvar $84eb7a4250035b1f$export$52baac22726c72bf = function (_Set) {\n  _inherits($84eb7a4250035b1f$export$52baac22726c72bf, _Set);\n\n  var _super = _createSuper($84eb7a4250035b1f$export$52baac22726c72bf);\n\n  function $84eb7a4250035b1f$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n\n    _classCallCheck(this, $84eb7a4250035b1f$export$52baac22726c72bf);\n\n    _this = _super.call(this, keys);\n\n    if (keys instanceof $84eb7a4250035b1f$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n\n    return _this;\n  }\n\n  return _createClass($84eb7a4250035b1f$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\n\nfunction $ec35bdc00c823be9$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n    if (!setB.has(item)) return false;\n  }\n\n  return true;\n}\n\nfunction $ec35bdc00c823be9$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n      disallowEmptySelection = props.disallowEmptySelection,\n      allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents;\n  var isFocusedRef = $f0goU$useRef(false);\n\n  var _$f0goU$useState = $f0goU$useState(false),\n      _$f0goU$useState2 = _slicedToArray(_$f0goU$useState, 2),\n      _setFocused = _$f0goU$useState2[1];\n\n  var focusedKeyRef = $f0goU$useRef(null);\n  var childFocusStrategyRef = $f0goU$useRef(null);\n\n  var _$f0goU$useState3 = $f0goU$useState(null),\n      _$f0goU$useState4 = _slicedToArray(_$f0goU$useState3, 2),\n      _setFocusedKey = _$f0goU$useState4[1];\n\n  var selectedKeysProp = $f0goU$useMemo(function () {\n    return $ec35bdc00c823be9$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $f0goU$useMemo(function () {\n    return $ec35bdc00c823be9$var$convertSelection(props.defaultSelectedKeys, new $84eb7a4250035b1f$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n\n  var _$f0goU$useControlled = $f0goU$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n      _$f0goU$useControlled2 = _slicedToArray(_$f0goU$useControlled, 2),\n      selectedKeys = _$f0goU$useControlled2[0],\n      _setSelectedKeys = _$f0goU$useControlled2[1];\n\n  var disabledKeysProp = $f0goU$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n\n  var _$f0goU$useState5 = $f0goU$useState(props.selectionBehavior || 'toggle'),\n      _$f0goU$useState6 = _slicedToArray(_$f0goU$useState5, 2),\n      selectionBehavior = _$f0goU$useState6[0],\n      setSelectionBehavior = _$f0goU$useState6[1];\n\n  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n\n      _setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$ec35bdc00c823be9$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction $ec35bdc00c823be9$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $84eb7a4250035b1f$export$52baac22726c72bf(selection);\n}\n\nvar $1c74ece56c82b9c4$exports = {};\n$parcel$export($1c74ece56c82b9c4$exports, \"SelectionManager\", function () {\n  return $1c74ece56c82b9c4$export$6c8a5aaad13c9852;\n});\n\nvar $1c74ece56c82b9c4$export$6c8a5aaad13c9852 = function () {\n  function $1c74ece56c82b9c4$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $1c74ece56c82b9c4$export$6c8a5aaad13c9852);\n\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n\n  _createClass($1c74ece56c82b9c4$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? !this.state.disabledKeys.has(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') selection = new $84eb7a4250035b1f$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $84eb7a4250035b1f$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var key = _step4.value;\n          selection.delete(key);\n        }\n\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step5; !(_step5 = _iterator5()).done;) {\n          var key1 = _step5.value;\n          if (!this.state.disabledKeys.has(key1)) selection.add(key1);\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) return key;\n      if (item.type === 'cell' && this.allowsCellSelection) return key;\n\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $84eb7a4250035b1f$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      this.state.setSelectedKeys(new $84eb7a4250035b1f$export$52baac22726c72bf([key], key, key));\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $84eb7a4250035b1f$export$52baac22726c72bf();\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(keys), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        key = this.getKey(key);\n\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') break;\n        }\n      }\n\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n\n      var keys = [];\n\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (!_this2.state.disabledKeys.has(key)) {\n            var item = _this2.collection.getItem(key);\n\n            if (item.type === 'item') keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $84eb7a4250035b1f$export$52baac22726c72bf());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selection), _step7; !(_step7 = _iterator7()).done;) {\n        var key = _step7.value;\n        if (!selectedKeys.has(key)) return false;\n      }\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(selectedKeys), _step8; !(_step8 = _iterator8()).done;) {\n        var key2 = _step8.value;\n        if (!selection.has(key2)) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }]);\n\n  return $1c74ece56c82b9c4$export$6c8a5aaad13c9852;\n}();\n\nvar $8702775bc7287a50$exports = {};\nexport { $ec35bdc00c823be9$export$253fe78d46329472 as useMultipleSelectionState, $1c74ece56c82b9c4$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["useRef","$f0goU$useRef","useState","$f0goU$useState","useMemo","$f0goU$useMemo","useControlledState","$f0goU$useControlledState","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$ec35bdc00c823be9$exports","$ec35bdc00c823be9$export$253fe78d46329472","$84eb7a4250035b1f$export$52baac22726c72bf","keys","anchorKey","currentKey","Set","$ec35bdc00c823be9$var$equalSets","setA","setB","size","item","has","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","isFocusedRef","setFocused","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$ec35bdc00c823be9$var$convertSelection","selectedKeys","defaultSelectedKeys","onSelectionChange","setSelectedKeys","disabledKeysProp","disabledKeys","selectionBehavior","setSelectionBehavior","isFocused","current","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$1c74ece56c82b9c4$exports","$1c74ece56c82b9c4$export$6c8a5aaad13c9852","collection","state","options","ref","allowsCellSelection","_isSelectAll","key","getSelectAllKeys","getKey","isEmpty","allKeys","every","first","getItem","index","last","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","isSelected","addKeys","hasChildNodes","childNodes","getFirstKey","isSelectAll","clearSelection","selectAll","toggleSelection","pointerType","key2","$8702775bc7287a50$exports","useMultipleSelectionState","SelectionManager"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-stately/selection/dist/module.js"],"sourcesContent":["import {useRef as $f0goU$useRef, useState as $f0goU$useState, useMemo as $f0goU$useMemo} from \"react\";\nimport {useControlledState as $f0goU$useControlledState} from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $ec35bdc00c823be9$exports = {};\n\n$parcel$export($ec35bdc00c823be9$exports, \"useMultipleSelectionState\", () => $ec35bdc00c823be9$export$253fe78d46329472);\n\nclass $84eb7a4250035b1f$export$52baac22726c72bf extends Set {\n    constructor(keys, anchorKey, currentKey){\n        super(keys);\n        if (keys instanceof $84eb7a4250035b1f$export$52baac22726c72bf) {\n            this.anchorKey = anchorKey || keys.anchorKey;\n            this.currentKey = currentKey || keys.currentKey;\n        } else {\n            this.anchorKey = anchorKey;\n            this.currentKey = currentKey;\n        }\n    }\n}\n\n\n\nfunction $ec35bdc00c823be9$var$equalSets(setA, setB) {\n    if (setA.size !== setB.size) return false;\n    for (let item of setA){\n        if (!setB.has(item)) return false;\n    }\n    return true;\n}\nfunction $ec35bdc00c823be9$export$253fe78d46329472(props) {\n    let { selectionMode: selectionMode = 'none' , disallowEmptySelection: disallowEmptySelection , allowDuplicateSelectionEvents: allowDuplicateSelectionEvents  } = props;\n    // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n    // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n    let isFocusedRef = $f0goU$useRef(false);\n    let [, setFocused] = $f0goU$useState(false);\n    let focusedKeyRef = $f0goU$useRef(null);\n    let childFocusStrategyRef = $f0goU$useRef(null);\n    let [, setFocusedKey] = $f0goU$useState(null);\n    let selectedKeysProp = $f0goU$useMemo(()=>$ec35bdc00c823be9$var$convertSelection(props.selectedKeys)\n    , [\n        props.selectedKeys\n    ]);\n    let defaultSelectedKeys = $f0goU$useMemo(()=>$ec35bdc00c823be9$var$convertSelection(props.defaultSelectedKeys, new $84eb7a4250035b1f$export$52baac22726c72bf())\n    , [\n        props.defaultSelectedKeys\n    ]);\n    let [selectedKeys, setSelectedKeys] = $f0goU$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n    let disabledKeysProp = $f0goU$useMemo(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set()\n    , [\n        props.disabledKeys\n    ]);\n    let [selectionBehavior, setSelectionBehavior] = $f0goU$useState(props.selectionBehavior || 'toggle');\n    // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n    // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n    if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n    return {\n        selectionMode: selectionMode,\n        disallowEmptySelection: disallowEmptySelection,\n        selectionBehavior: selectionBehavior,\n        setSelectionBehavior: setSelectionBehavior,\n        get isFocused () {\n            return isFocusedRef.current;\n        },\n        setFocused (f) {\n            isFocusedRef.current = f;\n            setFocused(f);\n        },\n        get focusedKey () {\n            return focusedKeyRef.current;\n        },\n        get childFocusStrategy () {\n            return childFocusStrategyRef.current;\n        },\n        setFocusedKey (k, childFocusStrategy = 'first') {\n            focusedKeyRef.current = k;\n            childFocusStrategyRef.current = childFocusStrategy;\n            setFocusedKey(k);\n        },\n        selectedKeys: selectedKeys,\n        setSelectedKeys (keys) {\n            if (allowDuplicateSelectionEvents || !$ec35bdc00c823be9$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n        },\n        disabledKeys: disabledKeysProp\n    };\n}\nfunction $ec35bdc00c823be9$var$convertSelection(selection, defaultValue) {\n    if (!selection) return defaultValue;\n    return selection === 'all' ? 'all' : new $84eb7a4250035b1f$export$52baac22726c72bf(selection);\n}\n\n\nvar $1c74ece56c82b9c4$exports = {};\n\n$parcel$export($1c74ece56c82b9c4$exports, \"SelectionManager\", () => $1c74ece56c82b9c4$export$6c8a5aaad13c9852);\n\nclass $1c74ece56c82b9c4$export$6c8a5aaad13c9852 {\n    /**\n   * The type of selection that is allowed in the collection.\n   */ get selectionMode() {\n        return this.state.selectionMode;\n    }\n    /**\n   * Whether the collection allows empty selection.\n   */ get disallowEmptySelection() {\n        return this.state.disallowEmptySelection;\n    }\n    /**\n   * The selection behavior for the collection.\n   */ get selectionBehavior() {\n        return this.state.selectionBehavior;\n    }\n    /**\n   * Sets the selection behavior for the collection.\n   */ setSelectionBehavior(selectionBehavior) {\n        this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /**\n   * Whether the collection is currently focused.\n   */ get isFocused() {\n        return this.state.isFocused;\n    }\n    /**\n   * Sets whether the collection is focused.\n   */ setFocused(isFocused) {\n        this.state.setFocused(isFocused);\n    }\n    /**\n   * The current focused key in the collection.\n   */ get focusedKey() {\n        return this.state.focusedKey;\n    }\n    /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy() {\n        return this.state.childFocusStrategy;\n    }\n    /**\n   * Sets the focused key.\n   */ setFocusedKey(key, childFocusStrategy) {\n        this.state.setFocusedKey(key, childFocusStrategy);\n    }\n    /**\n   * The currently selected keys in the collection.\n   */ get selectedKeys() {\n        return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n    /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */ get rawSelection() {\n        return this.state.selectedKeys;\n    }\n    /**\n   * Returns whether a key is selected.\n   */ isSelected(key) {\n        if (this.state.selectionMode === 'none') return false;\n        key = this.getKey(key);\n        return this.state.selectedKeys === 'all' ? !this.state.disabledKeys.has(key) : this.state.selectedKeys.has(key);\n    }\n    /**\n   * Whether the selection is empty.\n   */ get isEmpty() {\n        return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n    /**\n   * Whether all items in the collection are selected.\n   */ get isSelectAll() {\n        if (this.isEmpty) return false;\n        if (this.state.selectedKeys === 'all') return true;\n        if (this._isSelectAll != null) return this._isSelectAll;\n        let allKeys = this.getSelectAllKeys();\n        let selectedKeys = this.state.selectedKeys;\n        this._isSelectAll = allKeys.every((k)=>selectedKeys.has(k)\n        );\n        return this._isSelectAll;\n    }\n    get firstSelectedKey() {\n        let first = null;\n        for (let key of this.state.selectedKeys){\n            let item = this.collection.getItem(key);\n            if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n        }\n        return first === null || first === void 0 ? void 0 : first.key;\n    }\n    get lastSelectedKey() {\n        let last = null;\n        for (let key of this.state.selectedKeys){\n            let item = this.collection.getItem(key);\n            if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n        }\n        return last === null || last === void 0 ? void 0 : last.key;\n    }\n    /**\n   * Extends the selection to the given key.\n   */ extendSelection(toKey) {\n        if (this.selectionMode === 'none') return;\n        if (this.selectionMode === 'single') {\n            this.replaceSelection(toKey);\n            return;\n        }\n        toKey = this.getKey(toKey);\n        let selection;\n        // Only select the one key if coming from a select all.\n        if (this.state.selectedKeys === 'all') selection = new $84eb7a4250035b1f$export$52baac22726c72bf([\n            toKey\n        ], toKey, toKey);\n        else {\n            let selectedKeys = this.state.selectedKeys;\n            let anchorKey = selectedKeys.anchorKey || toKey;\n            selection = new $84eb7a4250035b1f$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n            for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))selection.delete(key);\n            for (let key1 of this.getKeyRange(toKey, anchorKey))if (!this.state.disabledKeys.has(key1)) selection.add(key1);\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getKeyRange(from, to) {\n        let fromItem = this.collection.getItem(from);\n        let toItem = this.collection.getItem(to);\n        if (fromItem && toItem) {\n            if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n            return this.getKeyRangeInternal(to, from);\n        }\n        return [];\n    }\n    getKeyRangeInternal(from, to) {\n        let keys = [];\n        let key = from;\n        while(key){\n            let item = this.collection.getItem(key);\n            if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n            if (key === to) return keys;\n            key = this.collection.getKeyAfter(key);\n        }\n        return [];\n    }\n    getKey(key) {\n        let item = this.collection.getItem(key);\n        if (!item) // ¯\\_(ツ)_/¯\n        return key;\n        // If cell selection is allowed, just return the key.\n        if (item.type === 'cell' && this.allowsCellSelection) return key;\n        // Find a parent item to select\n        while(item.type !== 'item' && item.parentKey != null)item = this.collection.getItem(item.parentKey);\n        if (!item || item.type !== 'item') return null;\n        return item.key;\n    }\n    /**\n   * Toggles whether the given key is selected.\n   */ toggleSelection(key) {\n        if (this.selectionMode === 'none') return;\n        if (this.selectionMode === 'single' && !this.isSelected(key)) {\n            this.replaceSelection(key);\n            return;\n        }\n        key = this.getKey(key);\n        if (key == null) return;\n        let keys = new $84eb7a4250035b1f$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n        if (keys.has(key)) keys.delete(key);\n        else {\n            keys.add(key);\n            keys.anchorKey = key;\n            keys.currentKey = key;\n        }\n        if (this.disallowEmptySelection && keys.size === 0) return;\n        this.state.setSelectedKeys(keys);\n    }\n    /**\n   * Replaces the selection with only the given key.\n   */ replaceSelection(key) {\n        if (this.selectionMode === 'none') return;\n        key = this.getKey(key);\n        if (key == null) return;\n        this.state.setSelectedKeys(new $84eb7a4250035b1f$export$52baac22726c72bf([\n            key\n        ], key, key));\n    }\n    /**\n   * Replaces the selection with the given keys.\n   */ setSelectedKeys(keys) {\n        if (this.selectionMode === 'none') return;\n        let selection = new $84eb7a4250035b1f$export$52baac22726c72bf();\n        for (let key of keys){\n            key = this.getKey(key);\n            if (key != null) {\n                selection.add(key);\n                if (this.selectionMode === 'single') break;\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getSelectAllKeys() {\n        let keys = [];\n        let addKeys = (key)=>{\n            while(key){\n                if (!this.state.disabledKeys.has(key)) {\n                    let item = this.collection.getItem(key);\n                    if (item.type === 'item') keys.push(key);\n                    // Add child keys. If cell selection is allowed, then include item children too.\n                    if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys([\n                        ...item.childNodes\n                    ][0].key);\n                }\n                key = this.collection.getKeyAfter(key);\n            }\n        };\n        addKeys(this.collection.getFirstKey());\n        return keys;\n    }\n    /**\n   * Selects all items in the collection.\n   */ selectAll() {\n        if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n    /**\n   * Removes all keys from the selection.\n   */ clearSelection() {\n        if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $84eb7a4250035b1f$export$52baac22726c72bf());\n    }\n    /**\n   * Toggles between select all and an empty selection.\n   */ toggleSelectAll() {\n        if (this.isSelectAll) this.clearSelection();\n        else this.selectAll();\n    }\n    select(key, e) {\n        if (this.selectionMode === 'none') return;\n        if (this.selectionMode === 'single') {\n            if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);\n            else this.replaceSelection(key);\n        } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        this.toggleSelection(key);\n        else this.replaceSelection(key);\n    }\n    /**\n   * Returns whether the current selection is equal to the given selection.\n   */ isSelectionEqual(selection) {\n        if (selection === this.state.selectedKeys) return true;\n        // Check if the set of keys match.\n        let selectedKeys = this.selectedKeys;\n        if (selection.size !== selectedKeys.size) return false;\n        for (let key of selection){\n            if (!selectedKeys.has(key)) return false;\n        }\n        for (let key2 of selectedKeys){\n            if (!selection.has(key2)) return false;\n        }\n        return true;\n    }\n    canSelectItem(key) {\n        if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n        let item = this.collection.getItem(key);\n        if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n        return true;\n    }\n    constructor(collection, state, options){\n        this.collection = collection;\n        this.state = state;\n        var ref;\n        this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n        this._isSelectAll = null;\n    }\n}\n\n\nvar $8702775bc7287a50$exports = {};\n\n\n\n\nexport {$ec35bdc00c823be9$export$253fe78d46329472 as useMultipleSelectionState, $1c74ece56c82b9c4$export$6c8a5aaad13c9852 as SelectionManager};\n//# sourceMappingURL=module.js.map\n"]},"metadata":{},"sourceType":"module"}