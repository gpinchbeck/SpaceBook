{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Camera } from 'expo-camera';\nimport DisplayAlert from \"./DisplayAlert\";\nimport Storage from \"./Storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar UploadPicture = function (_Component) {\n  _inherits(UploadPicture, _Component);\n\n  var _super = _createSuper(UploadPicture);\n\n  function UploadPicture(props) {\n    var _this;\n\n    _classCallCheck(this, UploadPicture);\n\n    _this = _super.call(this, props);\n\n    _this.sendToServer = function _callee(data) {\n      var loginInfo, response, blob;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loginInfo = _this.state.loginInfo;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(data.base64));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.blob());\n\n            case 6:\n              blob = _context.sent;\n              return _context.abrupt(\"return\", fetch(\"http://localhost:3333/api/1.0.0/user/\" + loginInfo.id + \"/photo\", {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'image/png',\n                  'X-Authorization': loginInfo.token\n                },\n                body: blob\n              }).then(function (res) {\n                displayAlert(\"Picture added \" + res);\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.takePicture = function _callee2() {\n      var options;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.camera) {\n                _context2.next = 4;\n                break;\n              }\n\n              options = {\n                quality: 0.5,\n                base64: true,\n                onPictureSaved: function onPictureSaved(data) {\n                  return _this.sendToServer(data);\n                }\n              };\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(_this.camera.takePictureAsync(options));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      hasPermission: null,\n      type: Camera.Constants.Type.front,\n      loginInfo: {}\n    };\n    return _this;\n  }\n\n  _createClass(UploadPicture, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context3.sent;\n              status = _await$Camera$request.status;\n              this.setState({\n                hasPermission: status === 'granted'\n              });\n              asyncStorage.getData(function (data) {\n                _this2.setState({\n                  loginInfo: data\n                });\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          hasPermission = _this$state.hasPermission,\n          type = _this$state.type;\n\n      if (hasPermission) {\n        return _jsx(View, {\n          style: styles.container,\n          children: _jsx(Camera, {\n            style: styles.camera,\n            type: type,\n            ref: function ref(_ref) {\n              _this3.camera = _ref;\n              return _this3.camera;\n            },\n            children: _jsx(View, {\n              style: styles.buttonContainer,\n              children: _jsx(TouchableOpacity, {\n                style: styles.button,\n                onPress: function onPress() {\n                  _this3.takePicture();\n                },\n                children: _jsx(Text, {\n                  style: styles.text,\n                  children: \" Take Photo \"\n                })\n              })\n            })\n          })\n        });\n      }\n\n      return _jsx(Text, {\n        children: \"No access to camera\"\n      });\n    }\n  }]);\n\n  return UploadPicture;\n}(Component);\n\nexport default UploadPicture;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/UploadPicture.js"],"names":["React","Component","Camera","DisplayAlert","Storage","asyncStorage","displayAlert","UploadPicture","props","sendToServer","data","loginInfo","state","fetch","base64","response","blob","id","method","headers","token","body","then","res","catch","error","console","log","takePicture","camera","options","quality","onPictureSaved","takePictureAsync","hasPermission","type","Constants","Type","front","requestCameraPermissionsAsync","status","setState","getData","styles","container","ref","buttonContainer","button","text","StyleSheet","create","flex","backgroundColor","flexDirection","margin","alignSelf","alignItems","fontSize","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\n\r\nimport DisplayAlert from './DisplayAlert';\r\nimport Storage from './Storage'\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass UploadPicture extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasPermission: null,\r\n            type: Camera.Constants.Type.front,\r\n            loginInfo: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { status } = await Camera.requestCameraPermissionsAsync();\r\n        this.setState({hasPermission: status === 'granted'});\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                loginInfo: data,\r\n            });\r\n        });\r\n    }\r\n\r\n    sendToServer = async (data) => {\r\n        const { loginInfo } = this.state;\r\n\r\n        const response = await fetch(data.base64);\r\n        const blob = await response.blob();\r\n\r\n        return fetch(`http://localhost:3333/api/1.0.0/user/${  loginInfo.id  }/photo`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'image/png',\r\n                'X-Authorization': loginInfo.token\r\n            },\r\n            body: blob\r\n        })\r\n        .then((res) => {\r\n            displayAlert(`Picture added ${ res }`);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    takePicture = async () => {\r\n        if(this.camera){\r\n            const options = {\r\n                quality: 0.5,\r\n                base64: true,\r\n                onPictureSaved: (data) => this.sendToServer(data)\r\n            };\r\n            await this.camera.takePictureAsync(options);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { hasPermission, type } = this.state;\r\n        if (hasPermission){\r\n            return (\r\n                <View style={styles.container}>\r\n                    <Camera style={styles.camera} type={type} ref={ref => {\r\n                        this.camera = ref;\r\n                        return this.camera;\r\n                    }}>\r\n                        <View style={styles.buttonContainer}>\r\n                            <TouchableOpacity style={styles.button} onPress={() => {this.takePicture()}}>\r\n                                <Text style={styles.text}> Take Photo </Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </Camera>\r\n                </View>\r\n            );\r\n        }\r\n        \r\n            return (\r\n                <Text>No access to camera</Text>\r\n            );\r\n        \r\n    }\r\n}\r\n\r\nexport default UploadPicture;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n    },\r\n    camera: {\r\n      flex: 1,\r\n    },\r\n    buttonContainer: {\r\n      flex: 1,\r\n      backgroundColor: 'transparent',\r\n      flexDirection: 'row',\r\n      margin: 20,\r\n    },\r\n    button: {\r\n      flex: 0.1,\r\n      alignSelf: 'flex-end',\r\n      alignItems: 'center',\r\n    },\r\n    text: {\r\n      fontSize: 18,\r\n      color: 'white',\r\n    },\r\n  });"]},"metadata":{},"sourceType":"module"}