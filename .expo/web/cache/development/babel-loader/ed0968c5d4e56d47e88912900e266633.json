{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport isRecordEqual from \"./isRecordEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\n\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n          name = _config$props.name,\n          children = _config$props.children,\n          component = _config$props.component,\n          getComponent = _config$props.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return _extends(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(NavigationStateContext),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr].props.initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = useChildListeners(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","_route$params4","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","getInitialState","_route$params$state","_route$params5","getRehydratedState","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","Object","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","_route","routes","find","index","_route2","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["C:/Users/georg/Documents/Coursework/SpaceBook/node_modules/@react-navigation/core/lib/module/useNavigationBuilder.js"],"sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport { PrivateValueStore } from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\n\n\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    var _child$type, _child$props;\n\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        } // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n\n\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions]));\n        return acc;\n      }\n    }\n\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${/*#__PURE__*/React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name}'${(_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n\n  return configs;\n};\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\n\n\nexport default function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n    children,\n    screenListeners,\n    ...rest\n  } = options;\n  const {\n    current: router\n  } = React.useRef(createRouter({ ...rest,\n    ...(route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null)\n  }));\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key !== null && key !== void 0 ? key : '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  const setState = React.useCallback(state => {\n    if (stateCleanedUp.current) {\n      // State might have been already cleaned up due to unmount\n      // We do not want to expose API allowing to override this\n      // This would lead to old data preservation on main navigator unmount\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    var _route$params4;\n\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      var _route$params, _route$params2, _route$params3;\n\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? { ...initialParams,\n        ...initialParamsFromParams\n      } : undefined;\n      return acc;\n    }, {}); // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    } // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state = // If the state isn't initialized, or stale, use the state we initialized instead\n  // The state won't update until there's a change needed in the state we have initalized locally\n  // So it'll be `undefined` or stale until the first navigation event happens\n  isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    } // The update should be limited to current navigator only, so we call the router manually\n\n\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  }); // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n\n  state = nextState;\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n\n  const initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  const getState = React.useCallback(() => {\n    const currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  const emitter = useEventEmitter(e => {\n    let routeNames = [];\n    let route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(route => route.key === e.target);\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      }));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat( // Get an array of listeners for all screens + common listeners on navigator\n    ...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map === null || map === void 0 ? void 0 : map[type]) : undefined;\n    })) // We don't want same listener to be called multiple times for same event\n    // So we remove any duplicate functions from the array\n    .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener === null || listener === void 0 ? void 0 : listener(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const descriptors = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent\n  };\n}\n//# sourceMappingURL=useNavigationBuilder.js.map"]},"metadata":{},"sourceType":"module"}