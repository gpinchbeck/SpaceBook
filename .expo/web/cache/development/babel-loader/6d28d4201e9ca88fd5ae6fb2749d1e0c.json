{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { NativeBaseProvider, Box, Modal, FlatList, Button, Text, Pressable, Divider } from 'native-base';\nimport DateTimePicker from 'react-datetime-picker';\nimport PropTypes from 'prop-types';\nimport Storage from \"./Storage\";\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar DraftsScreen = function (_Component) {\n  _inherits(DraftsScreen, _Component);\n\n  var _super = _createSuper(DraftsScreen);\n\n  function DraftsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, DraftsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      postText: '',\n      drafts: [],\n      currentDraft: '',\n      viewDraftModalVisible: false,\n      viewDate: false,\n      date: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(DraftsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getDrafts();\n\n        navigation.addListener('focus', function () {\n          _this2.getDrafts();\n        });\n      });\n    }\n  }, {\n    key: \"getDrafts\",\n    value: function getDrafts() {\n      var res;\n      return _regeneratorRuntime.async(function getDrafts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(asyncStorage.getDrafts());\n\n            case 2:\n              res = _context.sent;\n              this.setState({\n                drafts: res\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"uploadPost\",\n    value: function uploadPost() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          postText = _this$state.postText;\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/post\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Authorization': data.token\n        },\n        body: JSON.stringify({\n          text: postText\n        })\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        _this3.getPosts();\n\n        return displayAlert.displayAlert('Post uploaded.');\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state2 = this.state,\n          drafts = _this$state2.drafts,\n          viewDraftModalVisible = _this$state2.viewDraftModalVisible,\n          currentDraft = _this$state2.currentDraft,\n          viewDate = _this$state2.viewDate,\n          date = _this$state2.date;\n      return _jsx(NativeBaseProvider, {\n        children: _jsxs(Box, {\n          flex: 1,\n          pl: \"5\",\n          pr: \"5\",\n          children: [_jsx(FlatList, {\n            data: drafts,\n            renderItem: function renderItem(_ref) {\n              var item = _ref.item;\n              return _jsxs(Box, {\n                children: [_jsx(Box, {\n                  p: \"5\",\n                  children: _jsx(Pressable, {\n                    onPress: function onPress() {\n                      _this4.setState({\n                        viewDraftModalVisible: true,\n                        currentDraft: item\n                      });\n                    },\n                    children: _jsx(Text, {\n                      children: item\n                    })\n                  })\n                }), _jsx(Divider, {\n                  bg: \"muted.400\"\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item, index) {\n              return index.toString();\n            }\n          }), _jsx(Modal, {\n            isOpen: viewDraftModalVisible,\n            onClose: function onClose() {\n              return _this4.setState({\n                viewDraftModalVisible: false\n              });\n            },\n            children: _jsxs(Modal.Content, {\n              maxWidth: \"400px\",\n              children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n                children: \"Draft\"\n              }), _jsx(Modal.Body, {\n                children: _jsx(Box, {\n                  children: _jsx(Text, {\n                    children: currentDraft\n                  })\n                })\n              }), _jsx(Modal.Footer, {\n                justifyContent: \"space-evenly\",\n                children: _jsxs(Button.Group, {\n                  space: 2,\n                  children: [_jsx(Button, {\n                    bg: \"darkBlue.700\",\n                    onPress: function onPress() {\n                      return _this4.setState({\n                        viewDraftModalVisible: false\n                      });\n                    },\n                    children: \"Cancel\"\n                  }), _jsx(Button, {\n                    bg: \"darkBlue.700\",\n                    children: \"Post\"\n                  }), _jsx(Button, {\n                    bg: \"darkBlue.700\",\n                    onPress: function onPress() {\n                      return _this4.setState({\n                        viewDate: !viewDate\n                      });\n                    },\n                    children: \"Schedule\"\n                  })]\n                })\n              })]\n            })\n          }), currentDraft.length > 0 && _jsx(Modal, {\n            isOpen: viewDate,\n            onClose: function onClose() {\n              return _this4.setState({\n                viewDate: false\n              });\n            },\n            children: _jsxs(Modal.Content, {\n              maxWidth: \"400px\",\n              children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n                children: \"Edit Post\"\n              }), _jsx(Modal.Body, {\n                h: \"350\",\n                children: _jsx(Box, {\n                  children: _jsx(DateTimePicker, {\n                    display: \"spinner\",\n                    onChange: function onChange(newDate) {\n                      return _this4.setState({\n                        date: newDate\n                      });\n                    },\n                    value: date\n                  })\n                })\n              }), _jsx(Modal.Footer, {\n                justifyContent: \"space-evenly\",\n                children: _jsxs(Button.Group, {\n                  space: 2,\n                  children: [_jsx(Button, {\n                    bg: \"darkBlue.700\",\n                    onPress: function onPress() {\n                      return _this4.setState({\n                        viewDate: false\n                      });\n                    },\n                    children: \"Cancel\"\n                  }), _jsx(Button, {\n                    bg: \"darkBlue.700\",\n                    onPress: function onPress() {\n                      return displayAlert.displayAlert(\"Post scheduled for \" + date);\n                    },\n                    children: \"Confirm scheduled post\"\n                  })]\n                })\n              })]\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return DraftsScreen;\n}(Component);\n\nDraftsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default DraftsScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/DraftsScreen.js"],"names":["React","Component","NativeBaseProvider","Box","Modal","FlatList","Button","Text","Pressable","Divider","DateTimePicker","PropTypes","Storage","DisplayAlert","asyncStorage","displayAlert","DraftsScreen","props","state","data","postText","drafts","currentDraft","viewDraftModalVisible","viewDate","date","Date","navigation","getData","setState","getDrafts","addListener","res","fetch","id","method","headers","token","body","JSON","stringify","text","then","response","status","Promise","reject","Error","getPosts","catch","error","item","index","toString","length","newDate","propTypes","shape","navigate","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import Moment from 'react-moment';\r\nimport { NativeBaseProvider, Box, Modal, FlatList, Button, Text, Pressable, Divider } from 'native-base';\r\n// import BackgroundFetch from 'react-native-background-fetch';\r\n// import BackgroundTimer from 'react-native-background-timer';\r\nimport DateTimePicker from 'react-datetime-picker';\r\n// import { BackgroundFetchOptions, BackgroundFetchResult, BackgroundFetchStatus } from 'react-native-web-background-fetch';\r\nimport PropTypes from 'prop-types';\r\nimport Storage from './Storage';\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst asyncStorage = new Storage();\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass DraftsScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            postText: '',\r\n            drafts: [],\r\n            currentDraft: '',\r\n            viewDraftModalVisible: false,\r\n            viewDate: false,\r\n            date: new Date()\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getDrafts();\r\n            navigation.addListener('focus', () => {\r\n                this.getDrafts();\r\n            });\r\n        });\r\n        // BackgroundFetchOptions\r\n    }\r\n\r\n    async getDrafts(){\r\n        const res = await asyncStorage.getDrafts();\r\n        this.setState({drafts: res});\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     this.getDrafts();\r\n    //     const schedDate = Moment.add(0, 'd').set({hour:11,minute:40,second:0,millisecod:0})\r\n    //     const diffTime = schedDate.diff(Moment())\r\n    //     this.timeoutId = BackgroundTimer.setTimeout(() => {\r\n    //         console.log('tac');\r\n    //     }, diffTime);\r\n    // }\r\n\r\n    // componentWillUnmount(){\r\n    //     BackgroundTimer.clearTimeout(this.timeoutId);\r\n    // }\r\n\r\n    // async getDrafts(){\r\n    //     const res = await asyncStorage.getDrafts();\r\n    //     this.setState({drafts: res});\r\n    // }\r\n\r\n    // schedTest(){\r\n    //     this.timeoutId = BackgroundTimer.setTimeout(() => {\r\n    //         console.log('tac');\r\n    //     }, 10000);\r\n    // }\r\n\r\n    uploadPost(){\r\n        const { data, postText } = this.state;\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/post`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Authorization': data.token\r\n            },\r\n            body: JSON.stringify({\r\n                text: postText\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }            \r\n            this.getPosts(); \r\n            return displayAlert.displayAlert('Post uploaded.');\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { drafts, viewDraftModalVisible, currentDraft, viewDate, date } = this.state;\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Box flex={1} pl=\"5\" pr=\"5\">\r\n                    <FlatList data={drafts}\r\n                        renderItem={({item}) => (\r\n                            <Box>\r\n                                <Box p=\"5\">\r\n                                    <Pressable onPress={() => {\r\n                                        this.setState({viewDraftModalVisible: true, currentDraft: item})\r\n                                    }}>\r\n                                        <Text>{item}</Text>\r\n                                    </Pressable>\r\n                                </Box>\r\n                                <Divider bg=\"muted.400\"/>\r\n                            </Box>\r\n                        )}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                    />\r\n                    <Modal isOpen={viewDraftModalVisible} onClose={() => this.setState({viewDraftModalVisible: false})}>\r\n                        <Modal.Content maxWidth=\"400px\">\r\n                            <Modal.CloseButton/>\r\n                            <Modal.Header>Draft</Modal.Header>\r\n                            <Modal.Body>\r\n                                <Box>\r\n                                    <Text>{currentDraft}</Text>\r\n                                </Box>\r\n                            </Modal.Body>\r\n                            <Modal.Footer justifyContent=\"space-evenly\" >\r\n                                <Button.Group space={2}>\r\n                                    <Button bg=\"darkBlue.700\" onPress={() => this.setState({viewDraftModalVisible: false})}>Cancel</Button>\r\n                                    <Button bg=\"darkBlue.700\" >Post</Button>\r\n                                    <Button bg=\"darkBlue.700\" onPress={() => this.setState({viewDate: !viewDate})}>Schedule</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>\r\n                    {currentDraft.length > 0 && <Modal isOpen={viewDate} onClose={() => this.setState({viewDate: false})}>\r\n                        <Modal.Content maxWidth=\"400px\">\r\n                            <Modal.CloseButton/>\r\n                            <Modal.Header>Edit Post</Modal.Header>\r\n                            <Modal.Body h=\"350\">\r\n                                <Box>\r\n                                    <DateTimePicker display=\"spinner\" onChange={(newDate) => this.setState({date: newDate})} value={date}/>\r\n                                </Box>\r\n                            </Modal.Body>\r\n                            <Modal.Footer justifyContent=\"space-evenly\" >\r\n                                <Button.Group space={2}>\r\n                                    <Button bg=\"darkBlue.700\" onPress={() => this.setState({viewDate: false})}>Cancel</Button>\r\n                                    <Button bg=\"darkBlue.700\" onPress={() => displayAlert.displayAlert(`Post scheduled for ${ date }`)}>Confirm scheduled post</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>\r\n                        </Modal.Content>\r\n                    </Modal>}\r\n                </Box>\r\n            </NativeBaseProvider>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nDraftsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default DraftsScreen;"]},"metadata":{},"sourceType":"module"}