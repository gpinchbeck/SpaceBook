{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { PureComponent } from 'react';\nimport createIconSet from \"./createIconSet\";\nexport default function createMultiStyleIconSet(styles) {\n  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  var options = _objectSpread({\n    defaultStyle: styleNames[0],\n    fallbackFamily: function fallbackFamily(_unused) {\n      return styleNames[0];\n    },\n    glyphValidator: function glyphValidator(_unused, __unused) {\n      return true;\n    }\n  }, optionsInput);\n\n  var iconSets = styleNames.reduce(function (acc, name) {\n    var style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(function (result, propName) {\n      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;\n    }, options.defaultStyle);\n  }\n\n  function getIconSetForProps(props) {\n    var name = props.name;\n    var style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    var family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce(function (acc, prop) {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name ? iconSets[styleFromProps(_defineProperty({}, style, true))] : getIconSetForProps(_defineProperty({\n      name: name\n    }, style, true));\n  }\n\n  function getFontFamily() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass() {\n    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    var IconClass = function (_PureComponent) {\n      _inherits(IconClass, _PureComponent);\n\n      var _super = _createSuper(IconClass);\n\n      function IconClass() {\n        _classCallCheck(this, IconClass);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(IconClass, [{\n        key: \"render\",\n        value: function render() {\n          var selectedIconSet = getIconSetForProps(this.props);\n          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n          var props = reduceProps(this.props);\n          return React.createElement(SelectedIconClass, props);\n        }\n      }]);\n\n      return IconClass;\n    }(PureComponent);\n\n    IconClass.defaultProps = styleNames.reduce(function (acc, name) {\n      acc[name] = false;\n      return acc;\n    }, {});\n    IconClass.font = Object.values(styles).reduce(function (acc, style) {\n      acc[style.fontFamily] = style.fontFile;\n      return acc;\n    }, {});\n    IconClass.StyledIconSet = getStyledIconSet;\n    IconClass.getFontFamily = getFontFamily;\n    IconClass.getRawGlyphMap = getRawGlyphMap;\n    IconClass.hasIcon = hasIcon;\n    return IconClass;\n  }\n\n  var Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}","map":{"version":3,"mappings":"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","names":["React","PureComponent","createIconSet","createMultiStyleIconSet","styles","optionsInput","styleNames","Object","keys","length","Error","options","defaultStyle","fallbackFamily","_unused","glyphValidator","__unused","iconSets","reduce","acc","name","style","glyphMap","fontFamily","fontFile","fontStyle","styleFromProps","props","result","propName","indexOf","getIconSetForProps","family","selectIconClass","iconSet","iconClass","reduceProps","prop","getStyledIconSet","getFontFamily","getRawGlyphMap","hasIcon","createStyledIconClass","selectClass","IconClass","selectedIconSet","SelectedIconClass","createElement","defaultProps","font","values","StyledIconSet","Icon","Button"],"sourceRoot":"","sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/@expo/vector-icons/build/createMultiStyleIconSet.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport createIconSet from './createIconSet';\nexport default function createMultiStyleIconSet(styles, optionsInput = {}) {\n    const styleNames = Object.keys(styles);\n    if (styleNames.length === 0) {\n        throw new Error('You need to add at least one style');\n    }\n    const options = {\n        defaultStyle: styleNames[0],\n        fallbackFamily: (_unused) => styleNames[0],\n        glyphValidator: (_unused, __unused) => true,\n        ...optionsInput,\n    };\n    const iconSets = styleNames.reduce((acc, name) => {\n        const style = styles[name];\n        acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n        return acc;\n    }, {});\n    function styleFromProps(props) {\n        return Object.keys(props).reduce((result, propName) => styleNames.indexOf(propName) !== -1 && props[propName] === true\n            ? propName\n            : result, options.defaultStyle);\n    }\n    function getIconSetForProps(props) {\n        const { name } = props;\n        const style = styleFromProps(props);\n        if (options.glyphValidator(name, style))\n            return iconSets[style];\n        const family = options.fallbackFamily(name);\n        if (styleNames.indexOf(family) === -1) {\n            return options.defaultStyle;\n        }\n        return iconSets[family];\n    }\n    function selectIconClass(iconSet, iconClass) {\n        return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n    }\n    function reduceProps(props) {\n        return Object.keys(props).reduce((acc, prop) => {\n            if (styleNames.indexOf(prop) === -1) {\n                acc[prop] = props[prop];\n            }\n            return acc;\n        }, {});\n    }\n    function getStyledIconSet(style, name = '') {\n        if (styleNames.indexOf(style) === -1) {\n            return iconSets[options.defaultStyle];\n        }\n        return !name\n            ? iconSets[styleFromProps({ [style]: true })]\n            : getIconSetForProps({ name, [style]: true });\n    }\n    function getFontFamily(style = options.defaultStyle) {\n        return getStyledIconSet(style).getFontFamily();\n    }\n    function getRawGlyphMap(style = options.defaultStyle) {\n        return getStyledIconSet(style).getRawGlyphMap();\n    }\n    function hasIcon(name, style = options.defaultStyle) {\n        return options.glyphValidator(name, style);\n    }\n    function createStyledIconClass(selectClass = '') {\n        class IconClass extends PureComponent {\n            render() {\n                const selectedIconSet = getIconSetForProps(this.props);\n                const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n                const props = reduceProps(this.props);\n                return React.createElement(SelectedIconClass, props);\n            }\n        }\n        IconClass.defaultProps = styleNames.reduce((acc, name) => {\n            acc[name] = false;\n            return acc;\n        }, {});\n        IconClass.font = Object.values(styles).reduce((acc, style) => {\n            acc[style.fontFamily] = style.fontFile;\n            return acc;\n        }, {});\n        IconClass.StyledIconSet = getStyledIconSet;\n        IconClass.getFontFamily = getFontFamily;\n        IconClass.getRawGlyphMap = getRawGlyphMap;\n        IconClass.hasIcon = hasIcon;\n        return IconClass;\n    }\n    const Icon = createStyledIconClass();\n    Icon.Button = createStyledIconClass('Button');\n    return Icon;\n}\n//# sourceMappingURL=createMultiStyleIconSet.js.map"]},"metadata":{},"sourceType":"module"}