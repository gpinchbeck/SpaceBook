{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Box, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, HStack, Image, FlatList, Divider, Fab, Modal, FormControl, Input } from 'native-base';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport Storage from \"./Storage\";\nimport DisplayAlert from \"./DisplayAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar asyncStorage = new Storage();\nvar displayAlert = new DisplayAlert();\n\nvar FriendsScreen = function (_Component) {\n  _inherits(FriendsScreen, _Component);\n\n  var _super = _createSuper(FriendsScreen);\n\n  function FriendsScreen(props) {\n    var _this;\n\n    _classCallCheck(this, FriendsScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      data: {},\n      friends: [],\n      img: null,\n      currentUser: ''\n    };\n    return _this;\n  }\n\n  _createClass(FriendsScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var navigation = this.props.navigation;\n      asyncStorage.getData(function (data) {\n        _this2.setState({\n          data: data\n        });\n\n        _this2.getFriends();\n\n        navigation.addListener('focus', function () {\n          _this2.getFriends();\n        });\n      });\n    }\n  }, {\n    key: \"getFriends\",\n    value: function getFriends() {\n      var _this3 = this;\n\n      var data = this.state.data;\n      var friendsList = [];\n      fetch(\"http://localhost:3333/api/1.0.0/user/\" + data.id + \"/friends\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 403) {\n          return Promise.reject(new Error(\"Can only view the friends of yourself or your friends. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.json();\n      }).then(function (responseJson) {\n        if (responseJson.length > 0) {\n          var _loop = function _loop(j) {\n            _this3.getProfileImage(responseJson[j].user_id).then(function (responseBlob) {\n              var responseUrl = URL.createObjectURL(responseBlob);\n              console.log(responseUrl);\n              console.log(\"\");\n              friendsList.push([responseJson[j], responseUrl]);\n\n              _this3.setState({\n                friends: friendsList\n              });\n            });\n          };\n\n          for (var j = 0; j < responseJson.length; j += 1) {\n            _loop(j);\n          }\n        }\n      }).catch(function (error) {\n        displayAlert.displayAlert(error);\n      });\n    }\n  }, {\n    key: \"getProfileImage\",\n    value: function getProfileImage(userId) {\n      var data = this.state.data;\n      return fetch(\"http://localhost:3333/api/1.0.0/user/\" + userId + \"/photo\", {\n        method: 'GET',\n        headers: {\n          'X-Authorization': data.token\n        }\n      }).then(function (response) {\n        if (response.status === 401) {\n          return Promise.reject(new Error(\"Unauthorised. Status: \" + response.status));\n        }\n\n        if (response.status === 404) {\n          return Promise.reject(new Error(\"Not found. Status: \" + response.status));\n        }\n\n        if (response.status === 500) {\n          return Promise.reject(new Error(\"Server error. Status: \" + response.status));\n        }\n\n        return response.blob();\n      });\n    }\n  }, {\n    key: \"viewPost\",\n    value: function viewPost(item) {\n      console.log(item[1]);\n      return _jsx(HStack, {\n        p: \"5\",\n        children: _jsx(Box, {\n          children: _jsxs(HStack, {\n            space: 5,\n            justifyContent: \"flex-end\",\n            children: [_jsx(Image, {\n              source: {\n                uri: item[1]\n              },\n              size: 50,\n              borderRadius: \"100\",\n              alt: \"Profile Picture\"\n            }), _jsxs(Text, {\n              bold: true,\n              children: [item[0].user_givenname, \" \", item[0].user_familyname]\n            })]\n          })\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var navigation = this.props.navigation;\n      var friends = this.state.friends;\n      return _jsxs(NativeBaseProvider, {\n        children: [_jsx(Box, {\n          p: \"5\",\n          children: _jsx(FlatList, {\n            data: friends,\n            renderItem: function renderItem(_ref) {\n              var item = _ref.item;\n              return _jsxs(Box, {\n                children: [_this4.viewPost(item), _jsx(Divider, {\n                  bg: \"muted.400\"\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item, index) {\n              return index.toString();\n            }\n          })\n        }), _jsxs(Box, {\n          children: [_jsx(Button, {\n            onPress: function onPress() {\n              return navigation.navigate('FindFriends');\n            },\n            children: \"Find friends\"\n          }), _jsx(Button, {\n            onPress: function onPress() {\n              return navigation.navigate('FriendRequests');\n            },\n            children: \"Friend requests\"\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return FriendsScreen;\n}(Component);\n\nFriendsScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n    addListener: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default FriendsScreen;","map":{"version":3,"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/components/FriendsScreen.js"],"names":["React","Component","Box","NativeBaseProvider","Text","VStack","Button","Icon","Pressable","HStack","Image","FlatList","Divider","Fab","Modal","FormControl","Input","PropTypes","Moment","Storage","DisplayAlert","asyncStorage","displayAlert","FriendsScreen","props","state","data","friends","img","currentUser","navigation","getData","setState","getFriends","addListener","friendsList","fetch","id","method","headers","token","then","response","status","Promise","reject","Error","json","responseJson","length","j","getProfileImage","user_id","responseBlob","responseUrl","URL","createObjectURL","console","log","push","catch","error","userId","blob","item","uri","user_givenname","user_familyname","viewPost","index","toString","navigate","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Box, NativeBaseProvider, Text, VStack, Button, Icon, Pressable, HStack, Image, FlatList, Divider, Fab, Modal, FormControl, Input } from 'native-base';\r\nimport PropTypes from 'prop-types';\r\nimport Moment from 'react-moment';\r\nimport Storage from './Storage'\r\nimport DisplayAlert from './DisplayAlert';\r\n\r\nconst asyncStorage = new Storage();\r\n\r\nconst displayAlert = new DisplayAlert();\r\n\r\nclass FriendsScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {},\r\n            friends: [],\r\n            img: null,\r\n            currentUser: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { navigation } = this.props;\r\n        asyncStorage.getData((data) => {\r\n            this.setState({\r\n                data\r\n            });\r\n            this.getFriends();\r\n            navigation.addListener('focus', () => {\r\n                this.getFriends();\r\n            });\r\n        });\r\n    }\r\n\r\n    getFriends(){\r\n        const { data } = this.state; \r\n        const friendsList = [];\r\n        fetch(`http://localhost:3333/api/1.0.0/user/${ data.id }/friends`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 403){\r\n                return Promise.reject(new Error(`Can only view the friends of yourself or your friends. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            } \r\n            return response.json()\r\n        })\r\n        .then((responseJson) => {\r\n            if (responseJson.length > 0){\r\n                for (let j=0;j<responseJson.length;j+=1){\r\n                    this.getProfileImage(responseJson[j].user_id)\r\n                        .then((responseBlob) => {\r\n                            const responseUrl = URL.createObjectURL(responseBlob);\r\n                            console.log(responseUrl)\r\n                            console.log(\"\")\r\n                            friendsList.push([responseJson[j], responseUrl])\r\n                            this.setState({\r\n                                friends: friendsList\r\n                            });\r\n                        });\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            displayAlert.displayAlert(error);\r\n        })\r\n    }\r\n\r\n    getProfileImage(userId) {\r\n        const { data } = this.state;\r\n        return fetch(`http://localhost:3333/api/1.0.0/user/${  userId  }/photo`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'X-Authorization': data.token\r\n            }\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 401){\r\n                return Promise.reject(new Error(`Unauthorised. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 404){\r\n                return Promise.reject(new Error(`Not found. Status: ${  response.status}`));\r\n            }\r\n            if (response.status === 500){\r\n                return Promise.reject(new Error(`Server error. Status: ${ response.status }`));\r\n            }\r\n            return response.blob();\r\n        })\r\n    }\r\n\r\n    viewPost(item){\r\n        console.log(item[1]);\r\n        return (\r\n            <HStack p=\"5\">\r\n                <Box>\r\n                    <HStack space={5} justifyContent=\"flex-end\">\r\n                        <Image source={{uri: item[1]}} size={50} borderRadius=\"100\" alt=\"Profile Picture\"/>\r\n                        <Text bold>{item[0].user_givenname} {item[0].user_familyname}</Text>\r\n                    </HStack>\r\n                </Box>\r\n            </HStack>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { navigation } = this.props;\r\n        const { friends } = this.state;\r\n        return (\r\n            <NativeBaseProvider>\r\n                <Box p=\"5\">\r\n                    <FlatList\r\n                        data={friends}\r\n                        renderItem={({item}) => (\r\n                            <Box>\r\n                                {this.viewPost(item)}\r\n                                <Divider bg=\"muted.400\"/>\r\n                            </Box>\r\n                        )}\r\n                        keyExtractor={(item, index) => index.toString()}\r\n                    />\r\n                </Box>\r\n                <Box>  \r\n                    <Button onPress={() => navigation.navigate('FindFriends')}>Find friends</Button>\r\n                    <Button onPress={() => navigation.navigate('FriendRequests')}>Friend requests</Button>\r\n                </Box>\r\n            </NativeBaseProvider>\r\n        );\r\n    }\r\n}\r\n\r\nFriendsScreen.propTypes = {\r\n    navigation: PropTypes.shape({\r\n        navigate: PropTypes.func.isRequired,\r\n        addListener: PropTypes.func.isRequired\r\n    }).isRequired\r\n}\r\n\r\nexport default FriendsScreen;"]},"metadata":{},"sourceType":"module"}