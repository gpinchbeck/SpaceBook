{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useColorMode = function useColorMode() {\n  var _React$useContext = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _useState = (0, _react.useState)(initialColorMode),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      colorMode = _useState2[0],\n      setRawMode = _useState2[1];\n\n  function setColorMode(val) {\n    return _regenerator.default.async(function setColorMode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regenerator.default.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regenerator.default.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator.default.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  var _React$useContext2 = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"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","names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","useColorModeValue","useModeManager","useAccessibleColors","useColorMode","_regenerator","_slicedToArray2","_react","_Context","_React$useContext","default","useContext","HybridContext","colorModeContext","colorMode","undefined","Error","light","dark","_useColorMode","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_reactNative","useColorScheme","_useState","useState","_useState2","setRawMode","setColorMode","val","async","setColorMode$","_context","prev","next","awrap","set","stop","Promise","useEffect","getMode","getMode$","_context2","get","sent","_React$useContext2","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["D:/Users/georg/Desktop/MAD/SpaceBook/node_modules/native-base/lib/commonjs/core/color-mode/hooks.js"],"sourcesContent":["var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useColorModeValue=useColorModeValue;exports.useModeManager=useModeManager;exports.useAccessibleColors=useAccessibleColors;exports.useColorMode=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=_interopRequireWildcard(require(\"react\"));var _Context=require(\"./../hybrid-overlay/Context\");var _reactNative=require(\"react-native\");var useColorMode=function useColorMode(){var _React$useContext=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};exports.useColorMode=useColorMode;function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=(0,_reactNative.useColorScheme)();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState=(0,_react.useState)(initialColorMode),_useState2=(0,_slicedToArray2.default)(_useState,2),colorMode=_useState2[0],setRawMode=_useState2[1];function setColorMode(val){return _regenerator.default.async(function setColorMode$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regenerator.default.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}(0,_react.useEffect)(function(){if(colorModeManager){(function getMode(){var value;return _regenerator.default.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator.default.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);(0,_react.useEffect)(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}function useAccessibleColors(){var _React$useContext2=_react.default.useContext(_Context.HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"script"}